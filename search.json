[
  {
    "objectID": "zzz.html",
    "href": "zzz.html",
    "title": "dummy file so that downlit ends up",
    "section": "",
    "text": "dummy file so that downlit ends up\n\n\nin the renv lock file.\n\nlibrary(downlit)"
  },
  {
    "objectID": "resources/plot-competition.html",
    "href": "resources/plot-competition.html",
    "title": "Plot competition entries",
    "section": "",
    "text": "Vote for your favorites at Google Form.\n\nPlot 1\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ntst=penguins\n# View(tst)\ntstpp=drop_na(tst)\n# View(tstpp)\nggplot(data=tstpp,aes(x=body_mass_g/6350.29,                 y=flipper_length_mm))+geom_point(aes(shape=sex, color=species),alpha=0.4, shape= 8)+ labs(title=\" Stones & Flippers in Penguins\",x=\"Stones is a totally normal unit\", y=\"aQuAtIc LoCoMoTiOn ApPeNdAgE (mm)\")+theme(panel.background = element_rect(fill = \"magenta\"))+theme(panel.grid.major = element_line(linewidth = 5, color = \"#ff1493\"))+theme(panel.grid.minor = element_line(linewidth = 5, color = \"#ffd700\"))+theme(legend.background = element_rect(fill = \"yellow\"))+theme(legend.title = element_text(angle = 310, face = \"bold\", color = \"#FFFACD\", size = 56))+theme(axis.text.y = element_text(face = \"bold\", color = \"#EEE685\", size = 5, angle = 67))+theme(axis.text.x = element_text(face = \"italic\", color = \"#8B8970\", size = 5, angle = 67))+theme( legend.text = element_text(face=\"italic\",color = \"red\", size = 36))+theme( legend.key = element_rect(color = \"white\", fill = \"olivedrab1\"))+theme(axis.title.y = element_text(color = \"#ffd700\", angle = 90, size = 9))+ theme(axis.title.x = element_text(size = 16, color = \"magenta\", angle = 0))+theme(plot.background = element_rect(fill = \"red\"))+theme(plot.title = element_text(face = \"plain\", color = \"magenta\", size = 24, angle = 0))\n\n\n\n\n\n\n\nPlot 2\n\n\nCode\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(here)\n\nlibrary(cowplot) # to make panels of plots\nlibrary(ggridges) # ridge plots\n\n#HOW GOOD IS THE SIMPSON\nsimpson_tibble &lt;- read_csv(here(\"data/plot-competition/simpsons_episodes.csv.gz\"))\nsimpson_tibble_cleaned &lt;- simpson_tibble |&gt; select(-image_url, -video_url)\n\nsimpson_tibble_cleaned_1.1 &lt;- simpson_tibble_cleaned |&gt; \n  group_by(season, us_viewers_in_millions) |&gt;\n  summarise(season, us_viewers_in_millions)\n\nsimpson_plot_ugly &lt;- ggplot(\n  simpson_tibble_cleaned,\n  aes(x = season,\n      y = us_viewers_in_millions,\n      color = imdb_rating,\n      size = imdb_votes\n      )\n  ) +\n  geom_point(alpha = 0.1) +\n  facet_wrap (\n    ~ imdb_rating,\n    nrow = 1\n  ) +\n   labs(\n    title = \"istheSiMpSoNsSTILLPOPULAR!!!!!!!!!!!!\",\n    subtitle = \"D'OOOOOOOOOHHHHHHHHHHH?\",\n    y = \"THEPPLWHOWATCH\",\n    x = \"SIMIPSONS OVER THE YEARS\",\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"limegreen\"),\n    axis.text.x = element_text( color = \"purple\", size = 18, angle = 156), \n    axis.text.y = element_text( color = \"red\", size = 18, angle = 135), \n    plot.title = element_text( color = \"green\", size = 10, angle = 263), \n    plot.caption = element_text(color = \"gray\", size = 22), \n    axis.title.x = element_text(size = 22, color = \"hotpink\", angle = 66), \n    axis.title.y = element_text(color = \"maroon\", angle = 473, size = 17),\n    legend.background = element_rect(fill = \"yellow\"), \n    legend.title = element_text(angle = 71, face = \"bold\", color = \"blue\", size = 12), \n    legend.key = element_rect(color = \"green\", fill = \"lightblue\"), \n    legend.text = element_text(color = \"cyan\", size = 14)\n    ) \nsimpson_plot_ugly\n\n\n\n\n\n\n\nPlot 3\n\n\nCode\nlibrary(tidyverse)\n\nggplot(starwars,\n       aes(\n         x = height,\n         y = birth_year,\n         color = homeworld\n       )) +\n  geom_point() +\n  labs(\n    title = \"starwars?\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"italic\", color = \"yellow\", size = 16, angle = -45),\n    plot.background = element_rect(fill = 'green'),\n    panel.background = element_rect(fill = 'tomato1'),\n    plot.caption = element_text(),\n    legend.position = \"none\",\n    axis.title = element_text(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank()) +\n  coord_polar()\n\n\n\n\n\n\n\nPlot 4\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\npenguins_tbl = as_tibble(penguins)\n\npenguin2 &lt;- drop_na(penguins_tbl)\n\nggplot(\n  penguin2,\n  aes(\n    x = bill_length_mm,\n    y = flipper_length_mm,\n    color = species,\n    shape = sex\n  )\n) +\n  geom_point(alpha = .65, size = 10) +\n  xlim(30,61) +\n  ylim(150,250) +\n  labs(\n    x = \"Choose ur fighter\",\n    y = \"How big that flipper?\",\n    title = \"What penguin wins in a fight?\",\n    caption = \"Fight club: antarctica edition\"\n    ) + \n  theme(\n    axis.text.x = element_text(family = \"serif\", face = \"bold\", color = \"purple\", size = 20, angle = 11),\n    axis.text.y = element_text(family = \"luminari\", face = \"bold.italic\", color = \"yellow\", size = 24, angle = 135),\n    plot.background = element_rect(fill = \"#8c510a\"),\n    plot.title = element_text(family = \"luminari\", face = \"bold\", color = \"green\", size = 20, angle = 1, line= -5 ), \n    plot.caption = element_text(family = \"short\", face = \"italic\", color = \"#35978f\", size = 26, angle = 8), \n    axis.title.x = element_text(family = \"mono\", size = 30, color = \"blue\", angle = 183), \n    axis.title.y = element_text(color = \"darkorange\", angle = 275, size = 17),\n    legend.background = element_rect(fill = \"#dfc27d\"),\n     legend.title = element_text(family = \"short\", angle = 11, face = \"bold\", color = \"hotpink\", size = 9), \n    legend.key = element_rect(color = \"darkgreen\", fill = \"red\"), \n    legend.text = element_text(color = \"yellow\", size = 10, angle = 187, face = \"italic\"), \n    panel.background = element_rect(fill = \"brown\"), \n    panel.grid.major.x = element_line(linewidth = 5, color = \"yellow\"),\n      panel.grid.minor = element_line(linewidth = 3, color = \"red\"),\n    panel.grid.major.y = element_line(color = \"green\", linewidth = 4),\n    \n   \n  )\n\n\n\n\n\n\n\nPlot 5\n\n\nCode\nggplot(\n  quakes,\n  aes(\n    x = lat,\n    y = long,\n    fill = mag,\n  )\n) +\n  geom_hex(fill = \"orange2\") +\n  geom_rug(sides = \"trbl\", alpha = 1/2, position = \"jitter\", fill = \"sienna1\") +\n  geom_violin(fill = \"yellow2\") +\n  scale_y_reverse() + \n  scale_x_continuous() +\n  labs(\n    x = \"the higher the latittude, the higher the altitude\",\n    y = \"totally longitudinal\",\n    title = \"DroP THaT a$$ Like an &lt;ce&gt;&lt;b5&gt;&lt;ce&gt;&lt;b1&gt;&lt;cf&gt;&lt;81&gt;&lt;cf&gt;&lt;84&gt;&lt;ce&gt;&lt;b7&gt;QUAKE\"\n  ) + \n  theme(\n    axis.text.x = element_text(family = \"Impact\",face = \"bold\", color = \"darkgoldenrod2\", size = 15, angle = 183, debug = TRUE), \n    axis.text.y = element_text(family = \"Courier New\", face = \"bold\", color = \"darkgoldenrod3\", size = 15, angle = 290, debug = TRUE), \n    axis.title.x = element_text(family=\"Comic Sans MS\", face = \"bold\", color = \"blanchedalmond\", size = 22, debug = TRUE),\n    axis.title.y = element_text(family=\"Comic Sans MS\", face = \"bold\", color = \"bisque1\", size = 22, debug = TRUE),\n    panel.background = element_rect(fill = \"burlywood1\", color = \"chocolate1\", linewidth = 4), \n    plot.background = element_rect(fill = \"khaki1\"),\n    panel.grid.major = element_line(linewidth = 1, color = \"tan1\"),\n    panel.grid.minor = element_line(linewidth = 4, color = \"lightgoldenrod1\"),\n    plot.title = element_text(face = \"bold\", color = \"darkgoldenrod1\", size = 20)\n  )\n\n\n\n\n\nPlot 6\n\n\nCode\nlibrary(ggpubr)\nlibrary(jpeg)\nurl &lt;- \"https://i.imgur.com/qtPINjN.jpg\"\ndownload.file(url, destfile = here(\"data/plot-competition/trees.jpg\"))\nimg &lt;- jpeg::readJPEG(here(\"data/plot-competition/trees.jpg\"))\n\nggplot(\n data = trees,\n  mapping = aes(\n    x = Height,\n    y = Girth,\n    color = count(x),\n    size = 10\n  )\n) +\n  background_image(img) +\n  annotate(\"rect\", \n           xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf,\n           fill = \"green\", alpha = .8) +\n  geom_jitter(\n    aes(\n    fill = Volume,\n    size = Height\n  ), \n  alpha = 0.9,\n  shape = 24,\n  color = \"magenta\"\n) +\n  theme(\n    plot.background = element_rect(fill = \"magenta\"),\n    axis.text.x = element_text(face = \"bold\", color = \"orange\", size = 12, angle = 200),\n    axis.text.y = element_text(face = \"bold\", color = \"yellow\", size = 18, angle = 179),\n    axis.title.x = element_text(size = 34, color = \"grey\", angle = 90), \n    axis.title.y = element_text(color = \"maroon\", angle = 180, size = 17),\n  ) +\n  labs(\n    title = \"nature \\U1F600\",\n    x = \"tall\",\n    y = \"beefy\"\n  ) +\ntheme(legend.position = \"none\")\n\n\n\n\n\nPlot 7\n\n\nCode\nlibrary(tidyverse)\nlibrary(here)\nlibrary(knitr)\nlibrary(palmerpenguins)\nlibrary(cowplot)\nlibrary(ggridges)\nlibrary(datasets)\n\nchk_tbl &lt;- as_tibble(ChickWeight)\n\nggplot(\n  chk_tbl,\n  aes(\n    x = Time,\n    y = weight,\n    color = Diet,\n    size = weight\n  )\n) + \n  geom_point(\n  ) + \n  labs(\n    title = \"how much chonk can a little chick chonk if a\\nlittle chick could chomp chomp?\",\n    subtitle = \"cheep! cheep!                                       chomp!\",\n    x = \"time\",\n    y = \"chick chonk\",\n    legend = \"dr. chomp's\\nexperimental diet programs\",\n    Diet = \"dr. chomp's\\nexperimental diet programs\"\n  ) +\n  xlim(\n    -3, 25\n  )  + \n  theme(\n    axis.text.x = element_text(face = \"bold.italic\", color = \"#FFE70F\", size = 18, angle = 180),\n    axis.text.y = element_text(face = \"bold\", color = \"#FFE70F\", size = 25, angle = 290),\n    axis.title.x = element_text(face = \"bold\", color = \"lightgoldenrod3\", size = 26, angle = 358), \n    axis.title.y = element_text(face = \"bold\", color = \"lightgoldenrod3\", size = 12, angle = 275),\n    plot.background = element_rect(fill = \"#C4C254\"),\n    plot.title = element_text(face = \"bold\", color = \"gold2\", size = 16, angle = 1),\n    legend.background = element_rect(fill = \"yellow\"),\n    legend.title = element_text(face = \"bold\", color = \"palevioletred4\", size = 10, angle = 156), \n    legend.text = element_text(color = \"lightgoldenrod3\", size = 14),\n    panel.background = element_rect(fill = \"khaki4\"),\n    panel.grid.major.y = element_line(color = \"rosybrown3\"), \n    panel.grid.major.x = element_line(color = \"cadetblue4\"),\n    panel.grid.minor = element_line(color = \"khaki4\")\n  ) +\n  scale_color_manual(\n    breaks = c(\"1\", \"2\", \"3\", \"4\"),\n    values = c(\"thistle1\", \"darkslategray4\", \"lightcyan\", \"yellowgreen\")\n  ) \n\n\n\n\n\n\n\nPlot 8\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(cowplot)\n\npenguins &lt;- drop_na(penguins)\n\nggplot(penguins,\n       aes(x = log2(bill_depth_mm),\n           y = flipper_length_mm/log2(bill_length_mm),\n           shape = (species))) +\n    geom_point(aes(color = body_mass_g/333), size = 8) +\n    scale_color_gradient2(low = \"magenta\", mid = \"yellow\", high = \"chartreuse4\", midpoint = 14) +\n    facet_grid(~ year) +\n    theme_minimal_grid() +\n    labs(\n        title = \"Fun penguin facts - by year (as inspired by a watermelon)\",\n        x = \"thick beak with log2?\",\n        y = \"long flipper/long bill? if long bill still long when log2\",\n        caption = \"Wut do u mean these data mean nothing to you?\"\n    ) +\n#Ugly theme inspired by Yunus Ozekin\n      theme(\n    axis.text.x = element_text(face = \"bold.italic\", color = \"#993333\", size = 29, angle = 330), \n    axis.text.y = element_text(face = \"bold\", color = \"orange\", size = 23, angle = 186), \n    plot.background = element_rect(fill = \"chartreuse4\"), \n    plot.title = element_text(face = \"bold\", color = \"chartreuse\", size = 65, angle = 1),\n    panel.background = element_rect(fill = \"brown1\"), \n    panel.grid.major.y = element_line(color = \"chartreuse1\", linetype = \"dotdash\", linewidth = 1.2), \n    panel.grid.major.x = element_line(color = \"magenta3\", linewidth = 3, linetype = \"twodash\"), \n    axis.title.x = element_text(face = \"italic\", size = 37, color = \"purple4\", angle = 12), \n    axis.title.y = element_text(face = \"bold\", color = \"yellow3\", angle = 273, size = 28),\n    plot.caption = element_text(size = 33, color = \"brown3\", angle = 4)\n)\n\n\n\n\n\n\n\nPlot 9\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nlyrics &lt;- c(\"I was tired of my lady wed been together too long Like a worn-out recording of a favorite song So while she lay there sleepin I read the paper in bed And in the personal columns there was this letter I read If you like Pina Coladas and getting caught in the rain If youre not into yoga if you have half a brain If you like making love at midnight in the dunes on the cape Then Im the love that youve looked for write to me and escape\")\n\n# Process lyrics into vector\nlyrics &lt;- lyrics %&gt;%\n  tolower() %&gt;%\n  str_split(pattern = \" \") %&gt;%\n  unlist() %&gt;%\n  unique()\n\n# Create tibble\ncolada_tbl &lt;- tibble(song_lyrics_1 = lyrics)\n\n# Add values for similarity of each given word in the song to each other given word\nfor (num_x in 1:length(lyrics)){\n  new_vector &lt;- c()\n  for (num_y in 1:length(lyrics)){\n    characters_1 &lt;- str_split(lyrics[num_x], \"\")[[1]]\n    characters_2 &lt;- str_split(lyrics[num_y], \"\")[[1]]\n    similarity &lt;- sum(characters_1 %in% characters_2)/((length(characters_1)+length(characters_2))/2)\n    new_vector &lt;- c(new_vector,similarity)}\n  colada_tbl[lyrics[num_x]] &lt;- new_vector\n}\n\n# Function to add an beach scene\nocean &lt;- function(tbl,disp_word){\n  disp_word &lt;- unlist(str_split(disp_word,pattern = \"\"))\n    for (i in 1:length(disp_word)){\n      sea &lt;- sample(30:35,1)\n      foam &lt;- sample(2:6,1)\n      sand &lt;- 64 - sea - foam\n      tbl &lt;- tbl %&gt;%\n      rbind(c(disp_word[i],rep(1, sea), rep(0.2, foam), rep(-1, sand)))\n    }\n  return(tbl)\n}\n\n# Add in a beach scene with some random row names\ncolada_tbl &lt;- ocean(colada_tbl,'QWERTYUOPASDFGHJKLZXCVBNM1234567890')\n\n# Make into long tbl\ncolada_long &lt;- pivot_longer(colada_tbl, cols = lyrics,names_to = \"song_lyrics_2\", values_to = \"Similarity\")\n\n# Order tibble correctly for visualization\ncolada_long$song_lyrics_1 &lt;- factor(colada_long$song_lyrics_1, \n                                   levels = c(rev(unlist(str_split('QWERTYUOPASDFGHJKLZXCVBNM1234567890',pattern=\"\"))),rev(lyrics)))\n  \ncolada_long$song_lyrics_2 &lt;- factor(colada_long$song_lyrics_2, \n                                   levels = lyrics)\n\n# Make similarity values numeric\ncolada_long$Similarity &lt;- as.numeric(colada_long$Similarity)\n\n# Plot the Pi&lt;c3&gt;&lt;b1&gt;a Colada Art\nggplot(colada_long, aes(x = song_lyrics_2, y = song_lyrics_1)) +\n  geom_tile(aes(fill = Similarity)) + # Fill based on word similarity values\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, # Font, color, size, and orientation of axis labels\n                                   color = 'darkgrey',family = \"Comic Sans MS\"),\n        axis.text.y = element_text(angle = 0, hjust = 1, \n                                   color = 'darkgrey',family = \"Comic Sans MS\")) +\n  scale_fill_gradient2(low = \"#F0E68C\", high = \"skyblue\", mid = \"white\", midpoint = 0.2) + # Add scale of heatmap\n  geom_boxplot(aes(x = song_lyrics_2, y = Similarity*8-8, color = song_lyrics_2)) + # Add rainbow boxplots\n  scale_color_discrete() +\n  theme(legend.position = \"none\") + # Remove legend\n  theme(text = element_text(size = 6)) +\n  labs(title = \"DUNES ON THE CAPE\", # Add title and axis labels\n       x= 'Getting Caught in the Rain', \n       y = 'Pi&lt;c3&gt;&lt;b1&gt;a Coladas') +\n  theme(plot.title = element_text(size = 25,family = \"Times New Roman\",color='lavender', \n                                  face = 'bold', hjust = 0.5),\n        axis.title.x = element_text(size = 15,family = \"Comic Sans MS\",color='salmon'),\n        axis.title.y = element_text(size = 15,family = \"Comic Sans MS\",color='pink')) + # Add in \"Margaritaville\" text\n            geom_text(aes(x = 'like', y = 'like', label = 'Pi&lt;c3&gt;&lt;b1&gt;a Colada'),size = 3, \n                      color = 'skyblue') +\n            geom_text(aes(x = 'while', y = 'while', label = 'Pi&lt;c3&gt;&lt;b1&gt;a Colada'),size = 5, \n                      color = 'skyblue') +\n            geom_text(aes(x = 'columns', y = 'columns', label = 'Pi&lt;c3&gt;&lt;b1&gt;a Colada'),size = 8, \n                      color = 'skyblue') +\n            geom_text(aes(x = 'midnight', y = 'midnight', label = 'Pi&lt;c3&gt;&lt;b1&gt;a Colada'),size = 10, \n                      color = 'skyblue')\n\n\n\n\n\nPlot 10\n\n\nCode\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(gifski)\nlibrary(cowplot)\n\n#Plot stacked columns with lengths as percent of world population per year\n# Pipe that assigns output as df and starts with the world population dataset\ndf &lt;- population |&gt;\n        mutate(percent_population=(population/max(population)*100)) |&gt;\n          filter(percent_population&gt;5) |&gt;\n            arrange(population)\np &lt;-  ggplot(data=df) +       \n      geom_col(aes(country, percent_population)) +\n      labs(title = 'Percent of World Population of Countries in {frame_time}', x='', y='') +\n      theme_cowplot() +\n      transition_time(as.integer(year)) +\n      ease_aes('linear') \n# Animate graphs and save animation\nsuppressWarnings(animate(p, renderer=gifski_renderer(), file_renderer=\"data/out/animation\"))\nanim_save(\"data/out/animation/gg_anim_wc.gif\")\n\n\n\n\n\nPlot 11\n\n\nCode\nlibrary(tidyverse)\nlibrary(gapminder)\n\nggplot(\n  gapminder,\n  aes(\n    x = lifeExp,\n    y = gdpPercap,\n    color = year,\n    shape = continent,\n    size = pop\n  )\n) +\n\n  geom_jitter(\n    color = \"#edfd07\", \n    fill = \"white\", \n    size = 10,\n    alpha = 0.2\n  ) +\n  scale_x_log10() +\n  scale_y_sqrt() +\n  labs(\n    x = \"When die?\",\n    y = \"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\",\n    title = \"money made x age\",\n    ) + \n  scale_x_discrete(position = \"top\") + \n  theme(\n    axis.text.x = element_text(face = \"bold.italic\", color = \"purple\", size = 18, angle = 180), \n    axis.text.y = element_text(face = \"italic\", color = \"white\", size = 12, angle = 90), \n    plot.title = element_text(face = \"bold.italic\", color = \"#6ef710\", size = 15, angle = 90), \n    axis.title.x = element_text(size = 10, color = \"pink\", angle = 270), \n    axis.title.y = element_text(color = \"white\", angle = 120, size = 20),\n    plot.background = element_rect(fill = \"#10f7ed\"), \n    legend.background = element_rect(fill = \"#6ef710\"), \n    legend.title = element_text(angle = 95, face = \"italic\", color = \"#edfd07\", size = 7), \n    legend.key = element_rect(color = \"magenta\", fill = \"#10f7ed\"), \n    legend.text = element_text(color = \"#10f7ed\", size = 8), \n    panel.background = element_rect(fill = \"magenta\"), \n    legend.position = \"right\",\n    panel.grid = element_blank()\n  )\n\n\n\n\n\nPlot 12\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndata(\"starwars\")\nstarwars_data &lt;- starwars %&gt;%\n  select(name, height, mass, species)\n\ndat &lt;- data.frame(\n  x0 = rep(0, nrow(starwars_data)),\n  y0 = rep(0, nrow(starwars_data)),\n  x1 = runif(nrow(starwars_data)),\n  y1 = runif(nrow(starwars_data)),\n  shade = seq(1, nrow(starwars_data)),\n  size = 0.6\n)\n\nggplot(dat, aes(x = x0, y = y0, xend = x1, yend = y1, colour = shade, size = size)) +\n  geom_segment(show.legend = FALSE) +\n  coord_polar() +\n  scale_y_continuous(expand = c(0, 0)) +\n  scale_x_continuous(expand = c(0, 0)) + \n  scale_color_gradient(low = \"blue\", high = \"white\") + \n  scale_size(range = c(2, 10)) + \n  theme_void() +\n  theme(plot.background = element_rect(fill = \"black\"))\n\n\n\n\n\n\n\nPlot 13\n\n\nCode\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nbfro_reports_geocoded &lt;- read_csv(here(\"data/plot-competition/bfro_reports_geocoded.csv.gz\"))\n\ncobigfoot = filter(\n  bfro_reports_geocoded,\n  state == \"Colorado\"\n)\n\nggplot(\n  cobigfoot,\n  aes(\n    x = conditions,\n    y = temperature_high\n  )\n) +\n  geom_point(\n    aes(\n      color = season,\n      size = wind_speed\n    ),\n    shape = 8,\n  ) +\n  coord_polar() +\n  labs(\n    x = \"Hows that sky?\",\n    y = \"Hot or Not: Temperature\",\n    title = \"Will YOU see Bigf00t?\",\n    subtitle = \"Colorado edition\",\n    caption = \"ItS BiGf00t SeAsON\"\n  ) +\n  scale_x_discrete(position = \"top\") +\n  theme(axis.title.x = element_text(family = \"mono\", color = \"lightblue\", face = \"bold\", size = 15)) +\n   theme(axis.title.y = element_text(family = \"sans\", color = \"blue\", face = \"bold\", size = 13)) +\n   theme(plot.caption = element_text(color = \"purple\", size = 22, angle = 20, family = \"mono\")) +\n   theme(plot.title = element_text(family = \"mono\",color = \"red\", hjust = 0.5, line = -10, size = 30))  +\n  theme(plot.subtitle = element_text(family = \"serif\",hjust = 0.75, angle = 5, line = -2, color = \"pink\", size = 25)) +\n  theme(plot.background = element_rect(fill = \"darkblue\")) +\n  theme(panel.background = element_rect(fill = \"yellow\")) +\n  theme(panel.grid.major = element_blank()) +\n  theme(legend.title = element_text(face = \"bold\", color = \"purple\", size = 5)) +\n  theme(legend.text = element_text(color = \"magenta\", size = 5)) +\n  theme(axis.text.x = element_text(family = \"mono\", color = \"lightblue\", face = \"bold\")) +\ntheme(axis.text.y = element_text(family = \"serif\", color = \"white\", face = \"bold\", size = 10)) + \n  geom_jitter(\n    color = \"green\",\n    shape = 12\n  )\n\n\n\n\n\n\n\nPlot 14\n\n\nCode\nlibrary(tidyverse)\nggplot(data = Orange,\n       mapping = aes(\n         x = age,\n         y =  circumference,\n         color = Tree,\n       )\n) +\n  geom_point() +\n  theme(panel.background = element_rect(fill = \"green\")) +\n  labs(\n    x = \"age\",\n    y = \"CIRCUMFERENCE\",\n    title = \"orange trees\",\n    ) +\n  theme(legend.position = \"bottom\") +\n  theme(plot.background = element_rect(fill = \"red\"))\n\n\n\n\n\n\n\nPlot 15\n\n\nCode\nlibrary(tidyverse)\nlibrary(DAAG)\n\ngreatLakes &lt;- as_tibble(greatLakes) %&gt;%\n  mutate(Michigan = michHuron, year = 1918:2009) %&gt;%\n  #, puddle_in_my_backyard = Ontario\n  #mutate(puddle_in_my_backyard = 0) %&gt;%\n  select(year, Huron = michHuron, everything()) %&gt;%\n  pivot_longer(cols = 2:6, names_to = \"lake\", values_to = \"heights\")\ngreatLakes$heights[552] = 2\n\nggplot(data = greatLakes, aes(x = year, y = heights^3, color = lake)) + \n  geom_point() + geom_line(alpha = 0.9, linewidth = 4) +\n  geom_vline(aes(xintercept = 1965), color = \"white\") +\n  geom_text(aes(label = \"lake level\", angle = 100), size = 2) +\n  theme(plot.background = element_rect(fill = \"mediumspringgreen\"),\n        plot.title = element_text(color = \"greenyellow\", size = 17, angle = 1), \n        plot.caption = element_text(color = \"white\", size = 22),#not in use\n        axis.title.x = element_text(size = 12, color = \"pink\", angle = 1), \n        axis.title.y = element_text(color = \"pink\", size = 12, angle = 92), \n        axis.ticks = element_line(color = \"pink\", linewidth = 13),\n        axis.text = element_text(color = \"green2\", face = \"bold\"),\n        legend.background = element_rect(fill = \"black\"), \n        legend.title = element_text(color = \"mediumorchid4\", size = 10, angle = 359), \n        legend.key = element_rect(color = \"orange\", fill = \"yellow\"), \n        legend.text = element_text(color = \"red\", size = 6, face = \"bold\"), \n        panel.background = element_rect(fill = \"red\"), \n        panel.grid.major.y = element_line(color = \"yellow\", linewidth = 10, linetype = \"dashed\"), \n        panel.grid.major.x = element_line(color = \"yellow\", linewidth = 0.1), \n        panel.grid.minor = element_line(color = \"green\", linewidth = 0.2)\n        #legend.position = \"bottom\"\n) +\n  labs(x = \"year\", y = \"heights (cubed)\",\n       title = \"gr8 lakes\") +\n  annotate(x = 1975, y = 3000000, label = \"1975: Edmund Fitzgerald sinks\", size = 2.5,  vjust = 3.5, geom=\"label\")\n\n\n\n\n\nPlot 16\n\n\nCode\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(RColorBrewer)\nlibrary(Rtsne)\n\nsetup_coords &lt;- function(groups = 3, n = 100, sd = .05) {\n  tibble(\n    x = rep(1:groups, each = n) + rnorm(groups*n, sd = sd),\n    y = rep(seq(from = 0, to = 10, length.out = n), groups) + \n          rnorm(groups*n, sd = sd),\n    group = rep(letters[1:groups], each = n)\n  )\n}\n\ndo_tsne &lt;- function(coords, perplexity = 5) {\n  tsne_fit &lt;- coords %&gt;%\n    select(x, y) %&gt;%\n    scale() %&gt;%\n    Rtsne(perplexity = perplexity, max_iter = 500, check_duplicates = FALSE)\n  \n    tsne_fit$Y %&gt;%\n      as.data.frame() %&gt;%\n      cbind(select(coords, -x, -y))\n}\n\nfinal_plot &lt;- function(groups = 24, n = 800, sd = 4, perplexity = 100) {\n  setup_coords(groups = groups, n = n, sd = sd) %&gt;%\n    do_tsne(perplexity) %&gt;%\n    ggplot(aes(V1, V2, color = group)) + \n    geom_point(show.legend = FALSE) +\n    coord_fixed() + theme_void() + \n    ggtitle(\"It is a flower\")+\n    scale_color_brewer(palette='PiYG', type=\"seq\")+\n    theme(\n      plot.margin = margin(20, 20, 20, 20),\n      panel.border = element_rect(color = \"white\", fill = NA),\n      plot.title = element_text(family = \"serif\", hjust = 0.5, face = \"italic\")\n      )\n}\n\nfinal_plot(groups = 15, sd = 40)\n\n\n\n\n\nPlot 17\n\n\nCode\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(here)\nlibrary(ggridges)\nlibrary(viridis)\n\nggplot(\n  diamonds,\n  aes(\n    x = carat,\n    y = log10(depth) + sin(carat)\n  )\n) + \n  stat_density2d(\n    aes(fill = after_stat(density)), \n    geom = 'tile', \n    contour = F,\n    size = 0.22,\n    bins = 20,\n    linetype = 5,\n    show.legend = FALSE\n  ) +\n  scale_fill_viridis()+\n  geom_density2d(\n    aes(fill = ..level..), \n    geom = \"polygon\", \n    colour= \"white\",\n   linewidth = 0.25, \n   bins = 10\n  ) +\n  theme_void()+\n  xlim(0,2.5)+\n  ylim(1.9,2.9)\n\n\n\n\n\n\n\nPlot 18\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(RColorBrewer)\n\ncustom_colors&lt;-c(\"tan4\",\"olivedrab4\",\"orange3\")\n\nggplot(\n  data=iris,\n  mapping=aes(\n    x=Petal.Width,\n    y=Petal.Length,\n    fill=Species\n  )\n)+\n  geom_boxplot()+\n  labs(\n    x=\"Error\",\n    y=\"errors per error\",\n    color=\"error\",\n    title = \"Teefs\",\n    subtitle=\"ERROR codes COLLECTED infinity gauntlet style I am Thanos but better (or WORSE?????)\",\n  )+\n  theme_cowplot()+\n  scale_fill_manual(values=custom_colors)+\n  theme(\n    axis.text.x=element_text(color=\"pink4\",size = 18),\n    axis.text.y=element_text(color=\"purple4\",size=9),\n    panel.background = element_rect(fill=\"magenta\")\n  )\n\n\n\n\n\n\n\nPlot 19\n\n\nCode\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(here)\nlibrary(ggplot2)\nlibrary(tidyquant)\nlibrary(cowplot)\nlibrary(dplyr)\n\noptions(\"getSymbols.warning4.0\"=FALSE)\noptions(\"getSymbols.yahoo.warning\"=FALSE)\n\ntickers = c(\"BBBYQ\", \"GME\")\n\nprices &lt;- tq_get(tickers,\n                 from = \"2017-01-01\",\n                 to = \"2017-12-31\",\n                 get = \"stock.prices\")\n\nmeme_stocks &lt;- prices %&gt;%\n  group_by(symbol)\n\np2 &lt;- meme_stocks %&gt;%\n  ggplot(aes(x = date, y = adjusted, color = symbol)) +\n  geom_line(linewidth = 2) +\n  geom_point(shape=23, fill=\"blue\", color=\"yellow\", size=3) +\n  geom_smooth() +\n  geom_polygon() +\n  facet_grid(symbol ~ ., scales = \"free_y\") +\n  theme_cowplot(font_size = 20) +\n  labs(x = 'Date',\n       y = \"Adjusted Price\",\n       title = \"Before the Meme Stocks Era: Gamestop (GME) and Bed, Bath & Beyond (BBBYQ)\",\n       caption = \"Data Source from CodingFinance\") +\n  scale_x_date(date_breaks = \"month\",\n               date_labels = \"%b\\n%y\") +\n  theme(axis.text.x = element_text(face = \"bold\", color = \"#993333\", \n                           size = 12, angle = 45), plot.caption = element_text(color = \"red\", face = \"italic\", size = 15)) +\n  xlab(\"\\nDate\") + ylab(\"Adjusted Price\\n\")\n   #+\n  #geom_density(alpha = 0.5) #+\n  #transition_reveal(date, keep_last = TRUE) +\n  #view_follow(fixed_y=T)\n\nx &lt;- ggdraw() +\n  draw_image(\"https://i.kym-cdn.com/entries/icons/facebook/000/033/559/cover1.jpg\") +\n  draw_plot(p2) +\n  theme(rect = element_rect(fill = \"transparent\"))\nx\n\n\n\n\n\nPlot 20\n\n\nCode\nstorms1 &lt;- drop_na(storms)\nstorms2 &lt;- sample_n(storms1,100)\n\nstorms3 &lt;- ggplot(\n  storms2, \n  aes(\n    x = pressure,\n    y = wind,\n)\n) +\n  geom_point(\n    aes(\n       fill = pressure,\n      size = category\n      ),\n    alpha = 0.8,\n    shape = 25,\n    color = \"green\"\n  ) + coord_flip()+\n  theme_cowplot()+\n  labs(y =\"Wind speed\",\n       x =\" # Waffle Homes open\",\n       title = \"Is wafflehouse open?\")+\n  geom_jitter(\n    color = \"pink\",\n    shape = 17\n  )+ \n  theme(plot.background = element_rect(fill = \"magenta\")) +\n  theme(plot.title = element_text(color = \"orange\"))\n\nstorms3 + geom_line()\n\n\n\n\n\n\n\nPlot 21\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(cowplot)\n\npenguins_clean &lt;- drop_na(penguins)\n\npenguin_subset1 &lt;- penguins_clean |&gt;\n  sample_n(size = 40)\n\npenguin_subset2 &lt;- penguins_clean |&gt;\n  sample_n(size = 40)\n\npenguin_subset3 &lt;- penguins_clean |&gt;\n  sample_n(size = 40)\n\npenguin_subset4 &lt;- penguins_clean |&gt;\n  sample_n(size = 40)\n\nggplot(\n  penguins_clean,\n  aes(\n    x = body_mass_g,\n    y = species\n  )\n) +\n  geom_jitter(alpha=0.2)+\n  geom_jitter(\n    data = penguin_subset1,\n    color = \"black\",\n    aes(\n      show.legend = \"confused by the concept of weight\"\n    )\n  )+\n  geom_jitter(\n    data = penguin_subset2,\n    color = \"red\"\n  )+\n  geom_jitter(\n    data = penguin_subset3,\n    color = \"green\"\n  )+\n  geom_jitter(\n    data = penguin_subset4,\n    color = \"blue\"\n  )+\n    labs(\n      x = \"Fatness\",\n      y = \"\",\n      title = \"Name the Fattest Penguin\",\n      caption = \"be nice.\"\n    ) +\n  theme_bw()+\n  theme(\n    plot.caption = element_text(face = \"bold\", color = \"black\", size = 25),\n    plot.background = element_rect(fill = \"white\"),\n    legend.position = \"right\",\n    legend\n  )\n\n\n\n\n\nPlot 22\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(cowplot)\n\npenguins_clean &lt;- drop_na(penguins)\n\nggplot(\n  penguins_clean,\n  aes(\n    x = body_mass_g / 1000,\n    y = bill_length_mm)\n  )  +\n  geom_point(alpha = 1, shape = 21, colour = \"pink\", fill = \"orange\", size = 5, stroke = 5)"
  },
  {
    "objectID": "problem-sets/ps-09.html",
    "href": "problem-sets/ps-09.html",
    "title": "R Bootcamp Problem Set 9",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 5pm on Sept 11."
  },
  {
    "objectID": "problem-sets/ps-09.html#problem-set",
    "href": "problem-sets/ps-09.html#problem-set",
    "title": "R Bootcamp Problem Set 9",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 5pm on Sept 11."
  },
  {
    "objectID": "problem-sets/ps-09.html#libraries",
    "href": "problem-sets/ps-09.html#libraries",
    "title": "R Bootcamp Problem Set 9",
    "section": "Libraries",
    "text": "Libraries\nLoad the libraries you need for analysis below.\nLoad the data\nLoad the data sets and inspect.\nTidy the data (4 points)\nGiven the experimental setup and the shape of the tibbles, you should be able to answer: Are these data tidy?\n\nWhat are the variables in the data?\n\n\nAnswer\n\n\nAre the variables the column names?\n\n\nAnswer\n\nThe names are encoded in the following order:\ngt, time, gene, rep_tech, rep_bio."
  },
  {
    "objectID": "problem-sets/ps-09.html#question-1-4-points",
    "href": "problem-sets/ps-09.html#question-1-4-points",
    "title": "R Bootcamp Problem Set 9",
    "section": "Question 1 (4 points)",
    "text": "Question 1 (4 points)\nCalculate summary statistics for the experiment.\n\nCalculate the mean of the technical replicates within each group of genotype, time, gene, and biological replicate.\nCalculate the mean and standard deviation of the biolgical replicates (which is the mean of technical replicates, above).\n\nYou should have a tibble that looks like this:\n# A tibble: 36 × 5\n   gt         time gene     bio_mean bio_sd\n   &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n 1 RL-mutant     0 GAPDH       0.444 0.0759\n 2 RL-mutant     0 IFN-beta    3.32  0.188 \n 3 RL-mutant     4 GAPDH       1.61  0.487 \n 4 RL-mutant     4 IFN-beta   18.4   1.15  \n 5 RL-mutant     8 GAPDH       3.25  1.06  \n 6 RL-mutant     8 IFN-beta   32.2   1.82  \n 7 RL-mutant    12 GAPDH       3.90  0.911 \n 8 RL-mutant    12 IFN-beta   47.5   3.78  \n 9 RL-mutant    24 GAPDH       7.93  3.41  \n10 RL-mutant    24 IFN-beta   76.7   4.75  \n# ℹ 26 more rows\n# ℹ Use `print(n = ...)` to see more rows"
  },
  {
    "objectID": "problem-sets/ps-09.html#question-2-4-points",
    "href": "problem-sets/ps-09.html#question-2-4-points",
    "title": "R Bootcamp Problem Set 9",
    "section": "Question 2 (4 points)",
    "text": "Question 2 (4 points)\n\nCreate a plot of expression by time from the data, using the mean of the biological replicates as the y value.\nColor the plot by genes.\nUse ggplot2::geom_pointrange() do represent the standard deviation of the data. Alternatively, use ggplot2::geom_errobar() with geom_point().\nDraw a line through the points with geom_line().\nFacet the plot by genotype.\nChange the colors of the of the plot with a scale function.\nUpdate the labels on the plot (“time (hours)”, etc.)."
  },
  {
    "objectID": "problem-sets/ps-09.html#question-3-4-points",
    "href": "problem-sets/ps-09.html#question-3-4-points",
    "title": "R Bootcamp Problem Set 9",
    "section": "Question 3 (4 points)",
    "text": "Question 3 (4 points)\n\nWhat can you say about the expression of GAPDH and IFN in the different cell types?\n\n\nAnswer.\n\n\nCan you come up with a simple molecular mechanism to explain the results?\n\n\nAnswer."
  },
  {
    "objectID": "problem-sets/ps-09.html#question-4-4-points",
    "href": "problem-sets/ps-09.html#question-4-4-points",
    "title": "R Bootcamp Problem Set 9",
    "section": "Question 4 (4 points)",
    "text": "Question 4 (4 points)\nReformat the data from Question 2 such that you calculate a ratio of IFN to GAPDH. Start with the data Question 1.2, above.\nRe-plot the data as in Question 2, but leave out the color as you have collapsed the two genes into one value."
  },
  {
    "objectID": "problem-sets/ps-09.html#question-5-4-points",
    "href": "problem-sets/ps-09.html#question-5-4-points",
    "title": "R Bootcamp Problem Set 9",
    "section": "Question 5 (4 points)",
    "text": "Question 5 (4 points)\nIs there more spread across the technical replicates, or across the biological replicates (across the whole experiment)?\nTo get at this question, calculate the standard deviations across the two sets of replicates separately. Which one has a greater spread (max - min)? And what might this mean?\n\nAnswer."
  },
  {
    "objectID": "problem-sets/ps-09.html#grading-rubric",
    "href": "problem-sets/ps-09.html#grading-rubric",
    "title": "R Bootcamp Problem Set 9",
    "section": "Grading rubric",
    "text": "Grading rubric\n\nEverything is good: full points\nPartially correct answer: depends on how many steps are correct\nReasonable attempt: half points"
  },
  {
    "objectID": "problem-sets/ps-09.html#submit",
    "href": "problem-sets/ps-09.html#submit",
    "title": "R Bootcamp Problem Set 9",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "problem-sets/ps-05.html",
    "href": "problem-sets/ps-05.html",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "",
    "text": "Your objective is to create some new extreme art using R, something either ugly or sublime. What you cannot do is be boring; your goal is to stay on the fringe.\nYour submission (a quarto/Rmarkdown file) is due Tues Sept 5 by 12pm. If you submit an entry, you’ll get full credit on the problem set. Entries will be anonymized and winners will selected by popular vote."
  },
  {
    "objectID": "problem-sets/ps-05.html#extreme-art-objective",
    "href": "problem-sets/ps-05.html#extreme-art-objective",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "",
    "text": "Your objective is to create some new extreme art using R, something either ugly or sublime. What you cannot do is be boring; your goal is to stay on the fringe.\nYour submission (a quarto/Rmarkdown file) is due Tues Sept 5 by 12pm. If you submit an entry, you’ll get full credit on the problem set. Entries will be anonymized and winners will selected by popular vote."
  },
  {
    "objectID": "problem-sets/ps-05.html#favorite-rtists",
    "href": "problem-sets/ps-05.html#favorite-rtists",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "Favorite Rtists",
    "text": "Favorite Rtists\nHere are some of my favorite generative artists who use R. Be inspired!\n\nDanielle Navarro [Art] [Github]\n\nIjeamaka Anyene [Github] and this study in particular.\nClaus Wilke [Art] [Github], a biologist at UT Austin who also wrote the book on data visualization (it’s excellent).\nThomas Lin Pederesen [Art] [Github]. I have some of his pieces in my office.\ninconvergent [Art]. It’s lisp, not R. But it’s so good.\n\nThere are several resources for color palettes, an important component of any hideous or beautiful creation.\n\nThe section in Data Viz for R on color is worth a read.\nThe colors in e.g. scale_color_brewer come from Cynthia Brewer, a cartographer who makes visually informative maps.\n\ncolor-hex has collections of complementary color palettes.\n\nThere are also several R packages that may help you build Rtistic plots.\n\n\ngganimate provides tools to bring your plots to life.\n\nggforce provides interesting geoms that build on ggplot2.\n\npatchwork provides layout functions for plots."
  },
  {
    "objectID": "problem-sets/ps-05.html#informative-but-boring.",
    "href": "problem-sets/ps-05.html#informative-but-boring.",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "Informative, but boring.",
    "text": "Informative, but boring.\nThis is an informative but relatively boring plot. NOT THE GOAL HERE.\n\nCodelibrary(tidyverse)\nlibrary(palmerpenguins)\nlibrary(cowplot)\n\npenguins_clean &lt;- drop_na(penguins)\n\nggplot(\n  penguins_clean,\n  aes(\n    x = body_mass_g / 1000,\n    y = bill_length_mm\n  )\n) +\n  geom_point(\n    aes(\n      shape = sex,\n      color = species\n    )\n  ) +\n  facet_grid(~island) +\n  theme_minimal_grid() +\n  scale_color_brewer(palette = \"Dark2\") +\n  labs(\n    title = \"Analysis of geographic isolation on penguin phenotypes\",\n    x = \"Body mass (kg)\",\n    y = \"Bill length (mm)\"\n  )"
  },
  {
    "objectID": "problem-sets/ps-05.html#ugly-plots",
    "href": "problem-sets/ps-05.html#ugly-plots",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "Ugly Plots",
    "text": "Ugly Plots\nYikes. We can thank Yunus Ozekin for this abomination.\n\nCodelibrary(tidyverse)\ntitanic_tbl &lt;- as_tibble(Titanic)\n\nggplot(\n  titanic_tbl,\n  aes(\n    x = Survived,\n    y = n,\n    color = Class,\n    shape = Sex,\n    size = 6\n  )\n) +\n  geom_jitter() +\n  scale_y_sqrt() +\n  labs(\n    x = \"Not Dead?\",\n    y = \"How many? (ppl)\",\n    title = \"WhO dIEd In titaNic?\",\n    caption = \"Some lived, some died.\"\n  ) +\n  scale_x_discrete(position = \"top\") +\n  theme(\n    axis.text.x = element_text(face = \"bold.italic\", color = \"#993333\", size = 18, angle = 180),\n    axis.text.y = element_text(face = \"bold\", color = \"orange\", size = 18, angle = 135),\n    plot.background = element_rect(fill = \"darkblue\"),\n    plot.title = element_text(face = \"italic\", color = \"green\", size = 48, angle = 183),\n    plot.caption = element_text(color = \"white\", size = 22),\n    axis.title.x = element_text(size = 22, color = \"pink\", angle = 12),\n    axis.title.y = element_text(color = \"yellow\", angle = 273, size = 17),\n    legend.background = element_rect(fill = \"yellow\"),\n    legend.title = element_text(angle = 71, face = \"bold\", color = \"purple\", size = 12),\n    legend.key = element_rect(color = \"green\", fill = \"orange\"),\n    legend.text = element_text(color = \"red\", size = 14),\n    panel.background = element_rect(fill = \"yellow\"),\n    panel.grid.major.y = element_line(color = \"green\", linetype = \"dotdash\", linewidth = 1.2),\n    panel.grid.major.x = element_line(color = \"purple\", linewidth = 3, linetype = \"twodash\"),\n    panel.grid.minor = element_line(color = \"red\", linewidth = 2, linetype = \"dashed\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nKate Segar’s submission also won. I’m not sure I’d call this winning, though.\n\nCodelibrary(tidyverse)\nlibrary(here)\n\nufo_sighting_data &lt;- read_csv(\n  here(\"data/ufo_sighting_data.csv.gz\"),\n  show_col_types = FALSE\n)\n\nggplot(\n  ufo_sighting_data,\n  aes(\n    y = UFO_shape,\n    x = length_of_encounter_seconds\n  )\n) +\n  geom_jitter(\n    color = \"yellow\",\n    shape = 11\n  ) +\n  theme(axis.title.x = element_text(family = \"mono\", color = \"lightblue\", face = \"bold\", size = 43)) +\n  theme(axis.title.y = element_text(family = \"mono\", color = \"lightblue\", face = \"bold\", size = 43)) +\n  theme(axis.text.x = element_text(family = \"mono\", color = \"yellow\", face = \"bold\", angle = 90)) +\n  theme(axis.text.y = element_text(family = \"mono\", color = \"yellow\", face = \"bold\", angle = 120, size = 6)) +\n  theme(plot.title = element_text(family = \"serif\", color = \"magenta\", hjust = 0.75, angle = 15, line = -2)) +\n  theme(plot.subtitle = element_text(family = \"serif\", color = \"magenta\", angle = 180)) +\n  theme(plot.background = element_rect(fill = \"green\")) +\n  theme(panel.background = element_rect(fill = \"green\")) +\n  theme(panel.grid.major = element_line(linewidth = 1, color = \"blue\")) +\n  theme(panel.grid.minor = element_line(linewidth = 4, color = \"blue\")) +\n  scale_x_continuous(labels = scales::comma) +\n  labs(\n    title = \"ufosightingswhatshapearethey??\",\n    subtitle = \"do_aliens_work_weekdays??     shedunno\",\n    y = \"shappes_o_UF0\",\n    x = \"howlongaliens_say_hi?\"\n  )"
  },
  {
    "objectID": "problem-sets/ps-05.html#beautiful-plots",
    "href": "problem-sets/ps-05.html#beautiful-plots",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "Beautiful Plots",
    "text": "Beautiful Plots\nThis is a piece from Ijeamaka Anyene’s ode to coord_polar() (link above). Reminds me of Miro.\n\nCodelibrary(tidyverse)\n\napply_pattern_theme &lt;- function(bg_hex, caption_hex) {\n  theme(\n    plot.background = element_rect(fill = bg_hex),\n    panel.background = element_rect(fill = bg_hex),\n    panel.grid = element_blank(),\n    plot.caption = element_text(\n      family = \"Open Sans\",\n      size = 6,\n      color = caption_hex\n    ),\n    legend.position = \"none\",\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank()\n  )\n}\n\noutline &lt;- tibble(\n  x = 1, xend = 7,\n  y = 15, yend = 15\n)\nsegment_line &lt;- tibble(\n  x = c(1, 7), xend = c(1, 7),\n  y = c(0, 2), yend = 15\n)\narea &lt;- tibble(\n  x = c(3, 5, 6),\n  y = c(5, 7.5, 2),\n  type = LETTERS[1:3]\n)\npalette_values &lt;- c(\"#2a2640\", \"#a64e46\", \"#f29544\")\nggplot() +\n  geom_col(\n    data = area,\n    aes(x = x, y = y, fill = type),\n    alpha = 0.75,\n    width = 4\n  ) +\n  geom_segment(\n    data = outline,\n    aes(\n      x = x, y = y,\n      xend = xend, yend = yend\n    ),\n    size = 0.5\n  ) +\n  geom_segment(\n    data = segment_line,\n    aes(\n      x = x, xend = xend,\n      y = y, yend = yend\n    ),\n    size = 0.5\n  ) +\n  geom_point(aes(x = 5, y = 0)) +\n  scale_fill_manual(values = palette_values) +\n  scale_y_continuous(limits = c(0, 15)) +\n  scale_x_continuous(limits = c(1, 10)) +\n  coord_polar() +\n  labs(caption = \"Ijeamaka Anyene | @ijeamaka_a\") +\n  apply_pattern_theme(\n    bg_hex = \"#ded5c9\",\n    caption_hex = \"black\"\n  )\n\n\n\n\nHere’s another more complex geometric creation, again using coord_polar(). This will take a few seconds to render.\n\nCode# https://twitter.com/aschinchon/status/1095057262744387587\nlibrary(tidyverse)\n\nseq(-2, 2, by = .005) %&gt;%\n  expand.grid(x = ., y = .) %&gt;%\n  ggplot(\n    aes(\n      x = (cos(x)^2 + sin(y^2)),\n      y = (sin(y)^3 - cos(x^2))\n    )\n  ) +\n  geom_point(alpha = .01, shape = 20, size = 0) +\n  theme_void() +\n  coord_polar()"
  },
  {
    "objectID": "problem-sets/ps-03.html",
    "href": "problem-sets/ps-03.html",
    "title": "R Bootcamp Problem Set 3",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package."
  },
  {
    "objectID": "problem-sets/ps-03.html#setup",
    "href": "problem-sets/ps-03.html#setup",
    "title": "R Bootcamp Problem Set 3",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package."
  },
  {
    "objectID": "problem-sets/ps-03.html#problem-set",
    "href": "problem-sets/ps-03.html#problem-set",
    "title": "R Bootcamp Problem Set 3",
    "section": "Problem Set",
    "text": "Problem Set\nEach problem below is worth 5 points.\nUse the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Aug 31.\nGrading rubric\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-sets/ps-03.html#question-1",
    "href": "problem-sets/ps-03.html#question-1",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 1",
    "text": "Question 1\nLoad the palmerpenguins package. Inspect the penguins tibble with summary.\nUse drop_na() to remove rows with NA values in the penguins tibble. How many rows were removed from the tibble?\nThen, use replace_na() to replace NA values in bill_length_mm and bill_depth_mm with a value of 0."
  },
  {
    "objectID": "problem-sets/ps-03.html#question-2",
    "href": "problem-sets/ps-03.html#question-2",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 2",
    "text": "Question 2\nUse arrange, filter, and select on a dataframe. Do the following, in order:\n\nImport the data set data/data_transcript_exp_tidy.csv.\nSort the tibble by expression data (count) from highest to lowest level.\nFilter the tibble by count &gt; 100\nSelect all columns except for type"
  },
  {
    "objectID": "problem-sets/ps-03.html#question-3",
    "href": "problem-sets/ps-03.html#question-3",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 3",
    "text": "Question 3\nHow will you:\n\ncreate a new column log10count that contains log10 transformed count values and\nrearrange the columns in the following order: ensembl_transcript_id, type, time, replicate, count, log10count.\n\n(Note that we have dropped extra)\nHint: Use mutate and select"
  },
  {
    "objectID": "problem-sets/ps-03.html#question-4",
    "href": "problem-sets/ps-03.html#question-4",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 4",
    "text": "Question 4\nCalculate a per-transcript sum, while keeping the time information?\nHint: Use group_by with multiple variables, and summarise the “count” values using sum()"
  },
  {
    "objectID": "problem-sets/ps-01.html",
    "href": "problem-sets/ps-01.html",
    "title": "R Bootcamp Problem Set 1",
    "section": "",
    "text": "Each problem below is worth 10 points.\nThe problem set is due 12pm on Aug 30.\n\n\nEverything is good: 10 points\nPartially correct answers: 6-8 points\nReasonable attempt: 4 points"
  },
  {
    "objectID": "problem-sets/ps-01.html#problem-set",
    "href": "problem-sets/ps-01.html#problem-set",
    "title": "R Bootcamp Problem Set 1",
    "section": "",
    "text": "Each problem below is worth 10 points.\nThe problem set is due 12pm on Aug 30.\n\n\nEverything is good: 10 points\nPartially correct answers: 6-8 points\nReasonable attempt: 4 points"
  },
  {
    "objectID": "problem-sets/ps-01.html#setup",
    "href": "problem-sets/ps-01.html#setup",
    "title": "R Bootcamp Problem Set 1",
    "section": "Setup",
    "text": "Setup\nStart by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package."
  },
  {
    "objectID": "problem-sets/ps-01.html#question-1",
    "href": "problem-sets/ps-01.html#question-1",
    "title": "R Bootcamp Problem Set 1",
    "section": "Question 1",
    "text": "Question 1\nCreate 3 different vectors called x, y, and z:\n\n\nx should be character vector of length 5\n\ny should be a numerica vector of length 5\n\nz should be a logical vector of length 5\n\nUse length() to calculate the length of each vector."
  },
  {
    "objectID": "problem-sets/ps-01.html#question-2",
    "href": "problem-sets/ps-01.html#question-2",
    "title": "R Bootcamp Problem Set 1",
    "section": "Question 2",
    "text": "Question 2\nUsing the vectors you created above, create a new tibble with column names x, y, and z.\nUse nrow() and ncol() to calculate the number of rows and columns.\nWhat do you notice about the length of the vectors and the number of rows?\nAnswer here"
  },
  {
    "objectID": "problem-sets/ps-01.html#submit",
    "href": "problem-sets/ps-01.html#submit",
    "title": "R Bootcamp Problem Set 1",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "problem-set-keys/ps-key-05.html",
    "href": "problem-set-keys/ps-key-05.html",
    "title": "R Bootcamp - Problem Set 5 (Extreme aRt)",
    "section": "",
    "text": "🐧❤️🍕\n\nCodelibrary(tidyverse)\nlibrary(emo)\nlibrary(here)\nlibrary(gganimate)\nlibrary(palmerpenguins)\nlibrary(ragg)\n\nanim &lt;- penguins |&gt;\n  drop_na() |&gt;\n  mutate(\n    emoji = case_when(\n      sex == \"female\" ~ emo::ji(\"pizza\"),\n      sex == \"male\" ~ emo::ji(\"penguin\")\n    )\n  ) |&gt;\n  rowwise() |&gt;\n  mutate(angle = sample(0:360, size = 1)) |&gt;\n  ungroup() |&gt;\n  ggplot(\n    aes(\n      x = body_mass_g,\n      y = flipper_length_mm\n    )\n  ) +\n  geom_text(\n    aes(\n      label = emoji,\n      angle = angle\n    ),\n    size = 13,\n  ) +\n  coord_trans(x = \"log\", y = \"log\") +\n  labs(\n    title = paste0(\n      \"PENGUIN\", emo::ji(\"penguin\"),\n      \"PIZZA\", emo::ji(\"pizza\"),\n      \"PARTY\", emo::ji(\"party\"),\n      collapse = \"\"\n    ),\n    x = paste0(emo::ji(\"island\"), \"maybe latitude or longitude\", collapse = \"  \"),\n    y = paste0(emo::ji(\"sun\"), \"temperature (K)\", collapse = \"  \")\n  ) +\n  theme(\n    legend.position = \"none\",\n    axis.text = element_text(angle = 180),\n    plot.title = element_text(hjust = 0.5, size = 30),\n    axis.title = element_text(size = 30),\n    axis.text.x = element_text(size = 2),\n    axis.text.y = element_text(size = 2),\n    plot.background = element_rect(fill = \"#ffcc5c\"),\n    panel.background = element_rect(fill = \"#ffeead\"),\n    panel.grid.major = element_line(color = \"#ff6f69\"),\n    panel.grid.minor = element_line(color = \"#96ceb4\")\n  ) +\n  transition_states(\n    transition_length = 1,\n    state_length = 0.001,\n    year\n  ) +\n  enter_grow() +\n  exit_shrink() +\n  view_follow()\n\np &lt;- animate(anim, device = \"ragg_png\")\nanim_save(here(\"img/ugly_plot.gif\"), p)"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html",
    "href": "problem-set-keys/ps-key-03.html",
    "title": "R Bootcamp Problem Set 3",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package.\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#setup",
    "href": "problem-set-keys/ps-key-03.html#setup",
    "title": "R Bootcamp Problem Set 3",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package.\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#problem-set",
    "href": "problem-set-keys/ps-key-03.html#problem-set",
    "title": "R Bootcamp Problem Set 3",
    "section": "Problem Set",
    "text": "Problem Set\nEach problem below is worth 5 points.\nUse the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Aug 31.\nGrading rubric\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#question-1",
    "href": "problem-set-keys/ps-key-03.html#question-1",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 1",
    "text": "Question 1\nLoad the palmerpenguins package. Inspect the penguins tibble with summary.\nUse drop_na() to remove rows with NA values in the penguins tibble. How many rows were removed from the tibble?\n\nlibrary(palmerpenguins)\n\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\npenguins_nona &lt;- drop_na(penguins)\nnrow(penguins) - nrow(penguins_nona)\n\n[1] 11\n\n\nThen, use replace_na() to replace NA values in bill_length_mm and bill_depth_mm with a value of 0.\n\nreplace_na(penguins, list(bill_length_mm = 0, bill_depth_mm = 0))\n\n# A tibble: 344 x 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen            0             0                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# i 334 more rows\n# i 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#question-2",
    "href": "problem-set-keys/ps-key-03.html#question-2",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 2",
    "text": "Question 2\nUse arrange, filter, and select on a data frame. Do the following, in order:\n\nImport the data set data/data_transcript_exp_tidy.csv.\nSort the tibble by expression data (count) from highest to lowest level.\nFilter the tibble by count &gt; 100\nSelect all columns except for type\n\n\n\nexp_tbl &lt;- read_csv(here(\"data/data_transcript_exp_tidy.csv.gz\"))\n\nRows: 600 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (4): ensembl_transcript_id, type, time, replicate\ndbl (1): count\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nexp_tbl |&gt;\n  arrange(count) |&gt;\n  filter(count &gt; 100) |&gt;\n  select(-type)\n\n# A tibble: 109 x 4\n   ensembl_transcript_id      time  replicate count\n   &lt;chr&gt;                      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1 ENST00000342753.8_291_1314 0h    rep2       101 \n 2 ENST00000378251.2_29_1778  0h    rep3       102 \n 3 ENST00000378230.7_524_3101 0h    rep3       105 \n 4 ENST00000054666.10_116_416 14h   rep3       105 \n 5 ENST00000344843.11_97_544  14h   rep1       106 \n 6 ENST00000400809.7_379_1567 14h   rep3       106.\n 7 ENST00000054666.10_116_416 14h   rep1       108 \n 8 ENST00000615252.4_548_1268 14h   rep3       108.\n 9 ENST00000445648.5_40_1390  0h    rep1       109.\n10 ENST00000291386.3_370_895  14h   rep2       109 \n# i 99 more rows"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#question-3",
    "href": "problem-set-keys/ps-key-03.html#question-3",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 3",
    "text": "Question 3\nHow will you:\n\ncreate a new column log10count that contains log10 transformed count values and\nrearrange the columns in the following order: ensembl_transcript_id, type, time, replicate, count, log10count.\n\n(Note that we have dropped extra)\nHint: Use mutate and select\n\nexp_tbl |&gt;\n  mutate(log10count = log10(count)) |&gt;\n  select(ensembl_transcript_id, type, time, replicate, count, log10count)\n\n# A tibble: 600 x 6\n   ensembl_transcript_id      type  time  replicate count log10count\n   &lt;chr&gt;                      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 ENST00000327044.6_51_2298  rna   0h    rep1        243      2.39 \n 2 ENST00000327044.6_51_2298  rna   0h    rep2        322      2.51 \n 3 ENST00000327044.6_51_2298  rna   0h    rep3        303      2.48 \n 4 ENST00000327044.6_51_2298  rna   14h   rep1        177      2.25 \n 5 ENST00000327044.6_51_2298  rna   14h   rep2        177      2.25 \n 6 ENST00000327044.6_51_2298  rna   14h   rep3        239      2.38 \n 7 ENST00000338591.7_360_2034 rna   0h    rep1         19      1.28 \n 8 ENST00000338591.7_360_2034 rna   0h    rep2         17      1.23 \n 9 ENST00000338591.7_360_2034 rna   0h    rep3         15      1.18 \n10 ENST00000338591.7_360_2034 rna   14h   rep1          9      0.954\n# i 590 more rows"
  },
  {
    "objectID": "problem-set-keys/ps-key-03.html#question-4",
    "href": "problem-set-keys/ps-key-03.html#question-4",
    "title": "R Bootcamp Problem Set 3",
    "section": "Question 4",
    "text": "Question 4\nCalculate a per-transcript sum, while keeping the time information?\nHint: Use group_by with multiple variables, and summarise the “count” values using sum()\n\nexp_tbl |&gt;\n  group_by(ensembl_transcript_id, time) |&gt;\n  summarize(count_sum = sum(count))\n\n`summarise()` has grouped output by 'ensembl_transcript_id'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 200 x 3\n# Groups:   ensembl_transcript_id [100]\n   ensembl_transcript_id        time  count_sum\n   &lt;chr&gt;                        &lt;chr&gt;     &lt;dbl&gt;\n 1 ENST00000054650.8_159_876    0h         33.8\n 2 ENST00000054650.8_159_876    14h        16.5\n 3 ENST00000054666.10_116_416   0h        447  \n 4 ENST00000054666.10_116_416   14h       281  \n 5 ENST00000054668.5_220_418    0h          0  \n 6 ENST00000054668.5_220_418    14h        22.5\n 7 ENST00000234590.8_121_1423   0h      31565  \n 8 ENST00000234590.8_121_1423   14h     16394  \n 9 ENST00000263741.11_1328_1496 0h         97.5\n10 ENST00000263741.11_1328_1496 14h        79  \n# i 190 more rows"
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html",
    "href": "problem-set-keys/ps-key-01.html",
    "title": "Problem Set 1 Key",
    "section": "",
    "text": "Each problem below is worth 10 points.\nThe problem set is due 12pm on Aug 30.\n\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html#problem-set",
    "href": "problem-set-keys/ps-key-01.html#problem-set",
    "title": "Problem Set 1 Key",
    "section": "",
    "text": "Each problem below is worth 10 points.\nThe problem set is due 12pm on Aug 30.\n\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html#setup",
    "href": "problem-set-keys/ps-key-01.html#setup",
    "title": "Problem Set 1 Key",
    "section": "Setup",
    "text": "Setup\nStart by loading libraries you need analysis below. When in doubt, start by loading the tidyverse package.\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html#question-1",
    "href": "problem-set-keys/ps-key-01.html#question-1",
    "title": "Problem Set 1 Key",
    "section": "Question 1",
    "text": "Question 1\nCreate 3 different vectors called x, y, and z:\n\n\nx should be character vector of length 5\n\ny should be a numerica vector of length 5\n\nz should be a logical vector of length 5\n\nUse length() to calculate the length of each vector.\n\nx &lt;- LETTERS[1:5]\ny &lt;- 1:5\nz &lt;- c(TRUE, TRUE, FALSE, FALSE, FALSE)\n\nx\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\"\n\ny\n\n[1] 1 2 3 4 5\n\nz\n\n[1]  TRUE  TRUE FALSE FALSE FALSE\n\nlength(x)\n\n[1] 5\n\nlength(y)\n\n[1] 5\n\nlength(z)\n\n[1] 5"
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html#question-2",
    "href": "problem-set-keys/ps-key-01.html#question-2",
    "title": "Problem Set 1 Key",
    "section": "Question 2",
    "text": "Question 2\nUsing the vectors you created above, create a new tibble with column names x, y, and z.\nUse nrow() and ncol() to calculate the number of rows and columns.\nWhat do you notice about the length of the vectors and the number of rows.\n\ntbl &lt;- tibble(x = x, y = y, z = z)\nnrow(tbl)\n\n[1] 5\n\nncol(tbl)\n\n[1] 3\n\n\nAnswer\nThe length of the vectors and the number of rows are the same, because tibble columns are simply the vectors we started with."
  },
  {
    "objectID": "problem-set-keys/ps-key-01.html#submit",
    "href": "problem-set-keys/ps-key-01.html#submit",
    "title": "Problem Set 1 Key",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problemt set on Canvas."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MOLB 7950: Informatics and Statistics for Molecular Biology",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the semester. Note that this schedule will be updated as the semester progresses, with all changes documented here.\n\n\n\n\n\n\n  \n    \n      MOLB 7950 - Fall 2023 Schedule\n    \n    \n      Classes held in-person in AHSB 2201, 9:00-10:30am\n    \n    \n      \n      Date\n      Block\n      Topic\n      Instructor\n      Title\n      \n        Links\n      \n    \n    \n      Prepare\n      Slides\n      Exercises\n      HW\n      Key\n    \n  \n  \n    \n      Week 1\n    \n    01\nMon, Aug 28, 2023\nBootcamp\nR\nHesselberth\nIntro to R & RStudio\n📖\n📃\n💪\n🧠\n🔑\n    02\nTue, Aug 29, 2023\nBootcamp\nR\nHesselberth\nTidy data & tidyr\n\n📃\n💪\n🧠\n🔑\n    03\nWed, Aug 30, 2023\nBootcamp\nR\nHesselberth\ndplyr\n\n📃\n💪\n🧠\n🔑\n    04\nThu, Aug 31, 2023\nBootcamp\nR\nHesselberth\nggplot2\n\n📃\n💪\n🧠\n🔑\n    05\nFri, Sep 1, 2023\nBootcamp\nR\nHesselberth\nggplot2\n\n📃\n💪\n🧠\n🔑\n    \n      Week 2\n    \n    06\nMon, Sep 4, 2023\n-\n-\n-\nNO CLASS: LABOR DAY\n\n\n\n\n\n    07\nTue, Sep 5, 2023\nBootcamp\nR\nHesselberth\ntidyverse odds & ends\n\n📃\n💪\n🧠\n🔑\n    08\nWed, Sep 6, 2023\nBootcamp\nR\nHesselberth\nputting it all together\n\n\n💪\n\n\n    09\nThu, Sep 7, 2023\nBootcamp\nR\nHesselberth\nputting it all together\n\n\n💪\n🧠\n\n    10\nFri, Sep 8, 2023\nBootcamp\nStatistics\nMukherjee\nStats intro and history\n\n📃\n💪\n\n\n    \n      Week 3\n    \n    11\nMon, Sep 11, 2023\nBootcamp\nStatistics\nMukherjee\nProbability and descriptive stats\n\n\n\n\n\n    12\nTue, Sep 12, 2023\nBootcamp\nStatistics\nMukherjee\nHypothesis testing\n\n\n\n\n\n    13\nWed, Sep 13, 2023\nBootcamp\nStatistics\nMukherjee\nHypothesis testing\n\n\n\n\n\n    14\nThu, Sep 14, 2023\nBootcamp\nStatistics\nMukherjee\nRegression\n\n\n\n\n\n    15\nFri, Sep 15, 2023\nBootcamp\nStatistics\nMukherjee\nBig data concerns\n\n\n\n\n\n    \n      Week 4\n    \n    16\nMon, Sep 18, 2023\nDNA\nDNA-seq Overview\nHesselberth\n-\n\n\n\n\n\n    17\nWed, Sep 20, 2023\nDNA\nChIP-seq\nHesselberth\n-\n\n\n\n\n\n    18\nFri, Sep 22, 2023\nDNA\nChIP-seq\nHesselberth\n-\n\n\n\n\n\n    \n      Week 5\n    \n    19\nMon, Sep 25, 2023\nDNA\nChromatin Accessibility\nHesselberth\n-\n\n\n\n\n\n    20\nWed, Sep 27, 2023\nDNA\nChromatin Accessibility\nHesselberth\n-\n\n\n\n\n\n    21\nFri, Sep 29, 2023\nDNA\nVignette\nHesselberth\n-\n\n\n\n\n\n    \n      Week 6\n    \n    22\nMon, Oct 2, 2023\nRNA\nRNA-seq Overview\nMukherjee\n-\n\n\n\n\n\n    23\nWed, Oct 4, 2023\nRNA\nDifferential Gene Expression\nMukherjee\n-\n\n\n\n\n\n    24\nFri, Oct 6, 2023\nRNA\nDifferential Gene Expression\nMukherjee\n-\n\n\n\n\n\n    \n      Week 7\n    \n    25\nMon, Oct 9, 2023\nRNA\nAlternative Splicing\nMukherjee\n-\n\n\n\n\n\n    26\nWed, Oct 11, 2023\nRNA\nVignette\nMukherjee\n-\n\n\n\n\n\n    27\nFri, Oct 13, 2023\n-\n-\n-\nNO CLASS: CSDV RETREAT\n\n\n\n\n\n    \n      Week 8\n    \n    28\nMon, Oct 16, 2023\nRNA\nRBP\nMukherjee\n-\n\n\n\n\n\n    29\nWed, Oct 18, 2023\nRNA\nRBP\nMukherjee\n-\n\n\n\n\n\n    30\nFri, Oct 20, 2023\nRNA\nLong-read sequencing\nHesselberth\n-\n\n\n\n\n\n    \n      Week 9\n    \n    31\nMon, Oct 23, 2023\nRNA\nSingle-cell\nRiemondy\n-\n\n\n\n\n\n    32\nWed, Oct 25, 2023\nRNA\nSingle-cell\nRiemondy\n-\n\n\n\n\n\n    33\nFri, Oct 27, 2023\n-\n-\n-\nNO CLASS: MOLB RETREAT\n\n\n\n\n\n    \n      Week 10\n    \n    34\nMon, Oct 30, 2023\nFinal\n-\n-\nFinal project presentations\n\n\n\n\n\n    35\nWed, Nov 1, 2023\nFinal\n-\n-\nFinal project presentations"
  },
  {
    "objectID": "exercises/ex-09.html",
    "href": "exercises/ex-09.html",
    "title": "Exercises 9",
    "section": "",
    "text": "A yeast gene expression experiment\nNext, we’ll examine some gene expression data from the budding yeast S. cerevisiae. We’ll roughly follow the analysis strategy taken by David Robinson in his blog Variance Explained.\nThe data come from:\n\nBrauer MJ, Huttenhower C, Airoldi EM, Rosenstein R, Matese JC, Gresham D, Boer VM, Troyanskaya OG, Botstein D. Coordination of growth rate, cell cycle, stress response, and metabolic activity in yeast. Mol Biol Cell. 2008 [Link]\n\nThey used chemostats to control the growth rate of cells under different nutrient-limited conditions.\nIn this experiment, cells were grown in different media limited for (one of) glucose, uracil, leucine, sulfate, phosphate, or ammonia. Over a series of fixed, equilibrium growth rates (established by the dilution rate of fresh media), cells were harvested and gene expression was measured by genome-wide microarrays.\nThis is a well organized experiment (so it’s useuful for teaching / learning), but there’s nothing particularly special about the setup.\n\nWe could be measuring protein or metabolite levels instead of gene expression, or analyzing cell features from images taken of the cells.\nWe might be adding an increasing amount of a drug candidate instead of nutrient deprivation\nWe might be altering the growth density of mammalian cells (by plating) instead of controlling growth rate in a chemostat.\n\nLoad libraries\nLoad libraries you’ll need for the analysis below.\nLoad the data\nA raw version of the gene expression data are in:\n\ndata/brauer_gene_exp_wide.tsv.gz\n\nIn addition, another tibbles contains related information:\n\ndata/yeast_go_terms.tsv.gz\n\nLoad each of the above files and inspect.\n\nbrauer_gene_exp_wide &lt;- ___ \nyeast_go_terms &lt;- ___\n\nTidy the data\nAre these data tidy?\n\nbrauer_gene_exp_tidy &lt;-\n  pivot_longer(\n    data = ___,\n    cols = ___,\n    names_to = \"___\",\n    values_to = \"___\"\n  ) |&gt;\n  separate(\n    ___,\n    into = c(\"___\", \"___\"),\n    sep = 1,\n    convert = TRUE\n  )\n\nNext, we want to update the nutrient abbreviations so they’re easier to remember.\n\nnutrient_abbrs &lt;- tribble(\n  ~ nutrient_abbr, ~ nutrient,\n  \"G\", \"Glucose\",\n  \"L\", \"Leucine\",\n  \"P\", \"Phosphate\",\n  \"S\", \"Sulfate\",\n  \"N\", \"Ammonia\",\n  \"U\", \"Uracil\"\n)\n\n# now, we need to *join* the tibbles\nbrauer_gene_exp_tidy &lt;-\n  left_join(___, ___) |&gt;\n  # drop the nutrient abbreviation \n  select(___)\n\nNext, we want the common gene names, which contain useful information for filtering and grouping. These are in yeast_go_terms, so we need to join.\n\n# need a tibble that maps systematic\n# common names\nname_map &lt;- select(\n  yeast_go_terms,\n  ___, ___ \n)\n\n# we need to *join* again . . .\nbrauer_gene_exp_tidy &lt;-\n  left_join(___, ___) |&gt;\n  # reorganize so that systematic and common names come first\n  select(___)\n\nFinally, we’ll drop all rows with NA expression values, and arrange the tibble.\n\nbrauer_gene_exp_tidy &lt;-\n  # drop rows where `exp` is `NA`\n  drop_na(___, ___) |&gt;\n  # arrange by common name, nutrient, and rate\n  arrange(___) \n\nHeatmap of gene expression values\nHeatmaps are a useful approach to visualize thousands of data points, orgnaized by experimental variables to show patterns in the data.\nWe’ll use the ComplexHeatmap package from Bioconductor, which provides a flexible framework for generating heatmaps.\n\nbrauer_mat_dat &lt;-\n  brauer_gene_exp |&gt;\n  unite(___, ___) |&gt;\n  pivot_wider(\n    names_from = ___,\n    values_from = ___\n  )\n\nbrauer_mat &lt;-\n  # remove name columns, just need the data\n  select(___, ___) |&gt;\n  as.matrix()\n\n# Inspect the matrix above.\n\nComplexHeatmap::Heatmap(___)\n\nExpression of select genes associated with nutrient metabolism\nExamine the genes (common_name) that start with LEU.\n\nleu_genes_tbl &lt;- brauer_gene_exp_tidy |&gt;\n  filter(str_detect(___, \"___\"))\n\nggplot(\n  leu_genes_tbl,\n  aes(\n    x = ___,\n    y = ___,\n    color = ___ \n  )\n) +\n  geom_point() + \n  geom_smooth(method = 'lm', se = FALSE) +\n  facet_wrap(~ ___) +\n  theme_cowplot() +\n  scale_color_brewer(palette = \"Dark2\")\n\nModeling the relationship between gene expression and growth rate\nOne gene\nLet’s look specifically at a linear model of the data for LEU1 under leucine starvation.\n\nleu1_tbl &lt;- leu_genes_tbl |&gt;\n  filter(common_name == \"___\" & nutrient == \"___\")\n\nggplot(leu1_tbl, aes(___, ___)) +\n  geom_point(size = 3) +\n  theme_cowplot()\n\nLet’s take a look at the linear model of these data.\n\nmod &lt;- lm(exp ~ rate, data = leu1_tbl)\nsummary(mod)\n\nThe relevant information (rate, intercept, p.value) for the model is not easily accessed.\nWe can use the broom library to tidy the model information.\n\nlibrary(broom)\nbroom::tidy(mod)\n\nAll genes\nDoing this for one gene is interesting, but really we’d like models for all of the conditions so that we can compare between them to identify interesting patterns.\nThe following code chunk will do the following:\n\nnest data for model fitting into a new column data\n\nfit linear models to the data column using purrr::map()\n\ntidy the linear models using broom::tidy()\n\nunnest the model coefficients\n\n\nlinear_model_tbl &lt;-\n  brauer_gene_exp_tidy |&gt;\n  group_by(systematic_name, common_name, nutrient) |&gt;\n  nest() |&gt;\n  # look at the data up to the `nest()` call\n  mutate(\n    model = purrr::map(\n      data,\n      ~ lm(exp ~ rate, data = .)\n    )\n  ) |&gt;\n  mutate(\n    model_tidy = purrr::map(\n      model,\n      broom::tidy\n    )\n  ) |&gt;\n  select(-model, -data) |&gt;\n  unnest(cols = c(model_tidy))\n\nNote that we now have slope and intercept terms for each group we specified.\n\nthe intercept indicates how highly a gene is expressed when starved of a nutrient.\nthe rate indicates how much a gene’s expression responds to increasing nutrient (i.e., growth rate).\nFurther analysis\nAt this point, you can ask questions like the following:\n\nHow do other groups of metabolic genes respond to nutrient deprivation? Start with the ‘PHO’, ‘URA’, and ‘SUL’ genes. Comment on features that stand out, both within and across nutrient deprivation conditions.\nWhat if you include and group by the GO terms in the yeast_go_terms tibble instead of gene name? I.e., you could detect the string leucine in the biological process and group by those instead of gene name (you’d need to join the tidy tibble with the GO information first).\nAre there other genes that behave like LEU1 under leucine starvation? I.e., a strong negative slope in one condition, and positive slopes in the others?"
  },
  {
    "objectID": "exercises/ex-07.html",
    "href": "exercises/ex-07.html",
    "title": "R Bootcamp - Day 7",
    "section": "",
    "text": "Accessing data in vectors (Exercise)\nother tidyverse packages (stringr & forcats)\ndplyr table joins (Exercise)\nggplot2 scale functions\nggplot2 multi-panel figures (Exercise)\nggplot2 saving figures"
  },
  {
    "objectID": "exercises/ex-07.html#class-7-outline",
    "href": "exercises/ex-07.html#class-7-outline",
    "title": "R Bootcamp - Day 7",
    "section": "",
    "text": "Accessing data in vectors (Exercise)\nother tidyverse packages (stringr & forcats)\ndplyr table joins (Exercise)\nggplot2 scale functions\nggplot2 multi-panel figures (Exercise)\nggplot2 saving figures"
  },
  {
    "objectID": "exercises/ex-07.html#using-and",
    "href": "exercises/ex-07.html#using-and",
    "title": "R Bootcamp - Day 7",
    "section": "Using [, [[, and $\n",
    "text": "Using [, [[, and $\n\n[ can return a range, [[ returns a single value."
  },
  {
    "objectID": "exercises/ex-07.html#vector-selection-with-logic",
    "href": "exercises/ex-07.html#vector-selection-with-logic",
    "title": "R Bootcamp - Day 7",
    "section": "vector selection with logic",
    "text": "vector selection with logic\none-step filtering.\ntwo-step filtering. same result.\nalso can use with is.na() to identify / exclude NA values in a vector.\nUse sum() to figure out how many are TRUE."
  },
  {
    "objectID": "exercises/ex-07.html#string-operations-with-stringr",
    "href": "exercises/ex-07.html#string-operations-with-stringr",
    "title": "R Bootcamp - Day 7",
    "section": "string operations with stringr",
    "text": "string operations with stringr\nstringr provides several useful functions for operating on strings.\nSee the stringr cheatsheet\nstr_c() is similar to paste and paste0 but the behavior is more consistent."
  },
  {
    "objectID": "exercises/ex-07.html#forcats-operations-for-factors",
    "href": "exercises/ex-07.html#forcats-operations-for-factors",
    "title": "R Bootcamp - Day 7",
    "section": "forcats operations for factors",
    "text": "forcats operations for factors\nforcats provides several utilities for working with factors.\nSee the forcats cheatsheet"
  },
  {
    "objectID": "exercises/ex-07.html#use-forcats-to-reorder-aspects-of-plots",
    "href": "exercises/ex-07.html#use-forcats-to-reorder-aspects-of-plots",
    "title": "R Bootcamp - Day 7",
    "section": "Use forcats to reorder aspects of plots",
    "text": "Use forcats to reorder aspects of plots\nSee the FAQ on rordering in ggplot2"
  },
  {
    "objectID": "exercises/ex-07.html#dplyr-cheatsheet",
    "href": "exercises/ex-07.html#dplyr-cheatsheet",
    "title": "R Bootcamp - Day 7",
    "section": "dplyr cheatsheet",
    "text": "dplyr cheatsheet\nLook at “combine variables” and “combine cases” at the top."
  },
  {
    "objectID": "exercises/ex-07.html#tables-for-joining",
    "href": "exercises/ex-07.html#tables-for-joining",
    "title": "R Bootcamp - Day 7",
    "section": "tables for joining",
    "text": "tables for joining"
  },
  {
    "objectID": "exercises/ex-07.html#mutating-joins---visualized",
    "href": "exercises/ex-07.html#mutating-joins---visualized",
    "title": "R Bootcamp - Day 7",
    "section": "mutating joins - visualized",
    "text": "mutating joins - visualized"
  },
  {
    "objectID": "exercises/ex-07.html#joining-tables-by-a-variable---exercise-1",
    "href": "exercises/ex-07.html#joining-tables-by-a-variable---exercise-1",
    "title": "R Bootcamp - Day 7",
    "section": "Joining tables by a variable - Exercise 1",
    "text": "Joining tables by a variable - Exercise 1"
  },
  {
    "objectID": "exercises/ex-07.html#filtering-joins---visualized",
    "href": "exercises/ex-07.html#filtering-joins---visualized",
    "title": "R Bootcamp - Day 7",
    "section": "filtering joins - visualized",
    "text": "filtering joins - visualized"
  },
  {
    "objectID": "exercises/ex-07.html#joining-tables-by-a-variable---exercise-2",
    "href": "exercises/ex-07.html#joining-tables-by-a-variable---exercise-2",
    "title": "R Bootcamp - Day 7",
    "section": "Joining tables by a variable - Exercise 2",
    "text": "Joining tables by a variable - Exercise 2"
  },
  {
    "objectID": "exercises/ex-07.html#other-dplyr-verbs",
    "href": "exercises/ex-07.html#other-dplyr-verbs",
    "title": "R Bootcamp - Day 7",
    "section": "Other dplyr verbs",
    "text": "Other dplyr verbs\nThere are many other dplyr verbs.\n\nWe’ve used rename, count, add_row, add_column, distinct, sample_n, sample_frac, slice, pull\n\n\nCheck out the dplyr cheatsheet to learn more!"
  },
  {
    "objectID": "exercises/ex-07.html#scale-functions-in-ggplot2",
    "href": "exercises/ex-07.html#scale-functions-in-ggplot2",
    "title": "R Bootcamp - Day 7",
    "section": "scale functions in ggplot2",
    "text": "scale functions in ggplot2\n\n\nscale_color_brewer() and scale_fill_brewer() control color and fill aesthetics.\nSee available ggplot2 brewer palettes"
  },
  {
    "objectID": "exercises/ex-07.html#scale-functions-in-ggplot2-1",
    "href": "exercises/ex-07.html#scale-functions-in-ggplot2-1",
    "title": "R Bootcamp - Day 7",
    "section": "scale functions in ggplot2",
    "text": "scale functions in ggplot2"
  },
  {
    "objectID": "exercises/ex-07.html#set-up-a-points-plot",
    "href": "exercises/ex-07.html#set-up-a-points-plot",
    "title": "R Bootcamp - Day 7",
    "section": "Set up a points plot",
    "text": "Set up a points plot"
  },
  {
    "objectID": "exercises/ex-07.html#how-to-combine-multiple-plots-into-a-figure",
    "href": "exercises/ex-07.html#how-to-combine-multiple-plots-into-a-figure",
    "title": "R Bootcamp - Day 7",
    "section": "How to combine multiple plots into a figure?",
    "text": "How to combine multiple plots into a figure?"
  },
  {
    "objectID": "exercises/ex-07.html#we-have-4-legends---can-they-be-condensed",
    "href": "exercises/ex-07.html#we-have-4-legends---can-they-be-condensed",
    "title": "R Bootcamp - Day 7",
    "section": "We have 4 legends - can they be condensed?",
    "text": "We have 4 legends - can they be condensed?\nYes, but it is not exactly straightforward."
  },
  {
    "objectID": "exercises/ex-07.html#saving-plots-exercise-18",
    "href": "exercises/ex-07.html#saving-plots-exercise-18",
    "title": "R Bootcamp - Day 7",
    "section": "Saving plots (Exercise 18)",
    "text": "Saving plots (Exercise 18)\nSaves last plot as 5’ x 5’ file named plot_final.png in working directory.\nMatches file type to file extension."
  },
  {
    "objectID": "exercises/ex-04.html#todays-datasets",
    "href": "exercises/ex-04.html#todays-datasets",
    "title": "R Bootcamp - Day 4",
    "section": "Today’s datasets",
    "text": "Today’s datasets\nIn this class, we will use a data set from ggplot2: diamonds contains thousands of gem prices and qualities.\nThere are many interesting data sets you can install as R packages for learning to manipulate and plot data:\n\nbabynames\ngapminder\npalmerpenguins"
  },
  {
    "objectID": "exercises/ex-04.html#getting-familiar-with-the-data---exercise-1",
    "href": "exercises/ex-04.html#getting-familiar-with-the-data---exercise-1",
    "title": "R Bootcamp - Day 4",
    "section": "Getting familiar with the data - Exercise 1",
    "text": "Getting familiar with the data - Exercise 1"
  },
  {
    "objectID": "exercises/ex-04.html#the-syntax-of-ggplot",
    "href": "exercises/ex-04.html#the-syntax-of-ggplot",
    "title": "R Bootcamp - Day 4",
    "section": "The syntax of ggplot()\n",
    "text": "The syntax of ggplot()"
  },
  {
    "objectID": "exercises/ex-04.html#making-a-plot-step-by-step-exercise-2",
    "href": "exercises/ex-04.html#making-a-plot-step-by-step-exercise-2",
    "title": "R Bootcamp - Day 4",
    "section": "Making a plot step-by-step (Exercise 2)",
    "text": "Making a plot step-by-step (Exercise 2)\n\nInitialize a plot with data.\nNext, specify the coordinate system.\nAdd a geom (geom_point).\nMap aesthetics to other variables.\n\nReduce overplotting by adjusting the transparency of points."
  },
  {
    "objectID": "exercises/ex-04.html#looking-under-the-hood-of-ggplot-exercise-3",
    "href": "exercises/ex-04.html#looking-under-the-hood-of-ggplot-exercise-3",
    "title": "R Bootcamp - Day 4",
    "section": "Looking under the hood of ggplot (Exercise 3)",
    "text": "Looking under the hood of ggplot (Exercise 3)"
  },
  {
    "objectID": "exercises/ex-04.html#ggplot-is-powerfully-simple-for-making-complex-plots",
    "href": "exercises/ex-04.html#ggplot-is-powerfully-simple-for-making-complex-plots",
    "title": "R Bootcamp - Day 4",
    "section": "ggplot is powerfully simple for making complex plots",
    "text": "ggplot is powerfully simple for making complex plots\nWhy can’t I just do this?"
  },
  {
    "objectID": "exercises/ex-04.html#geom-functions",
    "href": "exercises/ex-04.html#geom-functions",
    "title": "R Bootcamp - Day 4",
    "section": "Geom functions",
    "text": "Geom functions\n\nUse a geom function to represent data points, use the geom aesthetic properties to represent variables.\nEach function returns a plot layer.\nThere are many geoms in ggplot that are specific to plots with 1, 2, or 3 variables\n\nMake a bar plot.\n\nUpdate the bar plot aesthetics.\n\nChange to a density plot.\n\nColor the density plot.\n\nPlot subsets by mapping fill to cut\n\nUse ggridges to plot staggered subsets.\nhttps://wilkelab.org/ggridges/"
  },
  {
    "objectID": "exercises/ex-04.html#geom-functions-for-two-variables",
    "href": "exercises/ex-04.html#geom-functions-for-two-variables",
    "title": "R Bootcamp - Day 4",
    "section": "Geom functions for two variables",
    "text": "Geom functions for two variables\nMake a column plot.\nSame data with a box plot.\n\nBox plot, with fill color by cut.\nViolin plot with fill color by cut."
  },
  {
    "objectID": "exercises/ex-04.html#continuous-x-continuous-y---exercise-6",
    "href": "exercises/ex-04.html#continuous-x-continuous-y---exercise-6",
    "title": "R Bootcamp - Day 4",
    "section": "continuous x, continuous y - Exercise 6",
    "text": "continuous x, continuous y - Exercise 6\nSubset diamonds to see points more clearly.\nMake a scatter plot.\nNow add a smoothing line.\nHere we can combine geoms to see points & the fit"
  },
  {
    "objectID": "exercises/ex-02.html",
    "href": "exercises/ex-02.html",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "",
    "text": "Explore table1, table2, table3, table4a, table4b, and table5, which all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000.\n\nR provides many functions to examine features of a data object\n\nView() - To open the table up in an excel-like interface - not recommended for large tables\nclass() - what kind of object is it (high-level)?\ntypeof() - what is the object&lt;80&gt;&lt;99&gt;s data type (low-level)?\nis_tibble() - use is.? to confirm data type\nstr() - what is the structure of the object?\nattributes() - does it have any metadata?\nLet’s explore table1\n\nSome of the useful functions for data.frames / tibbles are as follows:\n\n\nhead() - shows first 6 rows\n\n\ntail() - shows last 6 rows\n\n\ndim() - returns the dimensions of data frame (i.e. number of rows and number of columns)\n\n\nnrow() - number of rows\n\n\nncol() - number of columns\n\n\nnames() or colnames() - both show the names attribute for a data frame\n\nglimpse()"
  },
  {
    "objectID": "exercises/ex-02.html#data-sets-for-tidying---exercise-2",
    "href": "exercises/ex-02.html#data-sets-for-tidying---exercise-2",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "",
    "text": "Explore table1, table2, table3, table4a, table4b, and table5, which all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000."
  },
  {
    "objectID": "exercises/ex-02.html#getting-familiar-with-the-data---exercise-3",
    "href": "exercises/ex-02.html#getting-familiar-with-the-data---exercise-3",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "",
    "text": "R provides many functions to examine features of a data object\n\nView() - To open the table up in an excel-like interface - not recommended for large tables\nclass() - what kind of object is it (high-level)?\ntypeof() - what is the object&lt;80&gt;&lt;99&gt;s data type (low-level)?\nis_tibble() - use is.? to confirm data type\nstr() - what is the structure of the object?\nattributes() - does it have any metadata?\nLet’s explore table1"
  },
  {
    "objectID": "exercises/ex-02.html#getting-familiar-with-the-data---exercise-4",
    "href": "exercises/ex-02.html#getting-familiar-with-the-data---exercise-4",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "",
    "text": "Some of the useful functions for data.frames / tibbles are as follows:\n\n\nhead() - shows first 6 rows\n\n\ntail() - shows last 6 rows\n\n\ndim() - returns the dimensions of data frame (i.e. number of rows and number of columns)\n\n\nnrow() - number of rows\n\n\nncol() - number of columns\n\n\nnames() or colnames() - both show the names attribute for a data frame\n\nglimpse()"
  },
  {
    "objectID": "exercises/ex-02.html#pivot_wider---exercise-6",
    "href": "exercises/ex-02.html#pivot_wider---exercise-6",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "pivot_wider - Exercise 6",
    "text": "pivot_wider - Exercise 6\nWhat will the output look like?\nIf you want to save the output, assign it to a new variable. This new variable will appear in your Environment tab."
  },
  {
    "objectID": "exercises/ex-02.html#pivot_longer---exercise-7",
    "href": "exercises/ex-02.html#pivot_longer---exercise-7",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "pivot_longer - Exercise 7",
    "text": "pivot_longer - Exercise 7\nWhat will the output look like?"
  },
  {
    "objectID": "exercises/ex-02.html#separate---exercise-8",
    "href": "exercises/ex-02.html#separate---exercise-8",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "separate - Exercise 8",
    "text": "separate - Exercise 8\nWhat will the output look like?\nseparate_rows - Exercise 9"
  },
  {
    "objectID": "exercises/ex-02.html#unite---exercise-10",
    "href": "exercises/ex-02.html#unite---exercise-10",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "unite - Exercise 10",
    "text": "unite - Exercise 10"
  },
  {
    "objectID": "exercises/ex-02.html#missing-values",
    "href": "exercises/ex-02.html#missing-values",
    "title": "R Bootcamp - Day 2 - Exercises",
    "section": "Missing values",
    "text": "Missing values"
  },
  {
    "objectID": "course-info/team.html",
    "href": "course-info/team.html",
    "title": "MOLB 7950 — Teaching Team",
    "section": "",
    "text": "Instructor\nE-mail\nSchedule a meeting\n\n\n\n\n\nJay Hesselberth\n\n\n\n\n\nNeel Mukherjee\n\n\n\n\n\nKent Riemondy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructor\nE-mail\nSchedule a meeting\n\n\n\n\n\nKathryn Walters\n\n\n\n\n\nBrandon Buck"
  },
  {
    "objectID": "course-info/team.html#teaching-team-and-office-hours",
    "href": "course-info/team.html#teaching-team-and-office-hours",
    "title": "MOLB 7950 — Teaching Team",
    "section": "",
    "text": "Instructor\nE-mail\nSchedule a meeting\n\n\n\n\n\nJay Hesselberth\n\n\n\n\n\nNeel Mukherjee\n\n\n\n\n\nKent Riemondy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructor\nE-mail\nSchedule a meeting\n\n\n\n\n\nKathryn Walters\n\n\n\n\n\nBrandon Buck"
  },
  {
    "objectID": "course-info/support.html",
    "href": "course-info/support.html",
    "title": "MOLB 7950 — Getting help",
    "section": "",
    "text": "Course discussion will be through the Slack MOLB7950 organization.\nGuidelines for using Slack:\n\nUse dedicated channels for discussion in #class, questions about your #problem-sets, and your #final-project\nYou can ask for help by tagging the TAs in the #class channel. If you post @ta help, someone will start a thread where you can ask a question.\nIf needed, we can talk face-to-face via the /zoom integration.\n\n\n\n\n\nOur TAs will be available Mon-Fri afternoons from 1-3pm."
  },
  {
    "objectID": "course-info/support.html#how-to-get-help",
    "href": "course-info/support.html#how-to-get-help",
    "title": "MOLB 7950 — Getting help",
    "section": "",
    "text": "Course discussion will be through the Slack MOLB7950 organization.\nGuidelines for using Slack:\n\nUse dedicated channels for discussion in #class, questions about your #problem-sets, and your #final-project\nYou can ask for help by tagging the TAs in the #class channel. If you post @ta help, someone will start a thread where you can ask a question.\nIf needed, we can talk face-to-face via the /zoom integration.\n\n\n\n\n\nOur TAs will be available Mon-Fri afternoons from 1-3pm."
  },
  {
    "objectID": "course-info/final-projects.html",
    "href": "course-info/final-projects.html",
    "title": "MOLB 7950 — Final Projects",
    "section": "",
    "text": "Final projects can involve groups of 1-3 people.\nProjects are choose your own adventure:\n\nYou can start with a template. Each of these have a set of questions, that you can build off of:\n\ndna-block/ explores an MNase-seq data set in S. cerevisiae. Sub-nucleosomal fragments provide a DNA-based signal to understand chromatin transactions that lead to transcription.\nrna-block/published-data/ is the material Kent presented, examining the role of A-to-I editing using RNA-seq.\nrna-block/rna-localization/: is an exploration of neuronal RNA localization by RNA-seq.\n\nYou could find a data set on NCBI GEO of interest (e.g., relevant to your thesis work), and work it up with salmon, DEseq, and exploratory analysis.\nYou can start with your own sequencing data (bulk/single-cell RNA seq, DNA sequencing)."
  },
  {
    "objectID": "course-info/final-projects.html#overview",
    "href": "course-info/final-projects.html#overview",
    "title": "MOLB 7950 — Final Projects",
    "section": "",
    "text": "Final projects can involve groups of 1-3 people.\nProjects are choose your own adventure:\n\nYou can start with a template. Each of these have a set of questions, that you can build off of:\n\ndna-block/ explores an MNase-seq data set in S. cerevisiae. Sub-nucleosomal fragments provide a DNA-based signal to understand chromatin transactions that lead to transcription.\nrna-block/published-data/ is the material Kent presented, examining the role of A-to-I editing using RNA-seq.\nrna-block/rna-localization/: is an exploration of neuronal RNA localization by RNA-seq.\n\nYou could find a data set on NCBI GEO of interest (e.g., relevant to your thesis work), and work it up with salmon, DEseq, and exploratory analysis.\nYou can start with your own sequencing data (bulk/single-cell RNA seq, DNA sequencing)."
  },
  {
    "objectID": "course-info/final-projects.html#deliverables",
    "href": "course-info/final-projects.html#deliverables",
    "title": "MOLB 7950 — Final Projects",
    "section": "Deliverables",
    "text": "Deliverables\n\nAn Rmarkdown document with code, plots, interpretations, and next steps.\nIf you work in a group, list the members of the group at the top of the document, and make it clear which parts are your work by adding your initials to code chunks.\nShort presentations (8-10 minutes) by the groups the week of Nov 28. Presentations should include 1-2 slides of background, a hypothesis for the approach, code output (table or graph) that addresses the hypothesis, and one or more tests of the statistical significance of the observation."
  },
  {
    "objectID": "course-info/final-projects.html#grading-and-rubric",
    "href": "course-info/final-projects.html#grading-and-rubric",
    "title": "MOLB 7950 — Final Projects",
    "section": "Grading and rubric",
    "text": "Grading and rubric\nThe final project will be worth 20% of your grade and we will use the grading scheme outlined in the grading rubric.\nEach individual in a group will be evaluated separately, so contributions must be clearly marked in the document."
  },
  {
    "objectID": "course-info/problem-sets.html",
    "href": "course-info/problem-sets.html",
    "title": "MOLB 7950 — Problem Sets",
    "section": "",
    "text": "We reinforce concepts with problem sets assigned at the end of each class. During the main blocks, problem sets on Mon and Wed should take ~60 minutes to complete. Problems sets assigned on Friday will be more substantial, requiring ~1-2 hours to complete. Together the problem sets constitute 60% of your grade.\n\n\n\nProblem sets are distributed as Posit Cloud assignments. You will work on problem sets in an Rmarkdown document in the assignment. When complete, complete your assignment by submitting the URL from your Posit Cloud assignment into the assignment submission on Canvas. We will grade your problem directly in the Posit Cloud assignment.\n\n\n\n\n\n\n\n\n\n\nAssigned\nDue\nGrades By\nWho grades\nTime to complete (approx)\n\n\n\n\nMon @ 12pm\nTues @ 5pm\nWed @ 5pm\nInstructors / TAs\n60 min\n\n\nTue @ 12pm\nWed @ 5pm\nThurs @ 5pm\nInstructors / TAs\n60 min\n\n\nWed @ 12pm\nThurs @ 5pm\nFri @ 5pm\nInstructors / TAs\n60 min\n\n\nThurs @ 12pm\nFri @ 5pm\nTues @ 5pm\nInstructors / TAs\n60 min\n\n\nFri @ 12pm\nMon @ 5pm\nWed @ 5pm\nInstructors / TAs\n1-2 hr\n\n\n\n\n\n\nProblem sets are worth 60% of your grade. Values in parentheses represent point values for each level from 20 points total. This rubric will be assessed at the end of the semester.\n\n\n\n\n\n\n\n\n\nCriteria\nExpert\nCompetent\nNeeds Improvement\n\n\n\n\nCoding style\nStudent has gone beyond what was expected and required, coding manual is followed, code is well commented\nCoding style lacks refinement and has some errors, but code is readable and has some comments\nMany errors in coding style, little attention paid to making the code human readable\n\n\nCoding strategy\nComplicated problem broken down into sub-problems that are individually much simpler. Code is efficient, correct, and minimal. Code uses appropriate data structure (list, data frame, vector/matrix/array). Code checks for common errors\nCode is correct, but could be edited down to leaner code. Some “hacking” instead of using suitable data structure. Some checks for errors.\nCode tackles complicated problem in one big chunk. Code is repetitive and could easily be functionalized. No anticipation of errors.\n\n\nPresentation: graphs\nGraph(s) carefully tuned for desired purpose. One graph illustrates one point\nGraph(s) well chosen, but with a few minor problems: inappropriate aspect ratios, poor labels.\nGraph(s) poorly chosen to support questions.\n\n\nPresentation: tables\nTable(s) carefully constructed to make it easy to perform important comparisons. Careful styling highlights important features.\nTable(s) generally appropriate but possibly some minor formatting deficiencies.\nTable(s) with too many, or inconsistent, decimal places. Table(s) not appropriate for questions and findings. Major display problems.\n\n\nAchievement, mastery, cleverness, creativity\nStudent has gone beyond what was expected and required, e.g., extraordinary effort, additional tools not addressed by this course, unusually sophisticated application of tools from course.\nTools and techniques from the course are applied very competently and, perhaps,somewhat creatively. Chosen task was acceptable, but fairly conservative in ambition.\nStudent does not display the expected level of mastery of the tools and techniques in this course. Chosen task was too limited in scope.\n\n\nEase of access for instructor, compliance with course conventions for submitted work\nAccess as easy as possible, code runs!\nSatisfactory\nNot an earnest effort to reduce friction and comply with conventions and/or code does not run"
  },
  {
    "objectID": "course-info/problem-sets.html#problem-set-overview",
    "href": "course-info/problem-sets.html#problem-set-overview",
    "title": "MOLB 7950 — Problem Sets",
    "section": "",
    "text": "We reinforce concepts with problem sets assigned at the end of each class. During the main blocks, problem sets on Mon and Wed should take ~60 minutes to complete. Problems sets assigned on Friday will be more substantial, requiring ~1-2 hours to complete. Together the problem sets constitute 60% of your grade.\n\n\n\nProblem sets are distributed as Posit Cloud assignments. You will work on problem sets in an Rmarkdown document in the assignment. When complete, complete your assignment by submitting the URL from your Posit Cloud assignment into the assignment submission on Canvas. We will grade your problem directly in the Posit Cloud assignment.\n\n\n\n\n\n\n\n\n\n\nAssigned\nDue\nGrades By\nWho grades\nTime to complete (approx)\n\n\n\n\nMon @ 12pm\nTues @ 5pm\nWed @ 5pm\nInstructors / TAs\n60 min\n\n\nTue @ 12pm\nWed @ 5pm\nThurs @ 5pm\nInstructors / TAs\n60 min\n\n\nWed @ 12pm\nThurs @ 5pm\nFri @ 5pm\nInstructors / TAs\n60 min\n\n\nThurs @ 12pm\nFri @ 5pm\nTues @ 5pm\nInstructors / TAs\n60 min\n\n\nFri @ 12pm\nMon @ 5pm\nWed @ 5pm\nInstructors / TAs\n1-2 hr\n\n\n\n\n\n\nProblem sets are worth 60% of your grade. Values in parentheses represent point values for each level from 20 points total. This rubric will be assessed at the end of the semester.\n\n\n\n\n\n\n\n\n\nCriteria\nExpert\nCompetent\nNeeds Improvement\n\n\n\n\nCoding style\nStudent has gone beyond what was expected and required, coding manual is followed, code is well commented\nCoding style lacks refinement and has some errors, but code is readable and has some comments\nMany errors in coding style, little attention paid to making the code human readable\n\n\nCoding strategy\nComplicated problem broken down into sub-problems that are individually much simpler. Code is efficient, correct, and minimal. Code uses appropriate data structure (list, data frame, vector/matrix/array). Code checks for common errors\nCode is correct, but could be edited down to leaner code. Some “hacking” instead of using suitable data structure. Some checks for errors.\nCode tackles complicated problem in one big chunk. Code is repetitive and could easily be functionalized. No anticipation of errors.\n\n\nPresentation: graphs\nGraph(s) carefully tuned for desired purpose. One graph illustrates one point\nGraph(s) well chosen, but with a few minor problems: inappropriate aspect ratios, poor labels.\nGraph(s) poorly chosen to support questions.\n\n\nPresentation: tables\nTable(s) carefully constructed to make it easy to perform important comparisons. Careful styling highlights important features.\nTable(s) generally appropriate but possibly some minor formatting deficiencies.\nTable(s) with too many, or inconsistent, decimal places. Table(s) not appropriate for questions and findings. Major display problems.\n\n\nAchievement, mastery, cleverness, creativity\nStudent has gone beyond what was expected and required, e.g., extraordinary effort, additional tools not addressed by this course, unusually sophisticated application of tools from course.\nTools and techniques from the course are applied very competently and, perhaps,somewhat creatively. Chosen task was acceptable, but fairly conservative in ambition.\nStudent does not display the expected level of mastery of the tools and techniques in this course. Chosen task was too limited in scope.\n\n\nEase of access for instructor, compliance with course conventions for submitted work\nAccess as easy as possible, code runs!\nSatisfactory\nNot an earnest effort to reduce friction and comply with conventions and/or code does not run"
  },
  {
    "objectID": "course-info/syllabus.html",
    "href": "course-info/syllabus.html",
    "title": "MOLB 7950 Syllabus",
    "section": "",
    "text": "MOLB 7950 is a hands-on tutorial of skills and theory needed to process, analyze, and visualize output from large biological data sets. We emphasize the R statistical computing environment.\n🗓️ Class will run from Aug 28 - Nov 1\n📍 Classes will be held in-person in AHSB 2200\n🕘 Class time is 9:00-10:30am\nMOLB 7950 is a three credit hour course.\nThe course is divided into blocks:\n\n\nTHe Bootcamp block covers R programming and introduces important statistical concepts and approaches. We will also cover data types you will encounter during biological data analysis and approaches for their analysis.\nDuring the bootcamp block, we will meet everyday for 90 minutes to cover fundamental concepts you will need throughout the course.\n\n\n\nAfter Bootcamp, will cover experimental approaches used to analyze DNA and RNA. Each block spans ~4 weeks, with each week focused on a particular type of experiment (see below). Each block covers statistical concepts needed for rigorous analysis and analysis approaches to process raw data to results (tables and figures) using reproducible coding techniques.\nIn most weeks we will discuss and analyze data from a publication. You are responsible for reading the week’s material before class begins on Monday.\n\n\n\nThe DNA block covers genome sequencing for identifying mutations, and two approaches for analyzing chromatin state (ChIP-seq and MNase-seq).\nThe RNA block covers RNA-seq, alternative splicing, differential gene expression, and RNA:protein interactions."
  },
  {
    "objectID": "course-info/syllabus.html#course-overview",
    "href": "course-info/syllabus.html#course-overview",
    "title": "MOLB 7950 Syllabus",
    "section": "",
    "text": "MOLB 7950 is a hands-on tutorial of skills and theory needed to process, analyze, and visualize output from large biological data sets. We emphasize the R statistical computing environment.\n🗓️ Class will run from Aug 28 - Nov 1\n📍 Classes will be held in-person in AHSB 2200\n🕘 Class time is 9:00-10:30am\nMOLB 7950 is a three credit hour course.\nThe course is divided into blocks:\n\n\nTHe Bootcamp block covers R programming and introduces important statistical concepts and approaches. We will also cover data types you will encounter during biological data analysis and approaches for their analysis.\nDuring the bootcamp block, we will meet everyday for 90 minutes to cover fundamental concepts you will need throughout the course.\n\n\n\nAfter Bootcamp, will cover experimental approaches used to analyze DNA and RNA. Each block spans ~4 weeks, with each week focused on a particular type of experiment (see below). Each block covers statistical concepts needed for rigorous analysis and analysis approaches to process raw data to results (tables and figures) using reproducible coding techniques.\nIn most weeks we will discuss and analyze data from a publication. You are responsible for reading the week’s material before class begins on Monday.\n\n\n\nThe DNA block covers genome sequencing for identifying mutations, and two approaches for analyzing chromatin state (ChIP-seq and MNase-seq).\nThe RNA block covers RNA-seq, alternative splicing, differential gene expression, and RNA:protein interactions."
  },
  {
    "objectID": "course-info/syllabus.html#schedule",
    "href": "course-info/syllabus.html#schedule",
    "title": "MOLB 7950 Syllabus",
    "section": "Schedule",
    "text": "Schedule\nClasses begin on August 28 and end on November 1. Dates are from the Fall 2023 Academic Calendar.\nDuring the Bootcamp block, classes will be held every day, Mon-Fri from 9:00-10:30am.\nDuring the DNA & RNA blocks, we will have in-class exercises and discussion on Mon-Wed-Fri 9:00-10:30am."
  },
  {
    "objectID": "course-info/syllabus.html#location",
    "href": "course-info/syllabus.html#location",
    "title": "MOLB 7950 Syllabus",
    "section": "Location",
    "text": "Location\nClasses will be held in-person in AHSB 2201. All classes will be recorded and made available through Canvas."
  },
  {
    "objectID": "course-info/syllabus.html#policies",
    "href": "course-info/syllabus.html#policies",
    "title": "MOLB 7950 Syllabus",
    "section": "Policies",
    "text": "Policies\n\nAttendance\nClass attendance is a firm expectation; frequent absences or tardiness are considered cause for a grade reduction.\nif you are sick, please let us know (e-mail Jay and Neel) and stay home.\nAnticipated absences outside of sickness should be reported to the instructors of a given block as soon as possible to make plans for possible accommodation.\nWe will record all lectures on Panopto and they will be available online through Canvas.\n\n\nLate and missed work\nWe have a late work policy for homework assignments:\n\nIf a problem set set is late but within 24 hours of due date/time, the grade will be reduced by 50%\nIf a problem set is returned any later, no credit will be given.\nAll regrade requests must be discussed with the professor within one week of receiving your grade. There will be no grade changes after the final project.\n\n\n\nDiversity & Inclusiveness\nOur view is that students from all diverse backgrounds and perspectives will be well-served by this course, that students’ learning needs be addressed both in and out of class, and that the diversity that the students bring to this class iss a resource, strength, and benefit.\n\n\nDisability Policy\nStudents with disabilities who need accommodations are encouraged to contact the Office of Disability, Access & Inclusion as soon as possible to ensure that accommodations are implemented in a timely fashion.\n\n\nHonor code\nAcademic dishonesty will not be tolerated and is grounds for dismissal from the class with a failing grade (“F”). For other information, please consult the Graduate Student Handbook.\nChatGPT will probably be able to answer most coding questions you ask of it. While it is useful for fleshing out an initial approach from pseudocode, we do not recommend using it, as these conceptual approaches are an essential foundation for buildling expertise in bioinformatic analysis."
  },
  {
    "objectID": "course-info/syllabus.html#problem-sets",
    "href": "course-info/syllabus.html#problem-sets",
    "title": "MOLB 7950 Syllabus",
    "section": "Problem Sets",
    "text": "Problem Sets\n\nProblem sets will be assigned at the end of each class.\nYou can use external resources but must explicitly cite where you have obtained code (both code you used directly and “paraphrased” code / code used as inspiration). Any reused code that is not explicitly cited will be treated as plagiarism.\nYou can discuss the content of assignments with others in this class. If you do so, you must acknowledge your collaborator(s) at the top of your assignment, for example: “Collaborators: Hillary and Bernie”. Failure to acknowledge collaborators will result in a grade of 0. You may not copy code and/or answers directly from another student. If you copy other work, both parties will receive a grade of 0.\nThe problem set with the lowest score for each student will be dropped.\nRather than copying someone’s work, ask for help. You are not alone in this course!"
  },
  {
    "objectID": "course-info/syllabus.html#professionalism",
    "href": "course-info/syllabus.html#professionalism",
    "title": "MOLB 7950 Syllabus",
    "section": "Professionalism",
    "text": "Professionalism\n\nPlease refrain from texting or using your computer for anything other than coursework during class."
  },
  {
    "objectID": "course-info/syllabus.html#assignments-and-grading",
    "href": "course-info/syllabus.html#assignments-and-grading",
    "title": "MOLB 7950 Syllabus",
    "section": "Assignments and Grading",
    "text": "Assignments and Grading\nThe course measures learning through daily problem sets, a final project, and your participation.\n\n\n\nType\n% of grade\n\n\n\n\nProblem Sets\n60\n\n\nFinal Project\n20\n\n\nParticpation\n20\n\n\n\nGrades will be assigned as follows:\n\n\n\nPercent total points\nGrade\n\n\n\n\n&gt;= 95\nA\n\n\n&gt;= 90\nA-\n\n\n&gt;= 85\nB+\n\n\n&gt;= 80\nB\n\n\n\n\nProblem sets\nWe reinforce concepts with problem sets assigned at the end of class that should take ~60 minutes to complete. Problems sets assigned on Friday will be more substantial, requiring ~1-2 hours to complete. Together the problem sets constitute 60% of your grade.\n\n\n\n\n\n\n\n\n\n\nAssigned\nDue\nGrades By\nWho grades\nTime to complete (approx)\n\n\n\n\nMon @ 12pm\nTues @ 5pm\nWed @ 5pm\nInstructors / TAs\n60 min\n\n\nTue @ 12pm\nWed @ 5pm\nThurs @ 5pm\nInstructors / TAs\n60 min\n\n\nWed @ 12pm\nThurs @ 5pm\nFri @ 5pm\nInstructors / TAs\n60 min\n\n\nThurs @ 12pm\nFri @ 5pm\nTues @ 5pm\nInstructors / TAs\n60 min\n\n\nFri @ 12pm\nMon @ 5pm\nWed @ 5pm\nInstructors / TAs\n1-2 hr\n\n\n\n\n\nFinal projects\nFinal projects can be completed in groups of 1-3 people. Projects will involve analysis of existing public data sets and end with a short presentation the last week of class. The final project constitutes 20% of your grade.\n\n\nGrading Rubrics\n\nProblem Set Rubric\nProblem sets are worth 60% of your grade. Values in parentheses represent point values for each level from 20 points total. This rubric will be assessed at the end of the semester.\n\n\n\n\n\n\n\n\n\nCriteria\nExpert\nCompetent\nNeeds Improvement\n\n\n\n\nCoding style\nStudent has gone beyond what was expected and required, coding manual is followed, code is well commented\nCoding style lacks refinement and has some errors, but code is readable and has some comments\nMany errors in coding style, little attention paid to making the code human readable\n\n\nCoding strategy\nComplicated problem broken down into sub-problems that are individually much simpler. Code is efficient, correct, and minimal. Code uses appropriate data structure (list, data frame, vector/matrix/array). Code checks for common errors\nCode is correct, but could be edited down to leaner code. Some “hacking” instead of using suitable data structure. Some checks for errors.\nCode tackles complicated problem in one big chunk. Code is repetitive and could easily be functionalized. No anticipation of errors.\n\n\nPresentation: graphs\nGraph(s) carefully tuned for desired purpose. One graph illustrates one point\nGraph(s) well chosen, but with a few minor problems: inappropriate aspect ratios, poor labels.\nGraph(s) poorly chosen to support questions.\n\n\nPresentation: tables\nTable(s) carefully constructed to make it easy to perform important comparisons. Careful styling highlights important features.\nTable(s) generally appropriate but possibly some minor formatting deficiencies.\nTable(s) with too many, or inconsistent, decimal places. Table(s) not appropriate for questions and findings. Major display problems.\n\n\nAchievement, mastery, cleverness, creativity\nStudent has gone beyond what was expected and required, e.g., extraordinary effort, additional tools not addressed by this course, unusually sophisticated application of tools from course.\nTools and techniques from the course are applied very competently and, perhaps,somewhat creatively. Chosen task was acceptable, but fairly conservative in ambition.\nStudent does not display the expected level of mastery of the tools and techniques in this course. Chosen task was too limited in scope.\n\n\nEase of access for instructor, compliance with course conventions for submitted work\nAccess as easy as possible, code runs!\nSatisfactory\nNot an earnest effort to reduce friction and comply with conventions and/or code does not run\n\n\n\n\n\nParticipation rubric\nAttendance & participation is worth 20% of your grade. Values in parentheses represent point values for each level from 20 points total. This rubric will be assessed at the end of the semester.\n\n\n\n\n\n\n\n\n\nCriteria\nExpert\nCompetent\nNeeds improvement\n\n\n\n\nAttendance (physically present for class, or coordinating with instructor when absent)\nAttends class regularly (5)\nAttends most classes (4)\nAttends some classes (0-3)\n\n\nPreparation (activities required for in-class participation, like surveys and software installation)\nCompletes requested activities prior to class (5)\nCompletes most requested activities prior to class, sometimes needs to finish during class (4)\nRarely completes requested activities prior to class, often takes class time to complete (0-3)\n\n\nEngagement (in-class activities like coding exercises and discussion)\nActively engages in class activities (10)\nSometimes engages in class activities (8)\nDoesn’t engage in class activities (0-7)"
  },
  {
    "objectID": "course-info/syllabus.html#related-coursework",
    "href": "course-info/syllabus.html#related-coursework",
    "title": "MOLB 7950 Syllabus",
    "section": "Related coursework",
    "text": "Related coursework\nIn previous iterations of this course, we taught command-line (bash, grep, awk, etc) and Python programming. These skills are useful, but for consistency we opted to focus on R programming and RStudio as an analysis environment.\nAMC also offers shorter workshops on specific analysis strategies that you might find helpful.\n\nBMSC 7810: Practical biological data analysis with R/RStudio (RBI fellows)\nMOLB 7900: Practical Computational Biology for Biologists — Python (Taliaferro and Ramachandran)\nMOLB 7910: Practical Computational Biology for Biologists — R/R Studio (Jagannathan and Mukherjee)"
  },
  {
    "objectID": "course-info/syllabus.html#acknowldgements-attribution",
    "href": "course-info/syllabus.html#acknowldgements-attribution",
    "title": "MOLB 7950 Syllabus",
    "section": "Acknowldgements & Attribution",
    "text": "Acknowldgements & Attribution\nWe have borrowed from several (open licensed) resources for course content, including:\n\nStats 545 at UBC, particularly their grading rubrics\nCourses from Mine Çetinkaya-Rundel, mostly inspiration for quarto formats"
  },
  {
    "objectID": "exercises/ex-01.html",
    "href": "exercises/ex-01.html",
    "title": "R Bootcamp - Day 1",
    "section": "",
    "text": "We are using RStudio through Posit Cloud for the class.\nLook at RStudio panels one at a time.\nEnvironment, History, Console, Files, Plots, Packages, Help, etc.\n\nSee menu:\nHelp &gt; Cheat Sheets &gt; RStudio IDE Cheat Sheet"
  },
  {
    "objectID": "exercises/ex-01.html#rstudio---exercise-1",
    "href": "exercises/ex-01.html#rstudio---exercise-1",
    "title": "R Bootcamp - Day 1",
    "section": "",
    "text": "We are using RStudio through Posit Cloud for the class.\nLook at RStudio panels one at a time.\nEnvironment, History, Console, Files, Plots, Packages, Help, etc.\n\nSee menu:\nHelp &gt; Cheat Sheets &gt; RStudio IDE Cheat Sheet"
  },
  {
    "objectID": "exercises/ex-01.html#r-as-a-calculator---exercise-2",
    "href": "exercises/ex-01.html#r-as-a-calculator---exercise-2",
    "title": "R Bootcamp - Day 1",
    "section": "R as a calculator - Exercise 2",
    "text": "R as a calculator - Exercise 2\n\nR can function like an advanced calculator\n\n\nTry simple math.\nAssign a numeric value to an object.\n\n\n&lt;- and = are assignment operators.\nBy convention, R programmers use &lt;-.\n\nx &lt;- 1 reads “set the value of x to 1”.\n\n. . .\n= and == are two different operators.\n\na = is used for assignment (e.g., x = 1)\na == tests for equivalence (e.g. x == 1 says “does x equal 1?”)"
  },
  {
    "objectID": "exercises/ex-01.html#functions-and-arguments---exercise-3",
    "href": "exercises/ex-01.html#functions-and-arguments---exercise-3",
    "title": "R Bootcamp - Day 1",
    "section": "Functions and arguments - Exercise 3",
    "text": "Functions and arguments - Exercise 3"
  },
  {
    "objectID": "exercises/ex-01.html#writing-a-simple-function---exercise-4",
    "href": "exercises/ex-01.html#writing-a-simple-function---exercise-4",
    "title": "R Bootcamp - Day 1",
    "section": "Writing a simple function - Exercise 4",
    "text": "Writing a simple function - Exercise 4"
  },
  {
    "objectID": "exercises/ex-01.html#data-types---exercise-5",
    "href": "exercises/ex-01.html#data-types---exercise-5",
    "title": "R Bootcamp - Day 1",
    "section": "Data types - Exercise 5",
    "text": "Data types - Exercise 5\n\nThere are many data types in R.\nWe’ll mainly use numeric, character, and logical."
  },
  {
    "objectID": "exercises/ex-01.html#vectors---exercise-6",
    "href": "exercises/ex-01.html#vectors---exercise-6",
    "title": "R Bootcamp - Day 1",
    "section": "Vectors - Exercise 6",
    "text": "Vectors - Exercise 6\nLet’s create some vectors.\n\nThe c function combines values together (e.g., c(1,2,3))\n\n. . ."
  },
  {
    "objectID": "exercises/ex-01.html#data-frames",
    "href": "exercises/ex-01.html#data-frames",
    "title": "R Bootcamp - Day 1",
    "section": "Data frames",
    "text": "Data frames\n\nA data.frame is a rectangle, where each column is a vector, and each row is a slice across vectors.\ndata.frame columns are vectors, and can have different types (numeric, character, factor, etc.).\nA data.frame is constructed with data.frame()."
  },
  {
    "objectID": "exercises/ex-01.html#data-frames-tibbles---exercise-7",
    "href": "exercises/ex-01.html#data-frames-tibbles---exercise-7",
    "title": "R Bootcamp - Day 1",
    "section": "Data frames & tibbles - Exercise 7",
    "text": "Data frames & tibbles - Exercise 7\nCreate a data.frame and tibble.\nNow echo the contents of df and tbl to the console and inspect"
  },
  {
    "objectID": "exercises/ex-01.html#r-packages---exercise-8",
    "href": "exercises/ex-01.html#r-packages---exercise-8",
    "title": "R Bootcamp - Day 1",
    "section": "R packages - Exercise 8",
    "text": "R packages - Exercise 8\nLet’s do the following to explore R packages:\n\nLook at the “Environment” panel in Rstudio\nExplore Global Environment\nExplore the contents of a package"
  },
  {
    "objectID": "exercises/ex-01.html#quarto-exercise---exercise-9",
    "href": "exercises/ex-01.html#quarto-exercise---exercise-9",
    "title": "R Bootcamp - Day 1",
    "section": "Quarto Exercise - Exercise 9",
    "text": "Quarto Exercise - Exercise 9\nLet’s do the following to explore Quarto documents:\n\nCreate a new Quarto document\nRender the document to see the output"
  },
  {
    "objectID": "exercises/ex-01.html#problem-sets-and-submission",
    "href": "exercises/ex-01.html#problem-sets-and-submission",
    "title": "R Bootcamp - Day 1",
    "section": "Problem sets and submission",
    "text": "Problem sets and submission\nYour first problem set is in problem-sets/ps-01.qmd"
  },
  {
    "objectID": "exercises/ex-03.html",
    "href": "exercises/ex-03.html",
    "title": "R Bootcamp - Day 3 - Exercises",
    "section": "",
    "text": "Explore these data sets:\n\ndplyr::starwars\n\ndplyr::band_members, dplyr::band_instruments, dplyr::band_instruments2"
  },
  {
    "objectID": "exercises/ex-03.html#todays-datasets---exercise-1",
    "href": "exercises/ex-03.html#todays-datasets---exercise-1",
    "title": "R Bootcamp - Day 3 - Exercises",
    "section": "",
    "text": "Explore these data sets:\n\ndplyr::starwars\n\ndplyr::band_members, dplyr::band_instruments, dplyr::band_instruments2"
  },
  {
    "objectID": "exercises/ex-03.html#arrange---exercise-2",
    "href": "exercises/ex-03.html#arrange---exercise-2",
    "title": "R Bootcamp - Day 3 - Exercises",
    "section": "arrange - Exercise 2",
    "text": "arrange - Exercise 2"
  },
  {
    "objectID": "exercises/ex-03.html#filter---exercise-3",
    "href": "exercises/ex-03.html#filter---exercise-3",
    "title": "R Bootcamp - Day 3 - Exercises",
    "section": "filter - Exercise 3",
    "text": "filter - Exercise 3\nfilter by membership\n\n# filter based on skin color\n\nConditions can be combined using & (and), | (or).\n\n# filter on skin and eye color\n\nselect - Exercise 4\nmutate (& pipe |&gt;)- Exercise 5\n\n# create a new column to display height in meters\n\n# using the pipe to feed data into multiple functions sequentially\n\n# mutate allows you to refer to columns that you&lt;e2&gt;&lt;80&gt;&lt;99&gt;ve just created\n\n# output needs to be saved into a new dataframe since dplyr does not \"change\" the original dataframe\n\n# using if_else clauses with mutate\n\nrowwise operations (if time permits)\n\n# let's input data (same one used in yesterday's problem set)\n# data &lt;- read_csv(file = \"data/data_transcript_exp_subset.csv\")\n\n# calculate mean for each time point using mutate in a rowwise fashion!\n\nsummarise - Exercise 6\ngroup_by + summarize - Exercise 7"
  },
  {
    "objectID": "exercises/ex-05.html",
    "href": "exercises/ex-05.html",
    "title": "R Bootcamp - Day 5",
    "section": "",
    "text": "Introduce ggplot2 & today’s data sets (Exercise 1)\nUnderstand the basics of ggplot2 (Exercise 2, 3)\nGeom functions (Exercise 4-8)\nGeom_point properties (Exercise 9)\nPosition adjustments (Exercise 10)\nCoordinate and Scale Functions (Exercise 11)\nZooming into a plot (Exercise 12)\n\n\n\nFaceting (Exercise 13)\nThemes (Exercise 14)\nLabels & Legends (Exercise 15)\nAdding lines to plots (Exercise 16)\nMaking multi-panel figures (Exercise 17)\nSaving a plot (Exercise 18)"
  },
  {
    "objectID": "exercises/ex-05.html#class-4-5-outline",
    "href": "exercises/ex-05.html#class-4-5-outline",
    "title": "R Bootcamp - Day 5",
    "section": "",
    "text": "Introduce ggplot2 & today’s data sets (Exercise 1)\nUnderstand the basics of ggplot2 (Exercise 2, 3)\nGeom functions (Exercise 4-8)\nGeom_point properties (Exercise 9)\nPosition adjustments (Exercise 10)\nCoordinate and Scale Functions (Exercise 11)\nZooming into a plot (Exercise 12)\n\n\n\nFaceting (Exercise 13)\nThemes (Exercise 14)\nLabels & Legends (Exercise 15)\nAdding lines to plots (Exercise 16)\nMaking multi-panel figures (Exercise 17)\nSaving a plot (Exercise 18)"
  },
  {
    "objectID": "exercises/ex-05.html#shape-size-fill-color-and-transparency---exercise-9",
    "href": "exercises/ex-05.html#shape-size-fill-color-and-transparency---exercise-9",
    "title": "R Bootcamp - Day 5",
    "section": "shape, size, fill, color, and transparency - Exercise 9",
    "text": "shape, size, fill, color, and transparency - Exercise 9\nGet a diamonds subset.\nNote that aesthetics can also be defined within a geom.\nThis is useful if you use two different geoms that share an aesthetic."
  },
  {
    "objectID": "exercises/ex-05.html#position-adjustments---exercise-10",
    "href": "exercises/ex-05.html#position-adjustments---exercise-10",
    "title": "R Bootcamp - Day 5",
    "section": "Position adjustments - Exercise 10",
    "text": "Position adjustments - Exercise 10\nA stacked bar chart.\nDodged bars are easier to read (proportions are clearer)"
  },
  {
    "objectID": "exercises/ex-05.html#coordinate-and-scale-functions---exercise-11",
    "href": "exercises/ex-05.html#coordinate-and-scale-functions---exercise-11",
    "title": "R Bootcamp - Day 5",
    "section": "Coordinate and Scale Functions - Exercise 11",
    "text": "Coordinate and Scale Functions - Exercise 11\nLogarithmic axes - 1\nNote the difference between axis labels in these two examples.\n\nLogarithmic axes - 2\n\nFlipping coordinate system (swapping x and y)\n\nNow flip the axis.\nBrief aside: ggplot can handle on-the-fly data transformations.\nHere we log-transform carat and convert USD to CAD."
  },
  {
    "objectID": "exercises/ex-05.html#zooming-into-a-plot---exercise-12",
    "href": "exercises/ex-05.html#zooming-into-a-plot---exercise-12",
    "title": "R Bootcamp - Day 5",
    "section": "Zooming into a plot - Exercise 12",
    "text": "Zooming into a plot - Exercise 12\nWe might want to change the limits of x or y axes to zoom in."
  },
  {
    "objectID": "exercises/ex-05.html#faceting-to-plot-subsets-of-data-into-separate-panels---exercise-13",
    "href": "exercises/ex-05.html#faceting-to-plot-subsets-of-data-into-separate-panels---exercise-13",
    "title": "R Bootcamp - Day 5",
    "section": "Faceting to plot subsets of data into separate panels - Exercise 13",
    "text": "Faceting to plot subsets of data into separate panels - Exercise 13\nA density plot we’ve seen before.\nWhich variables can we use to subdivide the data?\n\nFaceted by cut\nLet’s also use facet_grid() to facet by two variables.\nFaceted by clarity and cut.\n\nScatter plot with facets."
  },
  {
    "objectID": "exercises/ex-05.html#themes---exercise-14",
    "href": "exercises/ex-05.html#themes---exercise-14",
    "title": "R Bootcamp - Day 5",
    "section": "Themes - Exercise 14",
    "text": "Themes - Exercise 14\nScatter plot with default theme.\nChange the theme with theme_bw().\nMy go-to is cowplot::theme_cowplot().\nIt implements much of the advice in the “Dataviz” book, i.e.. YOUR LABELS ARE TOO SMALL.\nWe’re not going to cover it, but you can also customize pre-existing themes."
  },
  {
    "objectID": "exercises/ex-05.html#labels-legends---exercise-15",
    "href": "exercises/ex-05.html#labels-legends---exercise-15",
    "title": "R Bootcamp - Day 5",
    "section": "Labels & Legends - Exercise 15",
    "text": "Labels & Legends - Exercise 15\nUse labs() to add / change plot labels."
  },
  {
    "objectID": "exercises/ex-05.html#how-to-add-a-line-to-a-plot-exercise-16",
    "href": "exercises/ex-05.html#how-to-add-a-line-to-a-plot-exercise-16",
    "title": "R Bootcamp - Day 5",
    "section": "How to add a line to a plot? (Exercise 16)",
    "text": "How to add a line to a plot? (Exercise 16)\n\nAlso try:"
  },
  {
    "objectID": "exercises/ex-05.html#how-to-combine-multiple-plots-into-a-figure-exercise-17",
    "href": "exercises/ex-05.html#how-to-combine-multiple-plots-into-a-figure-exercise-17",
    "title": "R Bootcamp - Day 5",
    "section": "How to combine multiple plots into a figure? (Exercise 17)",
    "text": "How to combine multiple plots into a figure? (Exercise 17)\nWe have 4 legends - can they be condensed?\nYes, but it is not exactly straightforward.\nneed to scroll below"
  },
  {
    "objectID": "exercises/ex-05.html#saving-plots-exercise-18",
    "href": "exercises/ex-05.html#saving-plots-exercise-18",
    "title": "R Bootcamp - Day 5",
    "section": "Saving plots (Exercise 18)",
    "text": "Saving plots (Exercise 18)\nSaves last plot as 5’ x 5’ file named “plot_final.png” in working directory.\nMatches file type to file extension."
  },
  {
    "objectID": "exercises/ex-08.html",
    "href": "exercises/ex-08.html",
    "title": "Exercises 8",
    "section": "",
    "text": "Putting it all together\nFor the next two classes we’ll combine everything we’ve learned to process and visualize data from some some biological experiments. These exercises will illustrate a complete analysis pipeline – from data tidying to manipulation and visualization – using tools from the tidyverse.\n\nLibraries\nLoad the libraries you need for analysis below.\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3          ✔ readr     2.1.4     \n✔ forcats   1.0.0          ✔ stringr   1.5.0     \n✔ ggplot2   3.4.3          ✔ tibble    3.2.1     \n✔ lubridate 1.9.2          ✔ tidyr     1.3.0     \n✔ purrr     1.0.2.9000     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(here)\n\nhere() starts at /home/runner/work/molb-7950/molb-7950\n\nCodelibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\nA quantitative PCR experiment\nHere is the experimental setup:\n\nTwo cell lines (wt and mut) were treated with a drug that induces interferon expression\nAfter specific time points, cells were harvested and actin and interferon mRNA were analyzed by quantitative PCR (with 3 technical replicates), with a control containing no reverse transcriptase.\n\nLoad the data\nThese data are in two TSV files:\n\ndata/qpcr_names.tsv.gz\ndata/qpcr_data.tsv.gz\n\nLoad these data sets and inspect.\n\nCodeqpcr_names &lt;- read_tsv(here(\"data/qpcr_names.tsv.gz\"))\n\nRows: 8 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (13): row, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeqpcr_data &lt;- read_tsv(here(\"data/qpcr_data.tsv.gz\"))\n\nRows: 8 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr  (1): row\ndbl (12): 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNote the shape of the data and the names of the rows and columns. Do they remind you of anything?\n\nTidy the data\nGiven the experimental setup and the shape of the tibbles, you should be able to answer: Are these data tidy?\n\nWhat are the variables in the data?\nAre the variables the column names?\n\n\nCodeqpcr_data_long &lt;-\n  pivot_longer(qpcr_data, -row, names_to = \"col\")\n\nqpcr_names_long &lt;- \n  pivot_longer(qpcr_names, -row, names_to = \"col\") |&gt;\n  separate(\n    value,\n    into = c(\"gt\", \"time\", \"gene\", \"rt\", \"rep\"),\n    sep = \"_\"\n  )\n\n\nMerge the data\nNote the structure of the tidied data. What columns (variables) are shared by both tibbles?\nHow we can join the data from these two tibbles, linking the sample identifiers with their gene expression values?\n\nCodeqpcr_tidy &lt;-\n  left_join(qpcr_names_long, qpcr_data_long) |&gt;\n  # we don't need row & col anymore.\n  # the -RT samples are all 0, so we can drop those, too\n  filter(rt == \"+\") |&gt;\n  select(-(row:col), -rt)\n\nJoining with `by = join_by(row, col)`\n\n\nSummarize the data\nCalculate the mean and standard deviation across replicates.\nDo this two ways:\n\nCalculate the statistics for each gene separately.\nCalculate a ratio of interferon to actin levels for each sample before calculating the mean and standard deviation of the ratios.\n\n\nCodeqpcr_summary &lt;-\n  group_by(\n    qpcr_tidy,\n    gt, time, gene) |&gt;\n  summarize(\n    exp_mean = mean(value),\n    exp_sd = sd(value)\n  ) |&gt;\n  arrange(gt, time, gene)\n\n`summarise()` has grouped output by 'gt', 'time'. You can override using the\n`.groups` argument.\n\n\nPlot the data\nNow we can plot the summary statistics. We’ll use ggplot2::geom_pointrange() to represent the mean and standard deviation.\nYou’ll need to fill in the blanks (___) below.\n\nCodeggplot(\n  qpcr_summary,\n  aes(\n    x = ___,\n    y = ___,\n    color = ___\n  ),\n) +\n  geom_pointrange(\n    aes(\n      ymin = ___,\n      ymax = ___ \n    ),\n    # position = ___\n  )\n\n\nInspect the above plot. How might you improve it?\nCopy the above chunk and add functions that modify the plot’s look and feel.\n\nFacet the plot to see differences between the genotypes.\nUpdate the theme using cowplot.\nUpdate the x, y, and title labels (ggplot2::labs()).\nUpdate the colors with a nicer palette (ggplot2::scale_*).\nFix the position of the geoms by updating their position aesthetic.\nInterpret the plot\n\nWhat can you say about the expression of ACTIN and IFN?\nWhat can you say about the mutant and wild-type cells?"
  },
  {
    "objectID": "exercises/ex-10.html",
    "href": "exercises/ex-10.html",
    "title": "Stats Bootcamp - class 10",
    "section": "",
    "text": "Flip a coin 5 times with equal prob of H or T\nAgain\n. . .\nSet a seed\n\n# \n\n\n#"
  },
  {
    "objectID": "exercises/ex-10.html#lets-flip-a-fair-coin",
    "href": "exercises/ex-10.html#lets-flip-a-fair-coin",
    "title": "Stats Bootcamp - class 10",
    "section": "",
    "text": "Flip a coin 5 times with equal prob of H or T\nAgain\n. . .\nSet a seed\n\n# \n\n\n#"
  },
  {
    "objectID": "exercises/ex-10.html#lets-flip-an-unfair-coin",
    "href": "exercises/ex-10.html#lets-flip-an-unfair-coin",
    "title": "Stats Bootcamp - class 10",
    "section": "Let’s flip an unfair coin",
    "text": "Let’s flip an unfair coin\nFlip a coin 5 times with equal prob of H or T\nAgain"
  },
  {
    "objectID": "exercises/ex-10.html#lets-summarize-the-flipping-results",
    "href": "exercises/ex-10.html#lets-summarize-the-flipping-results",
    "title": "Stats Bootcamp - class 10",
    "section": "Let’s summarize the flipping results",
    "text": "Let’s summarize the flipping results\nFlip a fair coin 10\nFlip a fair coin 10 and calculate mean\nAgain\n. . .\nUnfair coin\nUnfair coin, again"
  },
  {
    "objectID": "exercises/ex-10.html#lets-go-wild-flipping",
    "href": "exercises/ex-10.html#lets-go-wild-flipping",
    "title": "Stats Bootcamp - class 10",
    "section": "Let’s go wild flipping",
    "text": "Let’s go wild flipping\nFlip a fair coin 10 times and calculate mean. Then do 5 rounds of that experiment.\n. . .\nSame thing for an unfair coin."
  },
  {
    "objectID": "exercises/ex-10.html#tidy-and-visualize-flips",
    "href": "exercises/ex-10.html#tidy-and-visualize-flips",
    "title": "Stats Bootcamp - class 10",
    "section": "Tidy and visualize flips",
    "text": "Tidy and visualize flips\nmake a dataframe with means and accompanying info\n. . .\nplot it"
  },
  {
    "objectID": "exercises/ex-10.html#play-around-some-more",
    "href": "exercises/ex-10.html#play-around-some-more",
    "title": "Stats Bootcamp - class 10",
    "section": "Play around some more",
    "text": "Play around some more"
  },
  {
    "objectID": "prepare/prepare-01.html",
    "href": "prepare/prepare-01.html",
    "title": "R Bootcamp",
    "section": "",
    "text": "Important\n\n\n\nBefore class begins, login with your CU credentials at Posit Cloud: https://sso.posit.cloud/cu-anschutz"
  },
  {
    "objectID": "prepare/prepare-01.html#prepare",
    "href": "prepare/prepare-01.html#prepare",
    "title": "R Bootcamp",
    "section": "Prepare",
    "text": "Prepare\n📖 Read the syllabus\n📖 Read the support resources\n📖 Look over the RStudio cheatsheet"
  },
  {
    "objectID": "problem-set-keys/ps-key-02.html",
    "href": "problem-set-keys/ps-key-02.html",
    "title": "Problem Set 2 Key",
    "section": "",
    "text": "library(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950"
  },
  {
    "objectID": "problem-set-keys/ps-key-02.html#problem-set",
    "href": "problem-set-keys/ps-key-02.html#problem-set",
    "title": "Problem Set 2 Key",
    "section": "Problem Set",
    "text": "Problem Set\nEach problem below is worth 4 points.\nUse the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Aug 30.\nGrading rubric\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-set-keys/ps-key-02.html#question-1",
    "href": "problem-set-keys/ps-key-02.html#question-1",
    "title": "Problem Set 2 Key",
    "section": "Question 1",
    "text": "Question 1\nImport the dataset data_transcript_exp_subset using the readr package.\nHint: The file is located at the following path data/data_transcript_exp_subset.csv.gz\n\nx &lt;- read_csv(here(\"data/data_transcript_exp_subset.csv.gz\"))\n\nRows: 100 Columns: 7\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): ensembl_transcript_id\ndbl (6): rna_0h_rep1, rna_0h_rep2, rna_0h_rep3, rna_14h_rep1, rna_14h_rep2, ...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "problem-set-keys/ps-key-02.html#question-2",
    "href": "problem-set-keys/ps-key-02.html#question-2",
    "title": "Problem Set 2 Key",
    "section": "Question 2",
    "text": "Question 2\nExplore the dataset. Is this dataset tidy? If not, why not?\nThis data frame is a subset (100 lines) of transcript-level gene expression data where transcript abundance was measured at two different time points of a certain treatment conducted in triplicates. The column names have the format of molecule_time_replicate\nFirst, explore the structure of the dataset using some of the functions we learned in class.\n\nx\n\n# A tibble: 100 x 7\n   ensembl_transcript_id        rna_0h_rep1 rna_0h_rep2 rna_0h_rep3 rna_14h_rep1\n   &lt;chr&gt;                              &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n 1 ENST00000327044.6_51_2298          243         322         303         177   \n 2 ENST00000338591.7_360_2034          19          17          15           9   \n 3 ENST00000379389.4_176_647           45          53          48          11   \n 4 ENST00000379370.6_1158_6186         42          50          52          32   \n 5 ENST00000379339.5_212_1352          17          19          25           3   \n 6 ENST00000263741.11_1328_1496        27.5        33.7        36.3        22.5 \n 7 ENST00000360001.10_285_1350        158         170.        171.        121   \n 8 ENST00000263741.11_315_1338        148.        162.        158.        116.  \n 9 ENST00000379198.3_138_1002          11          21          23           6   \n10 ENST00000347370.6_475_1096          27.3        23.8        28.5         7.33\n# i 90 more rows\n# i 2 more variables: rna_14h_rep2 &lt;dbl&gt;, rna_14h_rep3 &lt;dbl&gt;\n\nsummary(x)\n\n ensembl_transcript_id  rna_0h_rep1       rna_0h_rep2        rna_0h_rep3      \n Length:100            Min.   :   0.00   Min.   :    0.00   Min.   :    0.00  \n Class :character      1st Qu.:  10.70   1st Qu.:   11.88   1st Qu.:   11.12  \n Mode  :character      Median :  27.41   Median :   31.05   Median :   31.91  \n                       Mean   : 173.31   Mean   :  196.08   Mean   :  186.10  \n                       3rd Qu.:  87.08   3rd Qu.:  105.00   3rd Qu.:   88.33  \n                       Max.   :9802.00   Max.   :11144.00   Max.   :10619.00  \n  rna_14h_rep1       rna_14h_rep2       rna_14h_rep3     \n Min.   :   0.000   Min.   :   0.000   Min.   :   0.000  \n 1st Qu.:   3.875   1st Qu.:   3.962   1st Qu.:   5.000  \n Median :  10.435   Median :   9.665   Median :   9.665  \n Mean   : 102.875   Mean   :  93.370   Mean   : 111.515  \n 3rd Qu.:  41.000   3rd Qu.:  38.750   3rd Qu.:  48.750  \n Max.   :5292.000   Max.   :5090.000   Max.   :6012.000  \n\nglimpse(x)\n\nRows: 100\nColumns: 7\n$ ensembl_transcript_id &lt;chr&gt; \"ENST00000327044.6_51_2298\", \"ENST00000338591.7_~\n$ rna_0h_rep1           &lt;dbl&gt; 243.00, 19.00, 45.00, 42.00, 17.00, 27.50, 158.0~\n$ rna_0h_rep2           &lt;dbl&gt; 322.00, 17.00, 53.00, 50.00, 19.00, 33.67, 169.6~\n$ rna_0h_rep3           &lt;dbl&gt; 303.00, 15.00, 48.00, 52.00, 25.00, 36.33, 171.3~\n$ rna_14h_rep1          &lt;dbl&gt; 177.00, 9.00, 11.00, 32.00, 3.00, 22.50, 121.00,~\n$ rna_14h_rep2          &lt;dbl&gt; 177.00, 5.00, 5.00, 31.00, 0.00, 29.17, 124.17, ~\n$ rna_14h_rep3          &lt;dbl&gt; 239.00, 8.00, 14.00, 30.00, 2.00, 27.33, 155.33,~\n\n\nComment on whether this dataset is tidy, and if not, list the reasons why. Hint: In a tidy dataframe, every column represents a single variable and every row represents a single observation\nAnswer\nIt is not tidy because the time points and replicates are not in their own columns."
  },
  {
    "objectID": "problem-set-keys/ps-key-02.html#question-3",
    "href": "problem-set-keys/ps-key-02.html#question-3",
    "title": "Problem Set 2 Key",
    "section": "Question 3",
    "text": "Question 3\nHow will you reshape the data frame so that each row has only one experimental observation?\nHint: Use pivot_longer()\n\nx |&gt; pivot_longer(-ensembl_transcript_id)\n\n# A tibble: 600 x 3\n   ensembl_transcript_id      name         value\n   &lt;chr&gt;                      &lt;chr&gt;        &lt;dbl&gt;\n 1 ENST00000327044.6_51_2298  rna_0h_rep1    243\n 2 ENST00000327044.6_51_2298  rna_0h_rep2    322\n 3 ENST00000327044.6_51_2298  rna_0h_rep3    303\n 4 ENST00000327044.6_51_2298  rna_14h_rep1   177\n 5 ENST00000327044.6_51_2298  rna_14h_rep2   177\n 6 ENST00000327044.6_51_2298  rna_14h_rep3   239\n 7 ENST00000338591.7_360_2034 rna_0h_rep1     19\n 8 ENST00000338591.7_360_2034 rna_0h_rep2     17\n 9 ENST00000338591.7_360_2034 rna_0h_rep3     15\n10 ENST00000338591.7_360_2034 rna_14h_rep1     9\n# i 590 more rows\n\n\nQuestion 4\nHow will you modify the dataframe so that multiple variables are not present in a single column?\nHint: Use separate()\n\nx_tidy &lt;- x |&gt;\n  pivot_longer(-ensembl_transcript_id) |&gt;\n  separate(name, into = c(\"mol\", \"time\", \"rep\"), sep = \"_\")\n\nx_tidy\n\n# A tibble: 600 x 5\n   ensembl_transcript_id      mol   time  rep   value\n   &lt;chr&gt;                      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt;\n 1 ENST00000327044.6_51_2298  rna   0h    rep1    243\n 2 ENST00000327044.6_51_2298  rna   0h    rep2    322\n 3 ENST00000327044.6_51_2298  rna   0h    rep3    303\n 4 ENST00000327044.6_51_2298  rna   14h   rep1    177\n 5 ENST00000327044.6_51_2298  rna   14h   rep2    177\n 6 ENST00000327044.6_51_2298  rna   14h   rep3    239\n 7 ENST00000338591.7_360_2034 rna   0h    rep1     19\n 8 ENST00000338591.7_360_2034 rna   0h    rep2     17\n 9 ENST00000338591.7_360_2034 rna   0h    rep3     15\n10 ENST00000338591.7_360_2034 rna   14h   rep1      9\n# i 590 more rows\n\n\nQuestion 5\nHow will you save your output as a TSV file?\nHint: Use the readr cheatsheet to figure this out.\nhttps://rstudio.cloud/learn/cheat-sheets\n\nwrite_csv(x_tidy, \"transcripts.tidy.csv\")"
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html",
    "href": "problem-set-keys/ps-key-04.html",
    "title": "R Bootcamp Problem Set 4",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#problem-set",
    "href": "problem-set-keys/ps-key-04.html#problem-set",
    "title": "R Bootcamp Problem Set 4",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#grading-rubric",
    "href": "problem-set-keys/ps-key-04.html#grading-rubric",
    "title": "R Bootcamp Problem Set 4",
    "section": "Grading rubric",
    "text": "Grading rubric\n\nEverything is good: full points\nPartially correct answer: depends on how many steps are correct\nReasonable attempt: half points"
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#question-1-5-points",
    "href": "problem-set-keys/ps-key-04.html#question-1-5-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 1 5 points\n",
    "text": "Question 1 5 points\n\n\nLoad the tidyverse and here packages.\n\nImport datasets: data/data_rna_protein.csv.gz.\n\ndata_rna_protein.csv.gz: This is a combined dataset from an RNAseq and SILAC proteomics experiment, where a transcription factor (TF) was differentially expressed and the fold change in RNA and protein calculated between TF-expressing and non-expressing cells.\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n\nexp_tbl &lt;- read_csv(\n  here(\"problem-sets/data/data_rna_protein.csv.gz\")\n)\n\nRows: 21282 Columns: 17\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (1): geneid\ndbl (16): iDUX4_logFC, iDUX4_logCPM, iDUX4_LR, iDUX4_pval, iDUX4_fdr, hl.rat...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#question-2-5-points",
    "href": "problem-set-keys/ps-key-04.html#question-2-5-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 2 5 points\n",
    "text": "Question 2 5 points\n\nUsing the imported data set, carry out the following:\n\nInspect the data so you know what you are dealing with (summary() etc).\nSelect only the following columns: geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, and pval.\nRename them as follows: rna_FC = iDUX4_logFC, rna_pval = iDUX4_fdr, protein_FC = hl.ratio, protein_pval = pval (hint: use dplyr::rename())\nDrop all rows with NA values in them (hint: use a function from tidyr)\nRemove duplicate rows (hint: use dplyr::distinct()).\nArrange the table by descending rna_FC and ascending protein_FC.\nConduct steps 2-7 by piping the output of one step to another (i.e, a single workflow & remember to comment).\nSave the output of this workflow into a new object.\n\n\nexp_tbl_subset &lt;- exp_tbl |&gt;\n  select(geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, pval) |&gt;\n  rename(\n    rna_FC = iDUX4_logFC,\n    rna_pval = iDUX4_fdr,\n    protein_FC = hl.ratio,\n    protein_pval = pval\n  ) |&gt;\n  drop_na() |&gt;\n  distinct() |&gt;\n  arrange(desc(rna_FC), protein_FC)"
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#question-3-5-points",
    "href": "problem-set-keys/ps-key-04.html#question-3-5-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 3 5 points\n",
    "text": "Question 3 5 points\n\nHow well do the overall rna_FC and protein_FC values correlate in this experiment?\nUsing the output from the above question, do the following:\n\nCreate a scatter plot of rna_FC vs protein_FC. observe how the points scatter.\nAdd a line to the plot that would indicate perfect 1:1 correlation. Hint: use geom_abline() with its slope argument.\nAdd a linear model fit using geom_smooth() (method = 'lm'). Observe how the x=y line deviates from your geom_smooth line.\nCalculate the Spearman correlation coefficient. (Hint: This uses a base R math function called cor - Use help() or Google to learn more and how to specify method as spearman)\nUsing all of the information from above, comment on the correlation between rna_FC and protein_FC below.\n\n\nggplot(exp_tbl_subset, aes(rna_FC, protein_FC)) +\n  geom_point() +\n  geom_abline(linewidth = 1, color = \"green\") +\n  geom_smooth(method = \"lm\", se = FALSE, linewidth = 1)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nrna_prot_cor &lt;- cor(\n  exp_tbl_subset$rna_FC,\n  exp_tbl_subset$protein_FC,\n  method = \"spearman\"\n)\n\nAnswer\nThe green line indicates a perfect correlation, and the blue line is the linear model fit of the data. The Spearman correlation is 0.346, indicating a strong positive correlation. One way to think about this is that there are 0.346 proteins made per mRNA."
  },
  {
    "objectID": "problem-set-keys/ps-key-04.html#submit",
    "href": "problem-set-keys/ps-key-04.html#submit",
    "title": "R Bootcamp Problem Set 4",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html",
    "href": "problem-set-keys/ps-key-07.html",
    "title": "R Bootcamp Problem Set 6",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#problem-set",
    "href": "problem-set-keys/ps-key-07.html#problem-set",
    "title": "R Bootcamp Problem Set 6",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#grading-rubric",
    "href": "problem-set-keys/ps-key-07.html#grading-rubric",
    "title": "R Bootcamp Problem Set 6",
    "section": "Grading rubric",
    "text": "Grading rubric\n\nEverything is good: full points\nPartially correct answer: depends on how many steps are correct\nReasonable attempt: half points"
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#libraries",
    "href": "problem-set-keys/ps-key-07.html#libraries",
    "title": "R Bootcamp Problem Set 6",
    "section": "Libraries",
    "text": "Libraries\nLoad the libraries you need for analysis below.\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#question-1---5-points",
    "href": "problem-set-keys/ps-key-07.html#question-1---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 1 - 5 points\n",
    "text": "Question 1 - 5 points\n\nRun the following chunk:\n\nset.seed(42)\nx &lt;- sample(1000, replace = TRUE)\n\nNow use logical indexing to find the number of values &gt; 450 in x.\n\n# either are correct\nsum(x &gt; 450)\n\n[1] 566\n\nlength(x[x &gt; 450])\n\n[1] 566"
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#question-2---5-points",
    "href": "problem-set-keys/ps-key-07.html#question-2---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 2 - 5 points\n",
    "text": "Question 2 - 5 points\n\nCount the number of species in the penguins tibble using forcats::fct_count()\nCount number of island + sex combinations using dplyr::count(), and sort the result by count.\n\nforcats::fct_count(penguins$island)\n\n# A tibble: 3 x 2\n  f             n\n  &lt;fct&gt;     &lt;int&gt;\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n\n\n\ndplyr::count(penguins, island, sex, sort = TRUE)\n\n# A tibble: 9 x 3\n  island    sex        n\n  &lt;fct&gt;     &lt;fct&gt;  &lt;int&gt;\n1 Biscoe    male      83\n2 Biscoe    female    80\n3 Dream     male      62\n4 Dream     female    61\n5 Torgersen female    24\n6 Torgersen male      23\n7 Biscoe    &lt;NA&gt;       5\n8 Torgersen &lt;NA&gt;       5\n9 Dream     &lt;NA&gt;       1"
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#question-3---5-points",
    "href": "problem-set-keys/ps-key-07.html#question-3---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 3 - 5 points\n",
    "text": "Question 3 - 5 points\n\nUse stringr::str_c() to combine upper and lowercase letters from letters and LETTERS with a slash.\nYour answer should look like: \"A/a\" \"B/b\" \"C/c\" etc.\n\ncombined &lt;- str_c(LETTERS, '/', letters)\n\nUse stringr::str_split() or one of its variants to split up the strings you made above and extract the letter after the slash.\n\nstr_split_i(combined, '/', 2)\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nstr_split(combined, '/') |&gt; purrr::map(2) |&gt; unlist()\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\""
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#question-4---5-points",
    "href": "problem-set-keys/ps-key-07.html#question-4---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 4 - 5 points\n",
    "text": "Question 4 - 5 points\n\nCreate a ggplot using the diamonds data set.\n\nGenerate a ggridges::geom_density_ridges() for the prices, with a different fill color for each cut.\nRecolor the densities using ggplot2::scale_fill_brewer(), choosing a specific palette.\nmake the outline of the densities black, and change their alpha to 0.2.\nchange the theme to cowplot::theme_minimal_grid()\n\nremove the legend (google: “remove legend from ggplot2”)\nadd an informative title and subtitle using ggplot2::labs().\n\n\nlibrary(ggridges)\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nggplot(\n  diamonds,\n  aes(\n    x = price,\n    y = cut,\n    fill = cut\n  )\n) +\n  geom_density_ridges(color = 'black', alpha = 0.2) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal_grid() +\n  theme(legend.position = 'none')\n\nPicking joint bandwidth of 458"
  },
  {
    "objectID": "problem-set-keys/ps-key-07.html#submit",
    "href": "problem-set-keys/ps-key-07.html#submit",
    "title": "R Bootcamp Problem Set 6",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "problem-sets/ps-02.html",
    "href": "problem-sets/ps-02.html",
    "title": "R Bootcamp Problem Set 2",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package."
  },
  {
    "objectID": "problem-sets/ps-02.html#setup",
    "href": "problem-sets/ps-02.html#setup",
    "title": "R Bootcamp Problem Set 2",
    "section": "",
    "text": "Start by loading libraries you need analysis in the code chunk below. When in doubt, start by loading the tidyverse package."
  },
  {
    "objectID": "problem-sets/ps-02.html#problem-set",
    "href": "problem-sets/ps-02.html#problem-set",
    "title": "R Bootcamp Problem Set 2",
    "section": "Problem Set",
    "text": "Problem Set\nEach problem below is worth 4 points.\nUse the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Aug 30.\nGrading rubric\n\nEverything is good: 5 points\nPartially correct answers: 3-4 points\nReasonable attempt: 2 points"
  },
  {
    "objectID": "problem-sets/ps-02.html#question-1",
    "href": "problem-sets/ps-02.html#question-1",
    "title": "R Bootcamp Problem Set 2",
    "section": "Question 1",
    "text": "Question 1\nImport the data set data_transcript_exp_subset using the readr package, and assign it to a variable called exp_tbl.\nThe file is located at the following path data/data_transcript_exp_subset.csv.gz"
  },
  {
    "objectID": "problem-sets/ps-02.html#question-2",
    "href": "problem-sets/ps-02.html#question-2",
    "title": "R Bootcamp Problem Set 2",
    "section": "Question 2",
    "text": "Question 2\nThis data frame is a subset (100 lines) of transcript-level gene expression data where transcript abundance was measured at two different time points of a certain treatment conducted in triplicates.\nThe column names have the format of molecule_time_replicate\nFirst, explore the structure of the data set using some of the functions we learned in class (e.g., summary())\nComment on whether this data set is tidy, and if not, list the reasons why. Remember: in tidy data, every column represents a single variable and every row represents a single observation\nAnswer below"
  },
  {
    "objectID": "problem-sets/ps-02.html#question-3",
    "href": "problem-sets/ps-02.html#question-3",
    "title": "R Bootcamp Problem Set 2",
    "section": "Question 3",
    "text": "Question 3\nHow will you reshape the data frame so that each row has only one experimental observation?\nHint: Use pivot_longer()"
  },
  {
    "objectID": "problem-sets/ps-02.html#question-4",
    "href": "problem-sets/ps-02.html#question-4",
    "title": "R Bootcamp Problem Set 2",
    "section": "Question 4",
    "text": "Question 4\nHow will you modify the dataframe so that multiple variables are not present in a single column?\nHint: Use separate()"
  },
  {
    "objectID": "problem-sets/ps-02.html#question-5",
    "href": "problem-sets/ps-02.html#question-5",
    "title": "R Bootcamp Problem Set 2",
    "section": "Question 5",
    "text": "Question 5\nHow will you save your output as a TSV file?\nHint: Use the readr cheatsheet to figure this out.\nhttps://rstudio.cloud/learn/cheat-sheets"
  },
  {
    "objectID": "problem-sets/ps-04.html",
    "href": "problem-sets/ps-04.html",
    "title": "R Bootcamp Problem Set 4",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-sets/ps-04.html#problem-set",
    "href": "problem-sets/ps-04.html#problem-set",
    "title": "R Bootcamp Problem Set 4",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-sets/ps-04.html#grading-rubric",
    "href": "problem-sets/ps-04.html#grading-rubric",
    "title": "R Bootcamp Problem Set 4",
    "section": "Grading rubric",
    "text": "Grading rubric\n\nEverything is good: full points\nPartially correct answer: depends on how many steps are correct\nReasonable attempt: half points"
  },
  {
    "objectID": "problem-sets/ps-04.html#question-1-2-points",
    "href": "problem-sets/ps-04.html#question-1-2-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 1 2 points\n",
    "text": "Question 1 2 points\n\n\nLoad the tidyverse and here packages.\n\nImport datasets: data/data_rna_protein.csv.gz.\n\ndata_rna_protein.csv.gz: This is a combined dataset from an RNAseq and SILAC proteomics experiment, where a transcription factor (TF) was differentially expressed and the fold change in RNA and protein calculated between TF-expressing and non-expressing cells."
  },
  {
    "objectID": "problem-sets/ps-04.html#question-2-9-points",
    "href": "problem-sets/ps-04.html#question-2-9-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 2 9 points\n",
    "text": "Question 2 9 points\n\nUsing the imported data set, carry out the following:\n\nInspect the data so you know what you are dealing with (summary() etc).\nSelect only the following columns: geneid, iDUX4_logFC, iDUX4_fdr, hl.ratio, and pval.\nRename them as follows: rna_FC = iDUX4_logFC, rna_pval = iDUX4_fdr, protein_FC = hl.ratio, protein_pval = pval (hint: use dplyr::rename())\nDrop all rows with NA values in them (hint: use a function from tidyr)\nRemove duplicate rows (hint: use dplyr::distinct()).\nArrange the table by descending rna_FC and ascending protein_FC.\nConduct steps 2-7 by piping the output of one step to another (i.e, a single workflow & remember to comment).\nSave the output of this workflow into a new object."
  },
  {
    "objectID": "problem-sets/ps-04.html#question-3-9-points",
    "href": "problem-sets/ps-04.html#question-3-9-points",
    "title": "R Bootcamp Problem Set 4",
    "section": "Question 3 9 points\n",
    "text": "Question 3 9 points\n\nHow well do the overall rna_FC and protein_FC values correlate in this experiment?\nUsing the output from Question 2, do the following:\n\nCreate a scatter plot of rna_FC vs protein_FC. observe how the points scatter.\nAdd a line to the plot that would indicate perfect 1:1 correlation. Hint: use geom_abline() with its slope argument.\nAdd a linear model fit using geom_smooth() using its method = 'lm' argument. Observe how the x=y line deviates from your geom_smooth line.\nCalculate the Spearman correlation coefficient. (Hint: This uses a base R math function called cor. Use ?cor or Google to learn more and how to specify method as spearman.\nUsing all of the information from above, comment on the correlation between rna_FC and protein_FC below.\n\nAnswer"
  },
  {
    "objectID": "problem-sets/ps-04.html#submit",
    "href": "problem-sets/ps-04.html#submit",
    "title": "R Bootcamp Problem Set 4",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "problem-sets/ps-07.html",
    "href": "problem-sets/ps-07.html",
    "title": "R Bootcamp Problem Set 6",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-sets/ps-07.html#problem-set",
    "href": "problem-sets/ps-07.html#problem-set",
    "title": "R Bootcamp Problem Set 6",
    "section": "",
    "text": "Use the data files in the data/ directory to answer the questions.\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\nThe problem set is due 12pm on Sept 1."
  },
  {
    "objectID": "problem-sets/ps-07.html#grading-rubric",
    "href": "problem-sets/ps-07.html#grading-rubric",
    "title": "R Bootcamp Problem Set 6",
    "section": "Grading rubric",
    "text": "Grading rubric\n\nEverything is good: full points\nPartially correct answer: depends on how many steps are correct\nReasonable attempt: half points"
  },
  {
    "objectID": "problem-sets/ps-07.html#libraries",
    "href": "problem-sets/ps-07.html#libraries",
    "title": "R Bootcamp Problem Set 6",
    "section": "Libraries",
    "text": "Libraries\nLoad the libraries you need for analysis below."
  },
  {
    "objectID": "problem-sets/ps-07.html#question-1---5-points",
    "href": "problem-sets/ps-07.html#question-1---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 1 - 5 points\n",
    "text": "Question 1 - 5 points\n\nRun the following chunk:\n\nset.seed(42)\nx &lt;- sample(1000, replace = TRUE)\n\nNow use logical indexing to find the number of values &gt; 450 in x."
  },
  {
    "objectID": "problem-sets/ps-07.html#question-2---5-points",
    "href": "problem-sets/ps-07.html#question-2---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 2 - 5 points\n",
    "text": "Question 2 - 5 points\n\nCount the number of species in the penguins tibble using forcats::fct_count()\nCount number of island + sex combinations using dplyr::count(), and sort the result by count."
  },
  {
    "objectID": "problem-sets/ps-07.html#question-3---5-points",
    "href": "problem-sets/ps-07.html#question-3---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 3 - 5 points\n",
    "text": "Question 3 - 5 points\n\nUse stringr::str_c() to combine upper and lowercase letters from letters and LETTERS with a slash.\nYour answer should look like: \"A/a\" \"B/b\" \"C/c\" etc.\nUse stringr::str_split() or one of its variants to split up the strings you made above and extract the letter after the slash."
  },
  {
    "objectID": "problem-sets/ps-07.html#question-4---5-points",
    "href": "problem-sets/ps-07.html#question-4---5-points",
    "title": "R Bootcamp Problem Set 6",
    "section": "Question 4 - 5 points\n",
    "text": "Question 4 - 5 points\n\nCreate a ggplot using the diamonds data set.\n\nGenerate a ggridges::geom_density_ridges() for the prices, with a different fill color for each cut.\nRecolor the densities using ggplot2::scale_fill_brewer(), choosing a specific palette.\nmake the outline of the densities black, and change their alpha to 0.2.\nchange the theme to cowplot::theme_minimal_grid()\n\nremove the legend (google: “remove legend from ggplot2”)\nadd an informative title and subtitle using ggplot2::labs()."
  },
  {
    "objectID": "problem-sets/ps-07.html#submit",
    "href": "problem-sets/ps-07.html#submit",
    "title": "R Bootcamp Problem Set 6",
    "section": "Submit",
    "text": "Submit\nBe sure to click the “Render” button to render the HTML output.\nThen paste the URL of this Posit Cloud project into the problem set on Canvas."
  },
  {
    "objectID": "resources/bootcamp-resources.html",
    "href": "resources/bootcamp-resources.html",
    "title": "Bootcamp resources",
    "section": "",
    "text": "Installing R\nInstalling RStudio\n\n\n\n\n\nAdvanced R\nComputational Genomics with R\nR for Data Science (R4DS)\nFundamentals of Data Visualization\n\nQuick reference:\n\nData tidying\nYour labels are too small.. Use cowplot themes to automatically adjust.\n\n\n\n\n\nThe Tidyverse is a collection of libaries implementing a principled approach to data analysis.\nBioconductor is a collection of libraries focused on biological data analysis.\nggplot2\ncowplot\nggthemes\n\n\n\n\nThe tidyverse cheat sheets are indispensible references.\nQuick reference:\n\nRStudio\nRmarkdown\ntidyr\ndplyr\nggplot2"
  },
  {
    "objectID": "resources/bootcamp-resources.html#r-rstudio",
    "href": "resources/bootcamp-resources.html#r-rstudio",
    "title": "Bootcamp resources",
    "section": "",
    "text": "Installing R\nInstalling RStudio\n\n\n\n\n\nAdvanced R\nComputational Genomics with R\nR for Data Science (R4DS)\nFundamentals of Data Visualization\n\nQuick reference:\n\nData tidying\nYour labels are too small.. Use cowplot themes to automatically adjust.\n\n\n\n\n\nThe Tidyverse is a collection of libaries implementing a principled approach to data analysis.\nBioconductor is a collection of libraries focused on biological data analysis.\nggplot2\ncowplot\nggthemes\n\n\n\n\nThe tidyverse cheat sheets are indispensible references.\nQuick reference:\n\nRStudio\nRmarkdown\ntidyr\ndplyr\nggplot2"
  },
  {
    "objectID": "resources/bootcamp-resources.html#statistics",
    "href": "resources/bootcamp-resources.html#statistics",
    "title": "Bootcamp resources",
    "section": "Statistics",
    "text": "Statistics\n\nPractical Statistics for Data Scientists covers several fundamental concepts with code for both R and Python.\nModern Statistics for Modern Biology is written by two leading figures in computational biology and contains several examples using Bioconductor.\nStatistics for Biologists is a collection of articles on statistical topic."
  },
  {
    "objectID": "resources/bootcamp-resources.html#miscellaneous",
    "href": "resources/bootcamp-resources.html#miscellaneous",
    "title": "Bootcamp resources",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nOrganizing projects\nHappy Git with R"
  }
]