---
title: "Chromatin accessibility II"
author: "Jay Hesselberth"
---

## Genomewide chromatin analysis with meta-plots and heatmaps

Last class we saw that a small region of a chromosome can tell us a lot about
chromatin structure and the different methods to profile chromatin
accessibility.

We also want to make sure these conclusions are valid throughout the genome.

Since we want to keep the file sizes small, we will ask if they are valid across
an entire chromosome.

### Load libraries

First we will plot the profiles of all our data sets relative to the
transcription start site (TSS), where all the action seems to be happening:

```{r}
#| label: load-libs
library(tidyverse)
library(valr)
library(here)

# `glue` is a handy library for plot annotations
library(glue)
```

### Load data

First, we need to load relevant files:

-   `yeast_tss_chrII.bed.gz` contains transcription start sites (TSS) for genes on yeast chromosome 2.
-   `sacCer3.chrom.sizes` contains the sizes of all yeast chromosomes, needed for some of the calculations we'll do.

```{r}
#| label: load-data
yeast_tss <- read_bed(
  here("data/block-dna/yeast_tss_chrII.bed.gz"),
  n_fields = 6
)

genome <- read_genome("https://hgdownload.soe.ucsc.edu/goldenPath/sacCer3/bigZips/sacCer3.chrom.sizes")
```

### Load signals

Next we'll load bigWigs for the ATAC and MNase experiments, containing either short or long fragments.

Recall that the information encoded by short an long fragments should be reflected in our interpretations.

```{r}
acc_tbl <-
  tibble(
    file_name = c(
      "yeast_mnase_lt50.bw",
      "yeast_mnase_134_160.bw",
      "yeast_atac_lt120.bw",
      "yeast_atac_gt120.bw"
    ),
    sample_type = c(
      "MNase_Short", "MNase_Long",
      "ATAC_Short", "ATAC_Long"
    )
  ) |>
  mutate(
    file_path = here("data/block-dna", file_name),
    big_wig = purrr::map(
      file_path, ~ read_bigwig(.x)
    )
  ) |>
  select(sample_type, big_wig)
```

### Setting up regions for a meta-plot

Next, we need to set up some windows for analyzing signal relative to each TSS.
This is an important step that will ultimately impact our interpretations.

In genomic meta-plots, you first decide on a window size relevant to the you are
measuring, and then make "windows" around a reference point, spanning some
distance both up- and downstream. If the features involve gene characteristics,
we also need to take strand into account.

Reference points could be:

- transcription start or end sites
- boundaries of exons and introns
- known enhancers
- centromeres and telomeres

The state of genome annotation directly influences the quality of the meta-plot
or heatmap.

For small features like transcription factor binding sites (8-20 bp), you might
set up smaller windows (maybe 1 bp) at a distance \~20 bp up- and downstream of
a reference point.

For larger features like nucleosome positions or chromatin domains, you might
set up larger windows (\~200 bp) at distances up to \~10 kbp up- and downstream
of a reference set.

### Chromatin accessibility around transcription start sites (TSSs)

```{r}
#| label: create-tss-coords
region_size_total <- 1500
region_size_half <- region_size_total / 2
win_size <- 10

win_coords <- seq(
  -region_size_half,
  region_size_half,
  win_size
)
```

Next, we'll use two functions from valr that expand the window of the reference
point (`bed_slop()`) and then break those windows into evenly spaced segments
(`bed_makewindows()`), assigning a unique ID to each.

```{r}
#| label: create-tss-windows
tss_win_tbl <-
  yeast_tss |>
  bed_slop(genome, both = side_size) |>
  bed_makewindows(win_size = win_size) |>
  mutate(
    win_coord = case_when(
      strand == "-" ~ rev(win_coords), 
      .default = win_coords
    ),
    .by = name
  ) |>
  select(-.win_id, -score, -strand)
```

This next step uses the magic of another valr function, `bed_map()`, to
calculate a summary statistic for each window by intersecting with signals from
the bigWig files.

```{r}
#| label: map-signals
acc_tbl <-
  acc_tbl |>
  mutate(
    tss_win_sum = purrr::map(
      big_wig,
      ~ bed_map(
        tss_win_tbl,
        .x,
        win_signal = sum(score)
      )
    )
  )
```

Once we have the values from `bed_map()`, we can group by `win_coord` and
calculate a summary statistic for each window.

Remember that `win_coord` is the same relative position for each TSS, so these
numbers represent a composite signal a the same position across all TSS.

```{r}
#| label: calc-win-stats
tss_meta_tbl <-
  select(acc_tbl, sample_type, tss_win_sum) |>
  unnest(cols = c(tss_win_sum)) |>
  summarize(
    win_mean = mean(win_signal, na.rm = TRUE),
    win_sd = sd(win_signal, na.rm = TRUE),
    .by = c(win_coord, sample_type)
  ) |>
  replace_na(list(win_mean = 0, win_sd = 0))
```

## Meta-plot of signals around TSSs

Finally, let's plot the data relative to TSS for each of the windows.

```{r}
#| label: plot-meta-signals
n_tss <- length(unique(yeast_tss$name))

ggplot(
  tss_meta_tbl,
  aes(
    x = win_coord,
    y = win_mean
  )
) +
  geom_line(size = 1, color = "red") +
  facet_wrap(
    ~ sample_type,
    nrow = 2,
    scales = "free_y"
    ) +
  theme_minimal_grid() +
  theme(
    axis.text.x = element_text(
      angle = 45,
      vjust = 1,
      hjust = 1
    )
  ) +
  labs(
    x = "Position relative to TSS (bp)",
    y = "Signal (mean of window sums)",
    title = "Chromatin accessibility around transcription start sites",
    subtitle = glue("{n_tss} features on S. cerevisiae chrII")
  )
```

## Interpreting the meta-plots 

- What is the direction of transcription in these meta-plots?

- What are the features of chromatin near TSS measured by these different experimental conditions?

- How do you interpret the increased signal of the +1 nucleosome in the "MNase_Long" condition, relative to e.g. -1, +2, +3, etc.?

- What are the differences in ATAC and MNase treatments that lead to these distinctive patterns?

## Heatmap of signals around TSSs

To generate a heatmap, we need to reformat our data slightly.

Take a look at `acc_tbl` and think about how you might reorganize the following way:

- rows contain the data for individual loci (i.e., each TSS)
- columns are ordered positions relative to the TSS (i.e., most upstream to most downstream)

We're going to plot a heatmap of the "MNase_Long" data. There are two ways
to get these data.

```{r}
#| label: heatmap-data-base
mnase_tbl <- acc_tbl[acc_tbl$sample_type == "MNase_Short",]$tss_win_sum[[1]]
```

Or, using dplyr / tidyr:

```{r}
#| label: heatmap-data-tidy
#| eval: false
mnase_tbl <- filter(
  acc_tbl,
  sample_type == "MNase_Long"
  ) |>
  select(-big_wig) |>
  unnest(cols = c(tss_win_sum))
```

Either way, now we need to reformat the data.

```{r}
mnase_tbl_wide <-
  mnase_tbl |>
  select(
    name,
    win_coord,
    win_signal
    ) |>
  arrange(name, win_coord) |>
  replace_na(
    list(win_signal = 0)
    ) |>
  pivot_wider(
    id_cols = name,
    names_from = "win_coord",
    values_from = "win_signal"
  )
```

Once we have the data reformatted, we just convert to a matrix and feed it to
`ComplexHeatmap::Heatmap()`.

```{r}
#| label: heatmap-matrix-plot
mnase_mtx <-
  select(mnase_tbl_wide, -name) |>
  arrange(desc(`150`)) |>
  as.matrix()

ComplexHeatmap::Heatmap(
  mnase_mtx,
  cluster_columns = FALSE,
  show_row_dend = FALSE,
  show_column_names = FALSE,
  show_heatmap_legend = FALSE,
  width = 4,
  height = 8
)
```

## Interpreting meta-plots and heatmaps

It's worth considering what meta-plots and heatmaps *can* and *can't* tell you.

1.  What are the similarities and differences between heatmaps and meta-plots?

2.  What types of conclusions can you draw from each type of plot?

3.  What are some features of MNase-seq and ATAC-seq that become more clear when
looking across many loci at the same time?

4.  What are some hypotheses you can generate based on these plots?
