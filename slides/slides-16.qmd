---
title: "Mapping chromatin structure and transactions"
author: "Jay Hesselberth"
---

## Final Projects

Throughout the DNA and RNA blocks will refer to several data sets that might be good starting points for your final project (worth 20% of your grade).

We will ask for a sketch of the rough plan for a final project by the end of week 7 (Fri Oct 13). In addition, if you 
plan to work in a group, we'd like to know who you will be working with.

**Final projects will be due Friday Nov 3. We will schedule short (5 minute) talks by each group on Oct 30 and Nov 1.**

::: {.nonincremental}
- [Final project overview](https://rnabioco.github.io/molb-7950/course-info/final-projects.html)
- [DNA block resources](https://rnabioco.github.io/molb-7950/resources/block-dna-resources.html)
:::

## Gene regulation by chromatin

::: {layout-ncol=3 layout-valign="center"}
![Genome organization](../img/block-dna/ctcf.jpg)

![Cell signaling](../img/block-dna/promoter.png)

![Organism development](../img/block-dna/org-dev.jpg)
:::

## DNA accessibility drives all biochemical transactions on the genome

:::: {.columns}
::: {.column width="50%"}
-   Transcription Initiation
-   Transcription Elongation
-   DNA Repair
-   Initiation of DNA Replication
-   Recombination
-   Viral Integration
:::
::: {.column width="50%"}
![](../img/block-dna/domino.gif)
:::
::::

## Mapping & measurement are first steps toward understanding. {.smaller}

:::: {.columns}
::: {.column width="60%"}
Before genome-wide DNA accessibility measurements, we knew about chromatin transactions at only a handful of loci.

This was a classic "keys under the lamppost" situation, leading to general models of chromatin-based gene regulation.
:::

::: {.column width="40%"}
![](../img/block-dna/street-lamp.jpg){width="100%"}
:::
::::

::: aside
Photo by [Justus Menke](https://unsplash.com/@justusmenke?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/PvQtCNm4teI?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
:::

## Using micrococcal nuclease (MNase) to map chromatin {.smaller}

:::: {.columns}
::: {.column width="50%" .nonincremental}
-   Micrococcal nuclease is an endo/exonuclease from *Staphylococcus aureus*
-   Efficient, **multiple turnover** enzyme that digests accessible DNA (& RNA)
-   Dependent on calcium (Ca2+)
:::

::: {.column width="50%"}
![](../img/block-dna/mnase-overview.png){fig-align="center"}
:::
::::

## Using ATAC to map chromatin {.smaller}

:::: {.columns}
::: {.column width="50%" .nonincremental}
-   Tn5 transposase catalyzes "cut-and-paste" insertion of DNA into a target
-   In ATAC ("Assay for Transposase-Accessible Chromatin"), the transposase enzymes are loaded with DNA sequencing adaptors (blue and red in the image), so the products of transposition are ready to PCR.
-   **Single turnover enzyme** that acts on accessible DNA.
- Requires about ~60 bp of accessible for transposition.
:::

::: {.column width="50%"}
![](../img/block-dna/atac-explain.png){fig-align="center"}
:::
::::

## **Chromatin mapping experimental summary** {.smaller}

|                           |                     DNase-seq                     |                                                       ATAC-seq                                                        |             MNase-seq              |
|------------------|:----------------:|:----------------:|:-----------------:|
| **Genome representation** |                Most active regions                |                                                  Most active regions                                                  |            Whole genome            |
| **Ease of experiment**    |                  Very difficult                   |                                                      Easy peasy                                                       |           One day's work           |
| **What is profiled?**     | Accessible DNA, "footprints" at low cut frequency | Accessible DNA. Not really "footprints", single turnover enzyme, so fragments are not informative | Protections of TFs and nucleosomes |

# Experimental details

##

![](../img/block-dna/footprinting-exp-overview.png)

## 

![](../img/block-dna/atac-input-comparison.png)

# Analysis details

## Experimental workflow 

![](../img/block-dna/acc-workflow.png)

# Data structures and tools used for analysis of chromatin mapping experiments

## File formats 

### BED format {.smaller}

:::: {.columns}
::: {.column width="50%" .nonincremental}
- Contains information about genomic intervals. 
- Used to represent genomic features (exons, introns, transcription start sites)
- First 3 columns are: `chrom`, `start`, `end`
- Next 3 are: `name`, `score`, `strand`. Strand can be `+`, `-`, or `.` (no strand)
:::

::: {.column width="50%"}
```
chr7 127473530 127474697 Pos3 0  +
chr7 127474697 127475864 Pos4 0  +
chr7 127475864 127477031 Neg1 0  -
chr7 127477031 127478198 Neg2 0  -
```
:::
::::

---

### wig / bedGraph {.smaller}

- Used to store interval *signals*.

  * Genome sequencing coverage
  * Coverage of reads from MNase / ATAC-seq
  
- bigWig is a binary form of WIG, used to store large amounts of signal
in a compressed, indexed format.

- Many studies will provide genome-scale data in these formats

## Interval analysis {.smaller}

:::: {.columns}

::: {.column width="50%"}
The primary tool in the genome interval analysis is [BEDtools](https://bedtools.readthedocs.io/en/latest/) -- it's the 
Swiss-army knife of internal analysis. 

We wrote an R package called [valr](https://rnabioco.github.io/valr/) that provides the same tools, but you don't need to 
leave RStudio. valr contains tools for reading and manipulating genome intervals.

`bed_intersect()` is a fundamental operation. It identifies intervals from two tibbles that intersect and reports their overlaps.

Let's take a look at that it does.
:::

::: {.column width="50%"}
![](../img/block-dna/intersect-glyph.png)
:::

::::

## `bed_intersect()` example {.smaller}

```{r}
#| label: bed-intersect
#| echo: true
#| output-location: column
library(valr)
library(dplyr)

x <- tribble(
  ~chrom, ~start, ~end,
  "chr1", 25, 50,
  "chr1", 100, 125
)

y <- tribble(
  ~chrom, ~start, ~end,
  "chr1", 30,     75
)

bed_intersect(x, y)
```

## valr example

You can use `read_bed()` and related functions to load genome annotations and signals.

```{r}
#| label: valr-example
#| echo: true
library(valr)

snps <- read_bed(
  valr_example("hg19.snps147.chr22.bed.gz")
)

genes <- read_bed(
  valr_example("genes.hg19.chr22.bed.gz")
)
```

::: aside
We'll also use the valr functions `read_bedgraph()` and `read_bigwig()`.
:::

## What is in `snps` and `genes`? {.smaller}

```{r}
#| echo: true
#| output-location: column
head(snps)
```

```{r}
#| echo: true
#| output-location: column
head(genes)
```

## Interval manipulation {.smaller}

Let's find and characterize intergenic SNPs. We'll use the tools `bed_substract()` and `bed_closest()`. Take a look and their examples in the documentation to see what they do.

```{r}
#| label: valr-ints
#| echo: true
# find snps in intergenic regions
intergenic <- bed_subtract(snps, genes)

# find distance from intergenic snps to nearest gene
nearby <- bed_closest(intergenic, genes)
```

. . .

Take a look at the `intergenic` and `nearby` objects in the console.

## Interval manipulation {.smaller}

Now that you have overlaps and distances between SNPs and genes, you can 
go back to dplyr tools to generate reports.

```{r}
#| label: valr-dplyr
#| echo: true
#| output-location: column-fragment
library(dplyr)

nearby |>
  select(starts_with("name"), .overlap, .dist) |>
  filter(abs(.dist) < 5000)
```
