---
title: "R Bootcamp - Day 2"
author: "Jay Hesselberth"
date: last-modified
---

```{r include=FALSE}
library(tidyverse)
library(knitr)
library(here)
```

## Class 2 outline 

:::: {.columns}

::: {.column width="50%"}
* Become familiar with "tidyverse" suite of packages
* Introduce _readr_ (Exercise 1)
* Introduce _tidyr_ (Exercise 2)
* Tools for data exploration (Exercises 3-5)
:::

::: {.column width="50%"}
* Learn tidyr functions:
* pivot_wider (Exercise 6)
* pivot_longer (Exercise 7)
* separate (Exercise 8 & 9)
* unite (Exercise 10)
* handling missing values
:::

::::

# Tidyverse

## Tidyverse overview

* Tidyverse is an opinionated collection of R packages designed for data science. 
* All packages share an underlying design philosophy, grammar, and data structures.
* 25 packages, total (as of today) - we will focus mainly on tidyr, dplyr, and ggplot2

## Tidyverse workflow

```{r, echo = FALSE, out.width= '100%'}
knitr::include_graphics(here("img/tidy1.png"))
```

## What is tidy data?

>   "Tidy datasets are all alike but every messy dataset is messy in its own way."
>   
>   --- Hadley Wickham

```{r, echo = FALSE, out.width= '100%', fig.cap='Source: Rstudio cheatsheets'}
knitr::include_graphics(here("img/tidydata.png"))
```
# Tidying exercises

## Data import with readr 

```{r, echo = FALSE, out.width= '70%', fig.cap='Source: RStudio cheatsheets'}
knitr::include_graphics(here("img/readr.png"))
```

N.B. note the difference between `readr::read_csv()` and the built-in `read.csv()`. Use the former.

---

```{r, echo = FALSE, out.width= '80%', fig.cap='Source: RStudio cheatsheets'}
knitr::include_graphics(here("img/readr-args.png"))
```

## Data sets for tidying - Exercise 2

---

* In this class, we will use the datasets that come with the tidyr package to explore all the functions provided by tidyr.

* Explore the contents of tidyr package (Exercise #2)

* `table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. 

## Getting familiar with the data - Exercise 3

---

R provides many functions to examine features of a data object

  - `View()` - To open the table up in an excel-like interface - not recommended for large tables
  - `class()` - what kind of object is it (high-level)?
  - `typeof()` - what is the objectâ€™s data type (low-level)?
  - `is_tibble()` - use is.? to confirm data type
  - `str()` - what is the structure of the object?
  - `attributes()` - does it have any metadata?

* Let's explore `table1`

## Getting familiar with the data - Exercise 4

---

Some of the useful functions for data.frames / tibbles are as follows:  

- `head()` - shows first 6 rows  
- `tail()` - shows last 6 rows  
- `dim()` - returns the dimensions of data frame (i.e. number of rows and number of columns)  
- `nrow()` - number of rows  
- `ncol()` - number of columns  
- `names()` or `colnames()` - both show the names attribute for a data frame  
- `glimpse()`

# Exercise 5 -Getting familiar with data - _summary_, _hist_, & _table_

---

_summary_: A generic function used to produce result summaries of the results of various model fitting functions.

```{r}
#| echo: true
summary(table1) # summary of the whole table
summary(table1$cases) # summary of just one column of the table
```

---

_hist_: Takes in a vector of values and plots a histogram.

```{r fig.height= 4, fig.width= 4}
#| echo: true
hist(table1$cases) # summary of just one column of the table
```

---

_table_: Uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.

```{r}
#| echo: true
table(table2$year) # tally of one column
table(table2$year, table2$type) # two columns at a time
```

# Main verbs in tidyr

## Tidying data

The four verbs to keep in mind for reshaping data with `tidyr` are:  

  - `pivot_wider`  
  - `pivot_longer`  
  - `separate`  
  - `unite` 

There are other verbs as well - look at the `tidyr` cheatsheet!

## pivot_wider - syntax

`pivot_wider()` "widens" data, increasing the number of columns and decreasing the number of rows. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics(here("img/pivot_wider.png"))
```

---

```{r, eval=FALSE}
pivot_wider(
  data,
  names_from = name,
  values_from = value,
  ...
)
```

## pivot_wider - Exercise 6

What will the output look like?

```{r}
#| echo: true
#| output-location: slide
library(tidyr)

pivot_wider(
  table2,
  names_from = type,
  values_from = count
)
```

---

If you want to save the output, assign it to a new variable. This new variable
will appear in your Environment tab.

```{r}
#| echo: true
table2_tidy <- pivot_wider(
  table2,
  names_from = type,
  values_from = count
)

table2_tidy
```

## pivot_longer - syntax

`pivot_longer()` "lengthens" data, increasing the number of rows and decreasing the number of columns. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics(here("img/pivot_longer.png"))
```

---

```{r eval=FALSE}
pivot_longer(
  data,
  cols,
  names_to = "name",
  values_to = "value",
  ...
)
```

## pivot_longer - Exercise 7

What will the output look like?

```{r}
#| echo: true
#| output-location: slide
table4a
pivot_longer(table4a, 2:3, names_to = "year", values_to = "cases")
pivot_longer(table4a, -country, names_to = "year", values_to = "cases")

table4_tidy <- pivot_longer(table4a, -country, names_to = "year", values_to = "cases")
table4_tidy
```

## separate - yntax

Given either a regular expression or a vector of character positions, `separate()` turns a single character column into multiple columns.

```{r, echo = FALSE, out.width= '60%'}
knitr::include_graphics(here("img/separate.png"))
```

---

```{r eval=FALSE}
separate(
  data,
  col,
  into,
  sep = "[^[:alnum:]]+", #any sequence of non-alphanumeric values
  remove = TRUE, # default is to remove the original column
  convert = FALSE, # default is to not convert
  extra = "warn",
  fill = "warn",
  ...
)

```

## separate - Exercise 8

What will the output look like?

```{r}
#| echo: true
#| output-location: slide
table3
table3_tidy_1 <- separate(table3,
  rate,
  into = c("cases", "population"),
  sep = "/"
)
table3_tidy_1
```

## separate_rows - syntax

Given either a regular expression or a vector of character positions, `separate_rows()` turns a single character column into multiple rows. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics(here("img/separate_rows.png"))
```

---

```r
separate_rows(
  data, 
  ..., 
  sep = "[^[:alnum:].]+", 
  convert = FALSE)
```

### separate_rows - Exercise 9

```{r}
#| echo: true
#| output-location: slide
table3
table3_tidy_2 <- separate_rows(table3, rate, sep = "/")
table3_tidy_2
```

This is not a great example because in creating two rows, the case and population numbers are now mixed up and we have lost information. So always think about and be intentional to avoid information loss.  

### unite - Syntax

`unite()` combines multiple columns into a single column.

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics(here("img/unite.png"))
```

---

```r
unite(data, 
      col, 
      ..., #select columns to unite
      sep = "[^[:alnum:]]+", #any sequence of non-alphanumeric values
      remove = TRUE, #default is set to TRUE
      na.rm = FALSE) #default is set to FALSE
```

## unite - Exercise 10

```{r}
#| echo: true
#| output-location: slide
table6 <- read_csv(here("data/table6.csv"))

table6_tidy <- unite(table6, "new", century, year, sep = "")
table6_tidy
```

## Handling missing values

```{r, echo = FALSE, out.width= '100%', fig.cap='Source: Rstudio cheatsheets'}
knitr::include_graphics(here("img/missing-values.png"))
```
