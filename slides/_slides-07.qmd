---
title: "R Bootcamp - Day 5"
subtitle: "more dplyr"
author: "Jay Hesselberth"
---

```{r include=FALSE}
library(tidyverse)
library(knitr)
library(here)
```

## Class 5 outline 

* Combining tables with dplyr: join functions, binding columns/rows, etc. (Exercise 8)
* ... and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull` (Exercise 9)

## Combining tables

### Combine variables (i.e. columns)

  + `bind_cols()`
  + `left_join()`
  + `right_join()`
  + `inner_join()`
  + `full_join()`
 
. . .

### Combine cases (i.e. rows)

  + `bind_rows()`
  + `intersect()`
  + `setdiff()`
  + `union()`

---

```{r, echo = FALSE, out.width= '100%', fig.cap="Source: Rstudio cheatsheets"}
knitr::include_graphics(here("img/combining-tables.png"))
```

### Combine variables and cases - pasting tables together - Syntax

- `bind_cols()` to paste tables beside each other
- `bind_rows()` to paste tables below each other as they are. 

```r
bind_cols(data1, data2) # should have same number of rows
bind_rows(data1, data2) # should have same number of columns
```

## Combine variables - joining tables by a variable - Syntax

- `left_join()` to join matching values from the right dataset to the left dataset
- `right_join()` to join matching values from the left dataset to the right dataset
- `inner_join()` to only join matching values present in both datasets
- `full_join()` to join all values in both datasets

```r
left_join(data1, data2)
left_join(data1, data2, by = ...) # if multiple columns match
left_join(data1, data2, by = c("col1" = "col2")) # if the columns names that match are different
```

## Combine variables - joining tables by a variable - Exercise 8

```{r}
band_members |> left_join(band_instruments)
```


```{r}
band_members |> right_join(band_instruments)
```

```{r}
band_members |> inner_join(band_instruments)
```


```{r}
band_members |> full_join(band_instruments)
```

```{r}
band_members |> full_join(band_instruments2, by = c("name" = "artist"))
```

---

Joining tables is something you will do a LOT in genomic analysis.

* Things to watch out for :

  - explicitly state which variable to join by
  - make sure there aren't subtle difference between what you think of as "common" variables 
  - eg. Paul vs. Paul M; ENST79286869869 vs ENST79286869869.12

---

## Other dplyr verbs

There are many other dplyr verbs: `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull`

Check out the dplyr cheatsheet to learn more! 

## rename - Syntax

- `rename()` renames the variables in a table. Keeps all columns. `select()` can also do this, but with some caveats. 

```r
rename(data = ..., <colname>)
```

## rename - Exercise 9

```{r}
band_instruments2

rename(band_instruments2, name = artist)

select(band_instruments2, name = artist) # select drops the rest of the columns
select(band_instruments2, name = artist, everything()) # this fixes it, but one extra thing to remember
```
