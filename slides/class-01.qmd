---
title: "R Bootcamp - Day 1"
author: "Jay Hesselberth"
date: last-modified
---

```{r include=FALSE}
library(tidyverse)
library(knitr)
library(here)
```

## Learning Objectives for the R Bootcamp

-   Follow best coding practices (*class 1*)
-   Know the fundamentals of R programming (*class 1*)
-   Become familiar with "tidyverse" suite of packages
    -   tidyr: "Tidy" a messy dataset (*class 2*)
    -   dplyr: Transform data to derive new information (*class 3*)
    -   ggplot2: Visualize and communicate results (*class 4*)
-   Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)

## Today's class outline - *class 1*

-   Coding best practices
-   Review R basics
    -   R vs Rstudio (Exercises #1-2)
    -   Functions & Arguments (Exercises #3-4)
    -   Data types (Exercise #5)
    -   Data structures (Exercises #6-7)
    -   R Packages (Exercise #8)
-   Review Rmarkdown (Exercise #9)
-   Rstudio cheatsheets (Exercise #10)

## R vs Rstudio - Exercise 1

-   Look at Rstudio panels one at a time.
-   Environment, History, Console, Files, Plots, Packages, Help, etc.


## R as a calculator - Exercise 2

-   R can function like an advanced calculator

-   try simple math

```{r}
2 + 3 * 5 # Note the order of operations.
3 - 7 # value of 3-7
3 / 2 # Division
5^2 # 5 raised to the second power
# This is a comment line
```

- assign a numeric value to an object

```{r}
num <- 5^2 # we just created an "object" num
```

## Functions and arguments - Exercise 3

* Functions are fundamental building blocks of R
* Most functions take one or more arguments and transform an input object in a specific way. 
* Tab completion is your friend!

```{r}
log
?log
log(4)
log(4, base = 2)
```

## Writing a simple function - Exercise 4

```{r}
addtwo <- function(x) {
  num <- x + 2
  return(num)
}

addtwo(4)
```

```{r}
f <- function(x, y) {
  z <- 3 * x + 4 * y
  return(z)
}

f(2, 3)
```

## Data types

* There are many data types in R. 
* For this class, the most commonly used ones are **numeric**, **character**, and **logical**. 
* All these data types can be used to create vectors natively.

## Data types - Exercise 5
```{r}
typeof(4) # numeric data time
typeof("suja") # character data type
typeof(TRUE) # logical data type
typeof(as.character(TRUE)) # coercing one data type to another
```

## Data structures

* R has multiple data structures. 
* Most of the time you will deal with tabular data sets, you will manipulate them, take sub-sections of them. 
* It is essential to know what are the common data structures in R and how they can be used. 
* R deals with named data structures, this means you can give names to data structures and manipulate or operate on them using those names.

```{r, echo = FALSE, out.width= '100%'}
knitr::include_graphics(here("img/data-structures.png"))
```
Source: Devopedia

## Tibbles

* A __tibble__, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. 
* Tibbles are data.frames that are lazy and surly: they do less (i.e. they don't change variable names or types, and don't do partial matching) and complain more (e.g. when a variable does not exist). 
* This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced `print()` method which makes them easier to use with large datasets containing complex objects.

* `tibble()` does much less than `data.frame()`: 
    - it never changes the type of the inputs 
    - it never changes the names of variables
    - it never creates `row.names()`

## Vectors - Exercise 6

- Vectors are one of the core R data structures. 
- It is basically a list of elements of the same type (numeric,character or logical). 
- Later you will see that every column of a table will be represented as a vector. 
- R handles vectors easily and intuitively. 
- The operations on vectors will propagate to all the elements of the vectors.

Create the following vectors
```{r}
x <- c(1, 3, 2, 10, 5) # create a vector named x with 5 components
# `c` is for combine
# you could use '=' but I don't recommend it.
y <- 1:5 # create a vector of consecutive integers y
y + 2 # scalar addition
2 * y # scalar multiplication
y^2 # raise each component to the second power
2^y # raise 2 to the first through fifth power
y # y itself has not been unchanged
y <- y * 2 # here, y is changed
```

## Data frames - Exercise 7

- A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.). 
- A data frame can be constructed by data.frame() function, and a tibble using the `tibble()` function.
- For example, we illustrate how to construct a data frame from genomic intervals or coordinates.

Create a dataframe:

```{r}
# N.B.: these vectors are all the same length!
chr <- c("chr1", "chr1", "chr2", "chr2")
strand <- c("-", "-", "+", "+")
start <- c(200, 4000, 100, 400)
end <- c(250, 410, 200, 450)

df <- data.frame(chr, strand, start, end) # creating dataframe
df

tbl <- tibble(chr, strand, start, end) # creating a tibble
tbl
```

## R packages - Exercise 8

* An R package is a collection of code, data, documentation, and tests that is easily sharable
* A package often has a collection of custom functions that enable you to carry out a workflow. eg. DESeq for RNA-seq analysis
* The most popular places to get R packages from are CRAN, Bioconductor, and Github. 
* Once a package is installed, one still has to "load" them into the environment using a `library(<package>)` call. 

Let's do the following to explore R packages
* Look at the "Environment" panel in Rstudio
* Explore Global Environment
* Explore the contents of a package

## Rmarkdown Exercise - Exercise 9

* Rmarkdown is a fully reproducible authoring framework to create, collaborate, and communicate your work. 
* Rmarkdown supports a number of output formats including pdfs, word documents, slide shows, html, etc. 
* An Rmarkdown document is a plain text file with the extension `.Rmd` and contains the following basic components: 
    - An (optional) YAML header surrounded by ---s.
    - Chunks of R code surrounded by ```.
    - Text mixed with simple text formatting like # heading and _italics_.

Let's do the following to explore Rmarkdown documents
* Create a new .Rmd document
* `knit` the document to see the output

## Coding best practices

> "Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread." 
> --- Hadley Wickham

# File Names

## Filenames and suffixes

-   File names should be meaningful and end in `.R`, `.Rmd`, etc.
-   Avoid using special characters in file names - stick with numbers, letters, `-`, and `_`.
-   *Never* include spaces in file names!

```         
# Good  
fit_models.R  
utility_functions.Rmd

# Bad  
fit models.R  
tmp.r  
stuff.r  
```

## Filename prefixes

-   If files should be run in a particular order, prefix them with numbers.
-   If it seems likely you'll have more than 10 files, left pad with zero.
-   It looks nice (constant width) and sorts nicely.

```         
00_download.R  
01_explore.R  
...  
09_model.R  
10_visualize.R  
```

## Filename structure

-   Avoid capitalizing when not necessary.
-   If you want to include dates in your file name, use the ISO 8601 standard: `YYYY-MM-DD`
-   Use delimiters intentionally! (helps you to recover metadata easily from file names)
-   For example, "\_" to delimit fields; "-" to delimit words

```         
2019-02-15_class1_data-wrangling.Rmd
```

## Use `here` in RStudio projects

The [here](https://here.r-lib.org) library enables easy file referencing in project-oriented workflows.

```{r}
#| echo: true
library(here)

path <- here('slides/class-01.qmd')
path
```

## Organisation

-   Try to give a file a concise name that evokes its contents
-   One way to organize your files is by grouping them into `data`, `code`, `plots`, etc.
-   For example, in this class we often use the following structure:

```         
exercises
   - exercises-01.Rmd
   - data
   - ../img
   - setup
   ...
```

## Internal structure of code

Use commented lines of `-` and `=` to break up your code chunk into easily readable segments. Or better yet, make each "action" it's own chunk and give it a name.

```         
# Load data ---------------------------

# Plot data ---------------------------
```

