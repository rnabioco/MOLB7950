{
  "hash": "a36d7537cb658d327fade834957f0ec6",
  "result": {
    "markdown": "---\ntitle: \"Chromatin accessibility II\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n## Genomewide chromatin analysis with meta-plots and heatmaps\n\nLast class we saw that a small region of a chromosome can tell us a lot about\nchromatin structure and the different methods to profile chromatin\naccessibility.\n\nWe also want to make sure these conclusions are valid throughout the genome.\n\nSince we want to keep the file sizes small, we will ask if they are valid across\nan entire chromosome.\n\n### Load libraries\n\nFirst we will plot the profiles of all our data sets relative to the\ntranscription start site (TSS), where all the action seems to be happening:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n\n\n:::\n\n```{.r .cell-code}\n# `glue` is a handy library for plot annotations\nlibrary(glue)\n\nlibrary(valr)\nlibrary(ComplexHeatmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: grid\n========================================\nComplexHeatmap version 2.16.0\nBioconductor page: http://bioconductor.org/packages/ComplexHeatmap/\nGithub page: https://github.com/jokergoo/ComplexHeatmap\nDocumentation: http://jokergoo.github.io/ComplexHeatmap-reference\n\nIf you use it in published research, please cite either one:\n- Gu, Z. Complex Heatmap Visualization. iMeta 2022.\n- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional \n    genomic data. Bioinformatics 2016.\n\n\nThe new InteractiveComplexHeatmap package can directly export static \ncomplex heatmaps into an interactive Shiny app with zero effort. Have a try!\n\nThis message can be suppressed by:\n  suppressPackageStartupMessages(library(ComplexHeatmap))\n========================================\n```\n\n\n:::\n:::\n\n\n### Load data\n\nFirst, we need to load relevant files:\n\n-   `yeast_tss_chrII.bed.gz` contains transcription start sites (TSS) for genes on yeast chromosome 2.\n-   `sacCer3.chrom.sizes` contains the sizes of all yeast chromosomes, needed for some of the calculations we'll do.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyeast_tss <- read_bed(\n  here(\"data/block-dna/yeast_tss_chrII.bed.gz\"),\n  n_fields = 6\n)\n\ngenome <- read_genome(\"https://hgdownload.soe.ucsc.edu/goldenPath/sacCer3/bigZips/sacCer3.chrom.sizes\")\n```\n:::\n\n\n### Load signals\n\nNext we'll load bigWigs for the ATAC and MNase experiments, containing either short or long fragments.\n\nRecall that the information encoded by short an long fragments should be reflected in our interpretations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_tbl <-\n  tibble(\n    file_name = c(\n      \"yeast_mnase_lt50.bw\",\n      \"yeast_mnase_134_160.bw\",\n      \"yeast_atac_lt120.bw\",\n      \"yeast_atac_gt120.bw\"\n    ),\n    sample_type = c(\n      \"MNase_Short\", \"MNase_Long\",\n      \"ATAC_Short\", \"ATAC_Long\"\n    )\n  ) |>\n  mutate(\n    file_path = here(\"data/block-dna\", file_name),\n    big_wig = purrr::map(\n      file_path, ~ read_bigwig(.x)\n    )\n  ) |>\n  select(sample_type, big_wig)\n```\n:::\n\n\n### Setting up regions for a meta-plot\n\nNext, we need to set up some windows for analyzing signal relative to each TSS.\nThis is an important step that will ultimately impact our interpretations.\n\nIn genomic meta-plots, you first decide on a window size relevant to the you are\nmeasuring, and then make \"windows\" around a reference point, spanning some\ndistance both up- and downstream. If the features involve gene characteristics,\nwe also need to take strand into account.\n\nReference points could be:\n\n- transcription start or end sites\n- boundaries of exons and introns\n- known enhancers\n- centromeres and telomeres\n\nThe state of genome annotation directly influences the quality of the meta-plot\nor heatmap.\n\nFor small features like transcription factor binding sites (8-20 bp), you might\nset up smaller windows (maybe 1 bp) at a distance \\~20 bp up- and downstream of\na reference point.\n\nFor larger features like nucleosome positions or chromatin domains, you might\nset up larger windows (\\~200 bp) at distances up to \\~10 kbp up- and downstream\nof a reference set.\n\n### Chromatin accessibility around transcription start sites (TSSs)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregion_size_total <- 1500\nregion_size_half <- region_size_total / 2\nwin_size <- 10\n\nwin_coords <- seq(\n  -region_size_half,\n  region_size_half,\n  win_size\n)\n```\n:::\n\n\nNext, we'll use two functions from valr that expand the window of the reference\npoint (`bed_slop()`) and then break those windows into evenly spaced segments\n(`bed_makewindows()`), assigning a unique ID to each.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntss_win_tbl <-\n  yeast_tss |>\n  bed_slop(genome, both = region_size_half) |>\n  bed_makewindows(win_size = win_size) |>\n  mutate(\n    win_coord = case_when(\n      strand == \"-\" ~ rev(win_coords), \n      .default = win_coords\n    ),\n    .by = name\n  ) |>\n  select(-.win_id, -score, -strand)\n```\n:::\n\n\nThis next step uses the magic of another valr function, `bed_map()`, to\ncalculate a summary statistic for each window by intersecting with signals from\nthe bigWig files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_tbl <-\n  acc_tbl |>\n  mutate(\n    tss_win_sum = purrr::map(\n      big_wig,\n      ~ bed_map(\n        tss_win_tbl,\n        .x,\n        win_signal = sum(score)\n      )\n    )\n  )\n```\n:::\n\n\nOnce we have the values from `bed_map()`, we can group by `win_coord` and\ncalculate a summary statistic for each window.\n\nRemember that `win_coord` is the same relative position for each TSS, so these\nnumbers represent a composite signal a the same position across all TSS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntss_meta_tbl <-\n  select(acc_tbl, sample_type, tss_win_sum) |>\n  unnest(cols = c(tss_win_sum)) |>\n  summarize(\n    win_mean = mean(win_signal, na.rm = TRUE),\n    win_sd = sd(win_signal, na.rm = TRUE),\n    .by = c(win_coord, sample_type)\n  ) |>\n  replace_na(list(win_mean = 0, win_sd = 0))\n```\n:::\n\n\n## Meta-plot of signals around TSSs\n\nFinally, let's plot the data relative to TSS for each of the windows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_tss <- length(unique(yeast_tss$name))\n\nggplot(\n  tss_meta_tbl,\n  aes(\n    x = win_coord,\n    y = win_mean\n  )\n) +\n  geom_line(size = 1, color = \"red\") +\n  facet_wrap(\n    ~ sample_type,\n    nrow = 2,\n    scales = \"free_y\"\n    ) +\n  theme_minimal_grid() +\n  theme(\n    axis.text.x = element_text(\n      angle = 45,\n      vjust = 1,\n      hjust = 1\n    )\n  ) +\n  labs(\n    x = \"Position relative to TSS (bp)\",\n    y = \"Signal (mean of window sums)\",\n    title = \"Chromatin accessibility around transcription start sites\",\n    subtitle = glue(\"{n_tss} features on S. cerevisiae chrII\")\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex-18_files/figure-html/plot-meta-signals-1.png){width=672}\n:::\n:::\n\n\n## Interpreting the meta-plots \n\n- What is the direction of transcription in these meta-plots?\n\n- What are the features of chromatin near TSS measured by these different experimental conditions?\n\n- How do you interpret the increased signal of the +1 nucleosome in the \"MNase_Long\" condition, relative to e.g. -1, +2, +3, etc.?\n\n- What are the differences in ATAC and MNase treatments that lead to these distinctive patterns?\n\n## Heatmap of signals around TSSs\n\nTo generate a heatmap, we need to reformat our data slightly.\n\nTake a look at `acc_tbl` and think about how you might reorganize the following way:\n\n- rows contain the data for individual loci (i.e., each TSS)\n- columns are ordered positions relative to the TSS (i.e., most upstream to most downstream)\n\nWe're going to plot a heatmap of the \"MNase_Long\" data. There are two ways\nto get these data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_tbl <- acc_tbl[acc_tbl$sample_type == \"MNase_Short\",]$tss_win_sum[[1]]\n```\n:::\n\n\nOr, using dplyr / tidyr:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_tbl <- filter(\n  acc_tbl,\n  sample_type == \"MNase_Long\"\n  ) |>\n  select(-big_wig) |>\n  unnest(cols = c(tss_win_sum))\n```\n:::\n\n\nEither way, now we need to reformat the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_tbl_wide <-\n  mnase_tbl |>\n  select(\n    name,\n    win_coord,\n    win_signal\n    ) |>\n  arrange(name, win_coord) |>\n  replace_na(\n    list(win_signal = 0)\n    ) |>\n  pivot_wider(\n    id_cols = name,\n    names_from = \"win_coord\",\n    values_from = \"win_signal\"\n  )\n```\n:::\n\n\nOnce we have the data reformatted, we just convert to a matrix and feed it to\n`ComplexHeatmap::Heatmap()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_mtx <-\n  select(mnase_tbl_wide, -name) |>\n  arrange(desc(`150`)) |>\n  as.matrix()\n\nComplexHeatmap::Heatmap(\n  mnase_mtx,\n  cluster_columns = FALSE,\n  show_row_dend = FALSE,\n  show_column_names = FALSE,\n  show_heatmap_legend = FALSE,\n  width = 4,\n  height = 8\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe automatically generated colors map from the 1^st and 99^th of the\nvalues in the matrix. There are outliers in the matrix whose patterns\nmight be hidden by this color mapping. You can manually set the color\nto `col` argument.\n\nUse `suppressMessages()` to turn off this message.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ex-18_files/figure-html/heatmap-matrix-plot-1.png){width=672}\n:::\n:::\n\n\n## Interpreting meta-plots and heatmaps\n\nIt's worth considering what meta-plots and heatmaps *can* and *can't* tell you.\n\n1.  What are the similarities and differences between heatmaps and meta-plots?\n\n2.  What types of conclusions can you draw from each type of plot?\n\n3.  What are some features of MNase-seq and ATAC-seq that become more clear when\nlooking across many loci at the same time?\n\n4.  What are some hypotheses you can generate based on these plots?\n",
    "supporting": [
      "ex-18_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}