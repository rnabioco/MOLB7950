{
  "hash": "66a8a49a13c6ed3040807e83690a4fec",
  "result": {
    "markdown": "---\ntitle: \"Mapping chromatin structure and transactions\"\nauthor: \"Your Name Here\"\n---\n\n\n## `bed_intersect()` example {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(valr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nx <- tribble(\n  ~chrom, ~start, ~end,\n  \"chr1\", 25, 50,\n  \"chr1\", 100, 125\n)\n\ny <- tribble(\n  ~chrom, ~start, ~end,\n  \"chr1\", 30,     75\n)\n```\n:::\n\n\n## valr example\n\nYou can use `read_bed()` and related functions to load genome annotations and signals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsnps <- read_bed(\n  valr_example(\"hg19.snps147.chr22.bed.gz\"),\n  n_fields = 6\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `n_fields` argument of `read_bed()` is deprecated as of valr 0.6.9.\nâ„¹ fields are now determined automatically from the file\n```\n:::\n\n```{.r .cell-code}\ngenes <- read_bed(\n  valr_example(\"genes.hg19.chr22.bed.gz\"),\n  n_fields = 6\n)\n```\n:::\n\n\n## What is in `snps` and `genes`? {.smaller}\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Interval manipulation {.smaller}\n\nLet's find and characterize intergenic SNPs. We'll use the tools `bed_substract()` and `bed_closest()`. Take a look and their examples in the documentation to see what they do.\n\n\n::: {.cell}\n\n:::\n\n\n. . .\n\nTake a look at the `intergenic` and `nearby` objects in the console.\n\n## Interval manipulation {.smaller}\n\nNow that you have overlaps and distances between SNPs and genes, you can \ngo back to dplyr tools to generate reports.\n\n\n::: {.cell}\n\n:::\n\n\n## `bed_map()` example {.smaller}\n\nCopy / paste these into your console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tribble(\n  ~chrom, ~start, ~end,\n  \"chr1\", 100,    250,\n  \"chr2\", 250,    500\n)\n\ny <- tribble(\n  ~chrom, ~start, ~end, ~value,\n  \"chr1\", 100,    250,  10,\n  \"chr1\", 150,    250,  20,\n  \"chr2\", 250,    500,  500\n)\n```\n:::\n\n\n## `bed_map()` example continued {.smaller}\n\nFirst examine the intersecting intervals.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "ex-16_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}