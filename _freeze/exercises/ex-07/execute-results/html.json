{
  "hash": "bd98545bd9d4db2a41595473a1b9f186",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R Bootcamp - Day 7\"\nsubtitle: \"tidyverse odds & ends\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n\n\n\n## Class 7 outline\n\n* Accessing data in vectors (Exercise)\n* other tidyverse packages (stringr & forcats)\n* dplyr table joins (Exercise)\n* ggplot2 scale functions\n* ggplot2 multi-panel figures (Exercise)\n* ggplot2 saving figures \n\n# Accessing data in vectors\n\n## Using `[`, `[[`, and `$` {.smaller}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n`[` can return a range, `[[` returns a single value.\n\n## vector selection with logic {.smaller}\n\none-step filtering.\n\n\n\n::: {.cell}\n\n:::\n\n\n\ntwo-step filtering. same result.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nalso can use with `is.na()` to identify / exclude `NA` values in a vector.\n\nUse `sum()` to figure out how many are `TRUE`.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# other tidyverse libraries\n\n## string operations with stringr {.smaller}\n\nstringr provides several useful functions for operating on strings.\n\nSee the [stringr cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n`str_c()` is similar to `paste` and `paste0` but the behavior is more consistent.\n\n## forcats operations for factors {.smaller}\n\nforcats provides several utilities for working with factors.\n\nSee the [forcats cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/factors.pdf)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Use forcats to reorder aspects of plots {.smaller}\n\nSee the [FAQ on rordering in ggplot2](https://ggplot2.tidyverse.org/articles/faq-reordering.html)\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n# dplyr\n\n### Combining tables by *variables* (i.e., columns)\n\n  - `bind_cols()`\n  - `left_join()`\n  - `right_join()`\n  - `inner_join()`\n  - `full_join()`\n \n### Combining tables by *cases* (i.e., rows)\n\n  - `bind_rows()`\n  - `intersect()`\n  - `setdiff()`\n  - `union()`\n\n## dplyr cheatsheet\n\nLook at \"combine variables\" and \"combine cases\" at the top.\n\n## tables for joining\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## mutating joins - visualized\n\n## Joining tables by a variable - Exercise 1\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## filtering joins - visualized\n\n## Joining tables by a variable - Exercise 2\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Other dplyr verbs\n\nThere are many other dplyr verbs.\n\n- \nWe've used `rename`, `count`, `add_row`, `add_column`,\n`distinct`, `sample_n`, `sample_frac`, `slice`, `pull`\n\nCheck out the [dplyr cheatsheet]() to learn more!\n\n# ggplot2\n\n## scale functions in ggplot2\n\n- `scale_color_brewer()` and `scale_fill_brewer()` control `color` and `fill` aesthetics.\n- See available [ggplot2 brewer palettes](https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes)\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## scale functions in ggplot2 {.smaller}\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Set up a points plot {.smaller}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## How to combine multiple plots into a figure? {.smaller}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## We have 4 legends - can they be condensed? {.smaller}\n  \nYes, but it is not exactly straightforward.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Saving plots (Exercise 18)\n\nSaves last plot as 5' x 5' file named `plot_final.png` in working directory.\n\nMatches file type to file extension.\n\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}