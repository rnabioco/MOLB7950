{
  "hash": "27090c872fb5378c91c8299818c260bc",
  "result": {
    "markdown": "---\ntitle: \"Exercises 8\"\nauthor: \"Jay Hesselberth\"\ndate: last-modified\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    code-fold: true\n---\n\n\n# Putting it all together\n\nFor the next two classes we'll combine everything we've learned to process and visualize data from some some biological experiments. These exercises will illustrate a complete analysis pipeline -- from data tidying to manipulation and visualization -- using tools from the tidyverse.\n\n![](../img/tidy-workflow.png)\n\n### Libraries\n\nLoad the libraries you need for analysis below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n:::\n:::\n\n\n# A quantitative PCR experiment\n\nHere is the experimental setup:\n\n-   Two cell lines (`wt` and `mut`) were treated with a drug that induces interferon expression\n\n-   After specific time points, cells were harvested and actin and interferon mRNA were analyzed by quantitative PCR (with 3 technical replicates), with a control containing no reverse transcriptase.\n\n### Load the data\n\nThese data are in two TSV files:\n\n-   `data/qpcr_names.tsv.gz`\n-   `data/qpcr_data.tsv.gz`\n\nLoad these data sets and inspect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr_names <- read_tsv(here(\"data/qpcr_names.tsv.gz\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 8 Columns: 13\n-- Column specification --------------------------------------------------------\nDelimiter: \"\\t\"\nchr (13): row, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nqpcr_data <- read_tsv(here(\"data/qpcr_data.tsv.gz\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 8 Columns: 13\n-- Column specification --------------------------------------------------------\nDelimiter: \"\\t\"\nchr  (1): row\ndbl (12): 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nNote the shape of the data and the names of the rows and columns. Do they remind you of anything?\n\n![](../img/96-well-pcr-plate.png)\n\n### Tidy the data\n\nGiven the experimental setup and the shape of the tibbles, you should be able to answer: **Are these data tidy?**\n\n-   What are the variables in the data?\n-   Are the variables the column names?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr_data_long <-\n  pivot_longer(qpcr_data, -row, names_to = \"col\")\n\nqpcr_names_long <- \n  pivot_longer(qpcr_names, -row, names_to = \"col\") |>\n  separate(value, into = c(\"gt\", \"time\", \"gene\", \"rt\", \"rep\"), sep = \"_\")\n```\n:::\n\n\n### Merge the data\n\nNote the structure of the tidied data. What columns (variables) are shared by both tibbles?\n\nHow we can *join* the data from these two tibbles, linking the sample identifiers with their gene expression values?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr_tidy <-\n  left_join(qpcr_names_long, qpcr_data_long) |>\n  # we don't need row & col anymore.\n  # the -RT samples are all 0, so we can drop those, too\n  filter(rt == \"+\") |>\n  select(-(row:col), -rt)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(row, col)`\n```\n:::\n:::\n\n\n### Summarize the data\n\nCalculate the mean and standard deviation across replicates.\n\nDo this two ways:\n\n1.  Calculate the statistics for each gene separately.\n\n2.  Calculate a ratio of interferon to actin levels for each sample *before* calculating the mean and standard deviation of the ratios.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqpcr_summary <-\n  group_by(\n    qpcr_tidy,\n    gt, time, gene) |>\n  summarize(\n    qpcr_tidy,\n    exp_mean = mean(value),\n    exp_sd = sd(value)\n  ) |>\n  arrange(gt, time, gene)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\ni Please use `reframe()` instead.\ni When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'gt', 'time', 'gene'. You can override\nusing the `.groups` argument.\n```\n:::\n:::\n\n\n### Plot the data\n\nNow we can plot the summary statistics. We'll use [`ggplot2::geom_pointrange()`](https://ggplot2.tidyverse.org/reference/geom_linerange.html) to represent the mean and standard deviation.\n\n\n::: {.cell}\n\n:::\n\n\n### Interpret the plot\n\n-   What can you say about the expression of ACTIN and IFN?\n\n-   What can you say about the mutant and wild-type cells?\n\n\n## Homework\n\nYour homework tonight is to review everything we did today. You won't have anything due tomorrow. There will be a more substantial problem set due on Friday at 5pm.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}