{
  "hash": "860ee5f0563091c889cd7ad5bd910f67",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - Day 1\"\nauthor: \"Jay Hesselberth\"\ndate: last-modified\n---\n\n\n\n\n## Learning Objectives for the R Bootcamp\n\n-   Follow best coding practices (*class 1*)\n-   Know the fundamentals of R programming (*class 1*)\n-   Become familiar with \"tidyverse\" suite of packages\n    -   tidyr: \"Tidy\" a messy dataset (*class 2*)\n    -   dplyr: Transform data to derive new information (*class 3*)\n    -   ggplot2: Visualize and communicate results (*class 4*)\n-   Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n## Today's class outline - *class 1*\n\n-   Coding best practices\n-   Review R basics\n    -   R vs Rstudio (Exercises #1-2)\n    -   Functions & Arguments (Exercises #3-4)\n    -   Data types (Exercise #5)\n    -   Data structures (Exercises #6-7)\n    -   R Packages (Exercise #8)\n-   Review Rmarkdown (Exercise #9)\n-   Rstudio cheatsheets (Exercise #10)\n\n## R vs Rstudio - Exercise 1\n\n-   Look at Rstudio panels one at a time.\n-   Environment, History, Console, Files, Plots, Packages, Help, etc.\n\n\n## R as a calculator - Exercise 2\n\n-   R can function like an advanced calculator\n\n-   try simple math\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\n- assign a numeric value to an object\n\n\n::: {.cell}\n\n:::\n\n\n## Functions and arguments - Exercise 3\n\n* Functions are fundamental building blocks of R\n* Most functions take one or more arguments and transform an input object in a specific way. \n* Tab completion is your friend!\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, base = exp(1))  .Primitive(\"log\")\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.386294\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n## Writing a simple function - Exercise 4\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n:::\n\n\n## Data types\n\n* There are many data types in R. \n* For this class, the most commonly used ones are **numeric**, **character**, and **logical**. \n* All these data types can be used to create vectors natively.\n\n## Data types - Exercise 5\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n## Data structures\n\n* R has multiple data structures. \n* Most of the time you will deal with tabular data sets, you will manipulate them, take sub-sections of them. \n* It is essential to know what are the common data structures in R and how they can be used. \n* R deals with named data structures, this means you can give names to data structures and manipulate or operate on them using those names.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/data-structures.png){width=100%}\n:::\n:::\n\nSource: Devopedia\n\n## Tibbles\n\n* A __tibble__, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. \n* Tibbles are data.frames that are lazy and surly: they do less (i.e. they don't change variable names or types, and don't do partial matching) and complain more (e.g. when a variable does not exist). \n* This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced `print()` method which makes them easier to use with large datasets containing complex objects.\n\n* `tibble()` does much less than `data.frame()`: \n    - it never changes the type of the inputs \n    - it never changes the names of variables\n    - it never creates `row.names()`\n\n## Vectors - Exercise 6\n\n- Vectors are one of the core R data structures. \n- It is basically a list of elements of the same type (numeric,character or logical). \n- Later you will see that every column of a table will be represented as a vector. \n- R handles vectors easily and intuitively. \n- The operations on vectors will propagate to all the elements of the vectors.\n\nCreate the following vectors\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6 7\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  8 16 32\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n## Data frames - Exercise 7\n\n- A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.). \n- A data frame can be constructed by data.frame() function, and a tibble using the `tibble()` function.\n- For example, we illustrate how to construct a data frame from genomic intervals or coordinates.\n\nCreate a dataframe:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n   chr strand start end\n1 chr1      -   200 250\n2 chr1      -  4000 410\n3 chr2      +   100 200\n4 chr2      +   400 450\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 4\n  chr   strand start   end\n  <chr> <chr>  <dbl> <dbl>\n1 chr1  -        200   250\n2 chr1  -       4000   410\n3 chr2  +        100   200\n4 chr2  +        400   450\n```\n:::\n:::\n\n\n## R packages - Exercise 8\n\n* An R package is a collection of code, data, documentation, and tests that is easily sharable\n* A package often has a collection of custom functions that enable you to carry out a workflow. eg. DESeq for RNA-seq analysis\n* The most popular places to get R packages from are CRAN, Bioconductor, and Github. \n* Once a package is installed, one still has to \"load\" them into the environment using a `library(<package>)` call. \n\nLet's do the following to explore R packages\n* Look at the \"Environment\" panel in Rstudio\n* Explore Global Environment\n* Explore the contents of a package\n\n## Rmarkdown Exercise - Exercise 9\n\n* Rmarkdown is a fully reproducible authoring framework to create, collaborate, and communicate your work. \n* Rmarkdown supports a number of output formats including pdfs, word documents, slide shows, html, etc. \n* An Rmarkdown document is a plain text file with the extension `.Rmd` and contains the following basic components: \n    - An (optional) YAML header surrounded by ---s.\n    - Chunks of R code surrounded by ```.\n    - Text mixed with simple text formatting like # heading and _italics_.\n\nLet's do the following to explore Rmarkdown documents\n* Create a new .Rmd document\n* `knit` the document to see the output\n\n## Coding best practices\n\n> \"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.\" \n> --- Hadley Wickham\n\n# File Names\n\n## Filenames and suffixes\n\n-   File names should be meaningful and end in `.R`, `.Rmd`, etc.\n-   Avoid using special characters in file names - stick with numbers, letters, `-`, and `_`.\n-   *Never* include spaces in file names!\n\n```         \n# Good  \nfit_models.R  \nutility_functions.Rmd\n\n# Bad  \nfit models.R  \ntmp.r  \nstuff.r  \n```\n\n## Filename prefixes\n\n-   If files should be run in a particular order, prefix them with numbers.\n-   If it seems likely you'll have more than 10 files, left pad with zero.\n-   It looks nice (constant width) and sorts nicely.\n\n```         \n00_download.R  \n01_explore.R  \n...  \n09_model.R  \n10_visualize.R  \n```\n\n## Filename structure\n\n-   Avoid capitalizing when not necessary.\n-   If you want to include dates in your file name, use the ISO 8601 standard: `YYYY-MM-DD`\n-   Use delimiters intentionally! (helps you to recover metadata easily from file names)\n-   For example, \"\\_\" to delimit fields; \"-\" to delimit words\n\n```         \n2019-02-15_class1_data-wrangling.Rmd\n```\n\n## Use `here` in RStudio projects\n\nThe [here](https://here.r-lib.org) library enables easy file referencing in project-oriented workflows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\n\npath <- here('slides/class-01.qmd')\npath\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/jayhesselberth/devel/rnabioco/molb-7950/slides/class-01.qmd\"\n```\n:::\n:::\n\n\n## Organisation\n\n-   Try to give a file a concise name that evokes its contents\n-   One way to organize your files is by grouping them into `data`, `code`, `plots`, etc.\n-   For example, in this class we often use the following structure:\n\n```         \nexercises\n   - exercises-01.Rmd\n   - data\n   - ../img\n   - setup\n   ...\n```\n\n## Internal structure of code\n\nUse commented lines of `-` and `=` to break up your code chunk into easily readable segments. Or better yet, make each \"action\" it's own chunk and give it a name.\n\n```         \n# Load data ---------------------------\n\n# Plot data ---------------------------\n```\n\n",
    "supporting": [
      "class-01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}