{
  "hash": "dbd02ec6077e52032eb29622baf5044c",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - Day 2\"\nauthor: \"Jay Hesselberth\"\ndate: last-modified\n---\n\n\n\n\n## Class 2 outline \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n* Become familiar with \"tidyverse\" suite of packages\n* Introduce _readr_ (Exercise 1)\n* Introduce _tidyr_ (Exercise 2)\n* Tools for data exploration (Exercises 3-5)\n:::\n\n::: {.column width=\"50%\"}\n* Learn tidyr functions:\n* pivot_wider (Exercise 6)\n* pivot_longer (Exercise 7)\n* separate (Exercise 8 & 9)\n* unite (Exercise 10)\n* handling missing values\n:::\n\n::::\n\n# Tidyverse\n\n## Tidyverse overview\n\n* Tidyverse is an opinionated collection of R packages designed for data science. \n* All packages share an underlying design philosophy, grammar, and data structures.\n* 25 packages, total (as of today) - we will focus mainly on tidyr, dplyr, and ggplot2\n\n## Tidyverse workflow\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/tidy1.png){width=100%}\n:::\n:::\n\n\n## What is tidy data?\n\n>   \"Tidy datasets are all alike but every messy dataset is messy in its own way.\"\n>   \n>   --- Hadley Wickham\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Source: Rstudio cheatsheets](../img/tidydata.png){width=100%}\n:::\n:::\n\n# Tidying exercises\n\n## Data import with readr \n\n\n::: {.cell}\n::: {.cell-output-display}\n![Source: RStudio cheatsheets](../img/readr.png){width=70%}\n:::\n:::\n\n\nN.B. note the difference between `readr::read_csv()` and the built-in `read.csv()`. Use the former.\n\n---\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Source: RStudio cheatsheets](../img/readr-args.png){width=80%}\n:::\n:::\n\n\n## Data sets for tidying - Exercise 2\n\n---\n\n* In this class, we will use the datasets that come with the tidyr package to explore all the functions provided by tidyr.\n\n* Explore the contents of tidyr package (Exercise #2)\n\n* `table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. \n\n## Getting familiar with the data - Exercise 3\n\n---\n\nR provides many functions to examine features of a data object\n\n  - `View()` - To open the table up in an excel-like interface - not recommended for large tables\n  - `class()` - what kind of object is it (high-level)?\n  - `typeof()` - what is the object<e2><80><99>s data type (low-level)?\n  - `is_tibble()` - use is.? to confirm data type\n  - `str()` - what is the structure of the object?\n  - `attributes()` - does it have any metadata?\n\n* Let's explore `table1`\n\n## Getting familiar with the data - Exercise 4\n\n---\n\nSome of the useful functions for data.frames / tibbles are as follows:  \n\n- `head()` - shows first 6 rows  \n- `tail()` - shows last 6 rows  \n- `dim()` - returns the dimensions of data frame (i.e. number of rows and number of columns)  \n- `nrow()` - number of rows  \n- `ncol()` - number of columns  \n- `names()` or `colnames()` - both show the names attribute for a data frame  \n- `glimpse()`\n\n# Exercise 5 -Getting familiar with data - _summary_, _hist_, & _table_\n\n---\n\n_summary_: A generic function used to produce result summaries of the results of various model fitting functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(table1) # summary of the whole table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country               year          cases          population       \n Length:6           Min.   :1999   Min.   :   745   Min.   :1.999e+07  \n Class :character   1st Qu.:1999   1st Qu.: 11434   1st Qu.:5.845e+07  \n Mode  :character   Median :2000   Median : 59112   Median :1.733e+08  \n                    Mean   :2000   Mean   : 91277   Mean   :4.901e+08  \n                    3rd Qu.:2000   3rd Qu.:179316   3rd Qu.:9.983e+08  \n                    Max.   :2000   Max.   :213766   Max.   :1.280e+09  \n```\n:::\n\n```{.r .cell-code}\nsummary(table1$cases) # summary of just one column of the table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    745   11434   59112   91277  179316  213766 \n```\n:::\n:::\n\n\n---\n\n_hist_: Takes in a vector of values and plots a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(table1$cases) # summary of just one column of the table\n```\n\n::: {.cell-output-display}\n![](class-02_files/figure-revealjs/unnamed-chunk-7-1.png){width=384}\n:::\n:::\n\n\n---\n\n_table_: Uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(table2$year) # tally of one column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1999 2000 \n   6    6 \n```\n:::\n\n```{.r .cell-code}\ntable(table2$year, table2$type) # two columns at a time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      \n       cases population\n  1999     3          3\n  2000     3          3\n```\n:::\n:::\n\n\n# Main verbs in tidyr\n\n## Tidying data\n\nThe four verbs to keep in mind for reshaping data with `tidyr` are:  \n\n  - `pivot_wider`  \n  - `pivot_longer`  \n  - `separate`  \n  - `unite` \n\nThere are other verbs as well - look at the `tidyr` cheatsheet!\n\n## pivot_wider - syntax\n\n`pivot_wider()` \"widens\" data, increasing the number of columns and decreasing the number of rows. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/pivot_wider.png){width=50%}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## pivot_wider - Exercise 6\n\nWhat will the output look like?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\npivot_wider(\n  table2,\n  names_from = type,\n  values_from = count\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n---\n\nIf you want to save the output, assign it to a new variable. This new variable\nwill appear in your Environment tab.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2_tidy <- pivot_wider(\n  table2,\n  names_from = type,\n  values_from = count\n)\n\ntable2_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n## pivot_longer - syntax\n\n`pivot_longer()` \"lengthens\" data, increasing the number of rows and decreasing the number of columns. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/pivot_longer.png){width=50%}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## pivot_longer - Exercise 7\n\nWhat will the output look like?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n\n```{.r .cell-code}\npivot_longer(table4a, 2:3, names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n\n```{.r .cell-code}\npivot_longer(table4a, -country, names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n\n```{.r .cell-code}\ntable4_tidy <- pivot_longer(table4a, -country, names_to = \"year\", values_to = \"cases\")\ntable4_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n:::\n\n\n## separate - yntax\n\nGiven either a regular expression or a vector of character positions, `separate()` turns a single character column into multiple columns.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/separate.png){width=60%}\n:::\n:::\n\n\n---\n\n\n::: {.cell}\n\n:::\n\n\n## separate - Exercise 8\n\nWhat will the output look like?\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n\n```{.r .cell-code}\ntable3_tidy_1 <- separate(table3,\n  rate,\n  into = c(\"cases\", \"population\"),\n  sep = \"/\"\n)\ntable3_tidy_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year cases  population\n  <chr>       <dbl> <chr>  <chr>     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n## separate_rows - syntax\n\nGiven either a regular expression or a vector of character positions, `separate_rows()` turns a single character column into multiple rows. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/separate_rows.png){width=50%}\n:::\n:::\n\n\n---\n\n```r\nseparate_rows(\n  data, \n  ..., \n  sep = \"[^[:alnum:].]+\", \n  convert = FALSE)\n```\n\n### separate_rows - Exercise 9\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n\n```{.r .cell-code}\ntable3_tidy_2 <- separate_rows(table3, rate, sep = \"/\")\ntable3_tidy_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 3\n   country      year rate      \n   <chr>       <dbl> <chr>     \n 1 Afghanistan  1999 745       \n 2 Afghanistan  1999 19987071  \n 3 Afghanistan  2000 2666      \n 4 Afghanistan  2000 20595360  \n 5 Brazil       1999 37737     \n 6 Brazil       1999 172006362 \n 7 Brazil       2000 80488     \n 8 Brazil       2000 174504898 \n 9 China        1999 212258    \n10 China        1999 1272915272\n11 China        2000 213766    \n12 China        2000 1280428583\n```\n:::\n:::\n\n\nThis is not a great example because in creating two rows, the case and population numbers are now mixed up and we have lost information. So always think about and be intentional to avoid information loss.  \n\n### unite - Syntax\n\n`unite()` combines multiple columns into a single column.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](../img/unite.png){width=50%}\n:::\n:::\n\n\n---\n\n```r\nunite(data, \n      col, \n      ..., #select columns to unite\n      sep = \"[^[:alnum:]]+\", #any sequence of non-alphanumeric values\n      remove = TRUE, #default is set to TRUE\n      na.rm = FALSE) #default is set to FALSE\n```\n\n## unite - Exercise 10\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\ntable6 <- read_csv(here(\"data/table6.csv\"))\n\ntable6_tidy <- unite(table6, \"new\", century, year, sep = \"\")\ntable6_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 4\n   ...1 country    new    cases\n  <dbl> <chr>      <chr>  <dbl>\n1     1 Afganistan 1999     745\n2     2 Brazil     1999   37737\n3     3 China      1999  212258\n```\n:::\n:::\n\n\n## Handling missing values\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Source: Rstudio cheatsheets](../img/missing-values.png){width=100%}\n:::\n:::\n",
    "supporting": [
      "class-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}