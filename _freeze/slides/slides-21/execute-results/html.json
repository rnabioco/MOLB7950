{
  "hash": "5db899791ade46261d6475edab4fc4d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Factor-centric chromatin analysis\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n\n## Where do transcription factors bind in the genome?\n\nToday we'll look at where two yeast transcription factors bind in the genome using CUT&RUN.\n\n## Where do transcription factors bind in the genome?\n\nTechniques like CUT&RUN require an affinity reagent (e.g., an antibody) that uniquely recognizes a transcription factor in the cell.\n\nThis antibody is added to permeabilized cells, and the antibody associates with the epitope. A separate reagent, a fusion of Protein A (which binds IgG) and micrococcal nuclease (MNase) then associates with the antibody. Addition of calcium activates MNase, and nearby DNA is digested. These DNA fragments are then isolated and sequenced to identify sites of TF association in the genome.\n\n## Where do transcription factors bind in the genome?\n\n![Fig 1a, Skene et al.](../img/block-dna/skene-fig-1a.png)\n\n## Data download and pre-processing\n\nCUT&RUN data were downloaded from the [NCBI GEO page](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE84474) for Skene et al.\n\nI selected the 16 second time point for *S. cerevisiae* Abf1 and Reb1 (note the paper combined data from the 1-32 second time points).\n\nBED files containing mapped DNA fragments were separated by size and converted to bigWig with:\n\n``` bash\n# separate fragments by size\nawk '($3 - $2 <= 120)' Abf1.bed > CutRun_Abf1_lt120.bed\nawk '($3 - $2 => 150)' Abf1.bed > CutRun_Abf1_gt150.bed\n\n# for each file with the different sizes\nbedtools genomecov -i Abf1.bed -g sacCer3.chrom.sizes -bg > Abf1.bg\nbedGraphToBigWig Abf1.bg sacCer3.chrom.sizes Abf1.bw\n```\n\nThe bigWig files are available here in the `data/` directory.\n\n# CUT&RUN analysis\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Examine genome coverage\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](slides-21_files/figure-revealjs/plot-tracks-1.png){width=960}\n:::\n:::\n\n\n\n## How do proteins recognize specific locations in the genome to bind?\n\n## Motif discovery\n\n## Theory\n\nThere are two major approaches to defining sequence motifs enriched in a sample: enumerative and probabilistic approaches.\n\n## Theory\n\nHere we'll apply a probabilistic approach (GADEM) to discover motifs in a collection of DNA sequences. During the RNA block, you'll learn about k-mer analysis, which is a form of enumerative approach.\n\nIn each case, the goal is to define a set of sequence motifs that are encriched in a set of provided sequences (i.e., peaks from CUT&RUN data) relative to a genomic background.\n\n## Theory\n\nMotifs are expressed in a [Position Weight Matrix](https://en.wikipedia.org/wiki/Position_weight_matrix), which captures the propensities for a position to be a particular nucleotide in a sequence motif.\n\nThese PWMs can be represented as sequence logos, visually represent the amount of information provided by the motif, typically using \"information content\", expressed in bits.\n\n## Theory\n![LexA sequence motif](../img/block-dna/lexa-motif.png)\n\n## Practice\n\nWe'll use the [rGADEM](https://bioconductor.org/packages/release/bioc/html/rGADEM.html) package from Bioconductor to derive sequence motifs from the peaks we called above. This is a straightforward process:\n\n1.  Collect the DNA sequences within the peak windows using the BSgenome for *S. cerevisiae*\n2.  Provide those sequences and the genomic background to `rGADEM::GADEM()`, which runs uses an Expectation-Maximization (EM) approach to identify and refine motifs.\n3.  Examine the discovered motifs, and plot as a logo using `seqLogo::seqLogo()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npeak_seqs <- BSgenome::getSeq(\n  # provided by BSgenome.Scerevisiae.UCSC.sacCer3\n  Scerevisiae,\n  peak_calls_gr\n)\n\n# takes ~2 minutes to run\ngadem <- rGADEM::GADEM(\n  peak_seqs,\n  genome = Scerevisiae,\n  verbose = 1\n)\n\n# look at the consensus motifs\nconsensus(gadem)\n\n# how many consensus motifs are there?\nnOccurrences(gadem)\n```\n:::\n\n\n\nNow let's look at the sequence logo for the top hit.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npwm <- gadem@motifList[[1]]@pwm\n\nseqLogo::seqLogo(pwm)\n```\n:::\n\n\n\n## Questions\n\n1.  Does this motif make sense, based on what you know about the requirements and specificity of DNA binding by transcription factors?\n\n2.  How might you confirm that a specific sequence (that conforms to a motif) is bound directly by a transcription factor?\n\n## References\n\nGADEM: a genetic algorithm guided formation of spaced dyads coupled with an EM algorithm for motif discovery. J Comput Biol 2009 \\[[PMC free article](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2756050/)\\] \\[[PubMed](https://pubmed.ncbi.nlm.nih.gov/19193149)\\] \\[[Google Scholar](https://scholar.google.com/scholar_lookup?journal=J+Comput+Biol&title=GADEM:+a+genetic+algorithm+guided+formation+of+spaced+dyads+coupled+with+an+EM+algorithm+for+motif+discovery&author=L.+Li&volume=16&issue=2&publication_year=2009&pages=317-329&pmid=19193149&)\\]\n",
    "supporting": [
      "slides-21_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}