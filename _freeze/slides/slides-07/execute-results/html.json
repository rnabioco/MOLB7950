{
  "hash": "7473275d8680457970b692e73cf44c67",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - Day 7\"\nsubtitle: \"odds & ends\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n\n\n## Class 7 outline \n\n* Combining tables with dplyr: join functions, binding columns/rows, etc. (Exercise 8)\n* ... and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull` (Exercise 9)\n\n## Combining tables {.smaller}\n\n### Combine variables (i.e., columns)\n\n  - `bind_cols()`\n  \n  - `left_join()`\n  - `right_join()`\n  - `inner_join()`\n  - `full_join()`\n \n### Combine cases (i.e., rows)\n\n  - `bind_rows()`\n  \n  - `intersect()`\n  - `setdiff()`\n  - `union()`\n\n## dplyr cheatsheet\n\n![](../img/dplyr/combining-tables.png){fig-align=\"center\"}\n\n## Combine variables and cases - pasting tables together - Syntax\n\n- `bind_cols()` to paste tables beside each other\n- `bind_rows()` to paste tables below each other as they are. \n\n. . .\n\n```r\nbind_cols(data1, data2) # should have same number of rows\nbind_rows(data1, data2) # should have same number of columns\n```\n\n## Joining tables by one or more variables {.smaller}\n\nYou will use table joins **A LOT** in bioinformatic analyses.\n\n#### mutating joins\n\n- `left_join()` joins *matching* values from the right data set to the left data set\n- `right_join()` joins *matching* values from the left data set to the right data set\n\n. . .\n\n#### filtering joins\n\n- `inner_join()` joins *matching* values present in both data sets\n- `full_join()` joins all values in both data sets\n\n```r\nleft_join(data1, data2)\nleft_join(data1, data2, by = ...) # if multiple columns match\nleft_join(data1, data2, by = c(\"col1\" = \"col2\")) # if the columns names that match are different\n```\n\n## mutating joins visualized\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/left-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/right-join.gif)\n:::\n::::\n\n## filtering joins visualized\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/inner-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/full-join.gif)\n:::\n::::\n\n## Combine variables - joining tables by a variable - Exercise 8\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  right_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n:::\n\n\n---\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  inner_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  full_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  full_join(\n    band_instruments2,\n    by = c(\"name\" = \"artist\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n## Other dplyr verbs\n\nThere are many other dplyr verbs: `rename`, `count`, `add_row`, `add_column`,\n`distinct`, `sample_n`, `sample_frac`, `slice`, `pull`\n\nCheck out the dplyr cheatsheet to learn more! \n\n## rename - Syntax\n\n- `rename()` renames the variables in a table. Keeps all columns. `select()` can also do this, but with some caveats. \n\n```r\nrename(data = ..., <colname>)\n```\n\n## rename - Exercise 9\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  artist plays \n  <chr>  <chr> \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 1\n  name \n  <chr>\n1 John \n2 Paul \n3 Keith\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}