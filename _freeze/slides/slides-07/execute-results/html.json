{
  "hash": "2b8033ebbec69cd2a3c197b78038f3a1",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - Day 7\"\nsubtitle: \"tidyverse odds & ends\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n\n\n\n## Class 7 outline\n\n* Accessing data in vectors (Exercise)\n* other tidyverse packages (stringr & forcats)\n* dplyr table joins (Exercise)\n* ggplot2 scale functions\n* ggplot2 multi-panel figures (Exercise)\n* ggplot2 saving figures \n\n# Accessing data in vectors\n\n## Using `[`, `[[`, and `$` {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# `hp` vector from mtcars\nmtcars$hp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 110 110  93 110 175 105 245  62  95 123 123 180 180 180 205 215 230  66  52\n[20]  65  97 150 150 245 175  66  91 113 264 175 335 109\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# columns by name\nmtcars[c(\"hp\", \"mpg\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     hp  mpg\nMazda RX4           110 21.0\nMazda RX4 Wag       110 21.0\nDatsun 710           93 22.8\nHornet 4 Drive      110 21.4\nHornet Sportabout   175 18.7\nValiant             105 18.1\nDuster 360          245 14.3\nMerc 240D            62 24.4\nMerc 230             95 22.8\nMerc 280            123 19.2\nMerc 280C           123 17.8\nMerc 450SE          180 16.4\nMerc 450SL          180 17.3\nMerc 450SLC         180 15.2\nCadillac Fleetwood  205 10.4\nLincoln Continental 215 10.4\nChrysler Imperial   230 14.7\nFiat 128             66 32.4\nHonda Civic          52 30.4\nToyota Corolla       65 33.9\nToyota Corona        97 21.5\nDodge Challenger    150 15.5\nAMC Javelin         150 15.2\nCamaro Z28          245 13.3\nPontiac Firebird    175 19.2\nFiat X1-9            66 27.3\nPorsche 914-2        91 26.0\nLotus Europa        113 30.4\nFord Pantera L      264 15.8\nFerrari Dino        175 19.7\nMaserati Bora       335 15.0\nVolvo 142E          109 21.4\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# first 10 items in hp\nhp <- mtcars$hp\nhp[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 110 110  93 110 175 105 245  62  95 123\n```\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# 2 ways to get the 10th value \nhp[10]\nhp[[10]]\n```\n:::\n\n\n\n. . . \n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# this is an error\nhp[[1:10]]\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in hp[[1:10]]: attempt to select more than one element in vectorIndex\n```\n:::\n:::\n\n\n\n. . .\n\n`[` can return a range, `[[` returns a single value.\n\n## vector selection with logic {.smaller}\n\none-step filtering.\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nhp[hp > 100]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 110 110 110 175 105 245 123 123 180 180 180 205 215 230 150 150 245 175 113\n[20] 264 175 335 109\n```\n:::\n:::\n\n\n\n. . .\n\ntwo-step filtering. same result.\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# get a vector of T/F values\nx <- hp > 100\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n[13]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n[25]  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# use that vector to index the original\nhp[x]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 110 110 110 175 105 245 123 123 180 180 180 205 215 230 150 150 245 175 113\n[20] 264 175 335 109\n```\n:::\n:::\n\n\n\n. . .\n\nalso can use with `is.na()` to identify / exclude `NA` values in a vector.\n\n---\n\nUse `sum()` to figure out how many are `TRUE`.\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nx <- hp > 100\n\n# how many are TRUE?\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nlength(hp[x])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n:::\n\n\n\n# other tidyverse libraries\n\n## string operations with stringr {.smaller}\n\nstringr provides several useful functions for operating on strings.\n\nSee the [stringr cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf)\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nstr_c(\"letter: \", letters[1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"letter: a\" \"letter: b\" \"letter: c\" \"letter: d\" \"letter: e\"\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nids <- c('x-1', 'x-2', 'y-1', 'y-2')\nstr_split(ids, '-')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"x\" \"1\"\n\n[[2]]\n[1] \"x\" \"2\"\n\n[[3]]\n[1] \"y\" \"1\"\n\n[[4]]\n[1] \"y\" \"2\"\n```\n:::\n\n```{.r .cell-code}\n# just the first parts\n# str_split_i(ids, '-', 1)\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nstr_detect(\"A\", LETTERS[1:5])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nstr_pad(\n  1:10,\n  width = 2,\n  side = \"left\",\n  pad = 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"01\" \"02\" \"03\" \"04\" \"05\" \"06\" \"07\" \"08\" \"09\" \"10\"\n```\n:::\n:::\n\n\n\n::: {.notes}\n`str_c()` is similar to `paste` and `paste0` but the behavior is more consistent.\n:::\n\n## forcats operations for factors {.smaller}\n\nforcats provides several utilities for working with factors.\n\nSee the [forcats cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/factors.pdf)\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\npenguins[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species island    bill_length_mm\n   <fct>   <fct>              <dbl>\n 1 Adelie  Torgersen           39.1\n 2 Adelie  Torgersen           39.5\n 3 Adelie  Torgersen           40.3\n 4 Adelie  Torgersen           NA  \n 5 Adelie  Torgersen           36.7\n 6 Adelie  Torgersen           39.3\n 7 Adelie  Torgersen           38.9\n 8 Adelie  Torgersen           39.2\n 9 Adelie  Torgersen           34.1\n10 Adelie  Torgersen           42  \n# ℹ 334 more rows\n```\n:::\n:::\n\n\n\n---\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nfct_count(penguins$species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  f             n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nfct_lump_min(\n  penguins$species,\n  min = 150\n) |>\n  fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  f          n\n  <fct>  <int>\n1 Adelie   152\n2 Other    192\n```\n:::\n:::\n\n\n\n::: aside\n`dplyr::count()` is a more flexible alternative to `forcats::fct_count()`\n:::\n\n---\n\n## Use forcats to reorder data in plots {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  mpg,\n  aes(\n    x = class,\n    y = hwy\n  )\n) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nggplot(\n  mpg,\n  aes(\n    x = fct_reorder(\n      class,\n      hwy,\n      .fun = median\n    ),\n    y = hwy \n  )\n) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n::: aside\n[FAQ on rordering in ggplot2](https://ggplot2.tidyverse.org/articles/faq-reordering.html)\n:::\n\n# dplyr\n\n## Combining tables by *variables* (i.e., columns)\n\n  - `bind_cols()`\n  - `left_join()`\n  - `right_join()`\n  - `inner_join()`\n  - `full_join()`\n \n## Combining tables by *cases* (i.e., rows)\n\n  - `bind_rows()`\n  - `intersect()`\n  - `setdiff()`\n  - `union()`\n\n## dplyr cheatsheet\n\nLook at \"combine variables\" and \"combine cases\" at the top.\n\n![](../img/dplyr/combining-tables.png){fig-align=\"center\"}\n\n## tables for joining\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n:::\n\n\n\n## mutating joins - visualized\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/left-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n![](../img/tidyexplain/right-join.gif)\n:::\n::::\n\n::: aside\n[tidyexplain](https://github.com/gadenbuie/tidyexplain) from @gadenbuie \n:::\n\n## Joining tables by a variable - Exercise 1\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  right_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n:::\n\n\n\n## filtering joins - visualized\n\n:::: {.columns}\n::: {.column width=\"33%\"}\n![](../img/tidyexplain/semi-join.gif)\n:::\n\n::: {.column width=\"33%\"}\n![](../img/tidyexplain/inner-join.gif)\n:::\n\n::: {.column width=\"33%\"}\n![](../img/tidyexplain/full-join.gif)\n:::\n::::\n\n::: aside\n[tidyexplain](https://github.com/gadenbuie/tidyexplain) from @gadenbuie \n:::\n\n## Joining tables by a variable - Exercise 2\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  semi_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  name  band   \n  <chr> <chr>  \n1 John  Beatles\n2 Paul  Beatles\n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  inner_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nband_members |>\n  full_join(\n    band_instruments2,\n    by = c(\"name\" = \"artist\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n\n## Other dplyr verbs\n\nThere are many other dplyr verbs.\n\n- \nWe've used `rename`, `count`, `add_row`, `add_column`,\n`distinct`, `sample_n`, `sample_frac`, `slice`, `pull`\n\nCheck out the [dplyr cheatsheet]() to learn more!\n\n# ggplot2\n\n## scale functions in ggplot2\n\n- `scale_color_brewer()` and `scale_fill_brewer()` control `color` and `fill` aesthetics.\n- See available [ggplot2 brewer palettes](https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes)\n\n. . .\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\np <- ggplot(\n  mtcars,\n  aes(\n    x = mpg,\n    y = hp,\n    color = factor(cyl)\n  )\n) +\n  geom_point(size = 3) +\n  theme_cowplot()\n\np\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n## scale functions in ggplot2 {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\np + scale_color_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\np + scale_color_brewer(palette = \"Dark2\")\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n## Set up a points plot {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\ndiamonds_subset <- sample_n(diamonds, 1000)\n\np <- ggplot(\n  diamonds_subset,\n  aes(\n    x = carat,\n    y = price,\n    color = cut\n  )\n) +\n  geom_point(alpha = 0.8) +\n  theme_cowplot()\n\np + geom_line()\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n## How to combine multiple plots into a figure? {.smaller}\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# `plot_grid()` is from `cowplot`\nplot_grid(\n  p, p, p, p,\n  labels = c(\n    \"A\", \"B\",\n    \"C\", \"D\"\n  ),\n  nrow = 2\n)\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n::: aside\n[patchwork](https://github.com/thomasp85/patchwork) is a related library that uses arithmetic syntax (`a + b | c`)\n:::\n\n## We have 4 legends - can they be condensed? {.smaller}\n  \nYes, but it is not exactly straightforward.\n\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\n# fetch the legend for `p1`\nlegend <- get_legend(\n  p + theme(legend.position = \"bottom\")\n)\n\np <- p + theme(legend.position = \"none\")\n\n# first `plot_grid` builds the panels\npanels <- plot_grid(\n  p, p, p, p,\n  labels = c(\n    \"A\", \"B\", \"C\", \"D\"\n  ),\n  nrow = 2\n)\n\n# second `plot_grid` adds the legend to the panels\nplot_grid(\n  panels,\n  legend,\n  ncol = 1,\n  rel_heights = c(1, .1)\n)\n```\n\n::: {.cell-output-display}\n![](slides-07_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n## Saving plots (Exercise 18)\n\nSaves last plot as 5' x 5' file named `plot_final.png` in working directory.\n\nMatches file type to file extension.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# default is to save last plot in the buffer\n# can also specify with the `plot` argument\nggsave(\n  here(\"img/plot_final.png\"),\n  width = 5,\n  height = 5\n)\n```\n:::\n",
    "supporting": [
      "slides-07_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}