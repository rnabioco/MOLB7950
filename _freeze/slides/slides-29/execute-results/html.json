{
  "hash": "40906a8985dd19c7dcf1a6c358847220",
  "result": {
    "markdown": "---\ntitle: \"RBP-RNA part 2\"\nauthor: \"Neelanjan Mukherjee\"\n---\n\n\n\n\n\n\n\n## mature mRNA regulatory decisions {.smaller}\n\nJust a review of how RBPs control the fate of mRNAs in  the cytoplasm. \n\n![Mayya and Duchaine](https://www.frontiersin.org/files/Articles/423825/fgene-10-00006-HTML-r1/image_m/fgene-10-00006-g001.jpg)\n\n## HuR and ARE decay {.smaller}\n\nRemember our analysis of HuR PAR-CLIP data from last class. The model we were testing is that HuR binds to AU-rich elements (ARE) in 3’ UTRs of mRNAs to promote mRNA stability.\n\n![](/img/block-rna/hur_mechanism.png)\nModel predictions:  \n\n1. HuR binds to the 3' UTR *and introns*.\n2. HuR binds to AU-rich sequences (AUUUA) *and U-rich sequences*.  \n3. **HuR binding promotes target RNA stabilization (and binding by the other RBPs to the ARE promotes destabilization).**  \n\n\n## Set up annotation database {.smaller}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npossible_annotations <- builtin_annotations()\n\n# grep to keep those containing \"hg19\"\nhg19_annots <- grep(\"hg19_genes\", possible_annotations, value = T)\n\n# WHY DID WE PICK hg19?\n\n# let's keep 5' utr, cds, intron, 3' utr and intergenic\nmy_hg19_annots <- hg19_annots[c(3,4,7,10,11)]\n\n# build the annotation database\nannotations <- build_annotations(genome = 'hg19', annotations = my_hg19_annots)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding promoters...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding 1to5kb upstream of TSS...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding intergenic...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding cds...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding 5UTRs...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding 3UTRs...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding exons...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBuilding introns...\n```\n:::\n\n```{.r .cell-code}\nannotations\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGRanges object with 1446460 ranges and 5 metadata columns:\n                  seqnames        ranges strand |               id       tx_id\n                     <Rle>     <IRanges>  <Rle> |      <character> <character>\n        [1]           chr1   12190-12227      + |            CDS:1  uc010nxq.1\n        [2]           chr1   12595-12721      + |            CDS:2  uc010nxq.1\n        [3]           chr1   13403-13639      + |            CDS:3  uc010nxq.1\n        [4]           chr1   69091-70008      + |            CDS:4  uc001aal.1\n        [5]           chr1 324343-324345      + |            CDS:5  uc009vjk.2\n        ...            ...           ...    ... .              ...         ...\n  [1446456] chrUn_gl000246       1-38154      * | intergenic:17023        <NA>\n  [1446457] chrUn_gl000247        1-5786      * | intergenic:17024        <NA>\n  [1446458] chrUn_gl000247   10817-36422      * | intergenic:17025        <NA>\n  [1446459] chrUn_gl000248       1-39786      * | intergenic:17026        <NA>\n  [1446460] chrUn_gl000249       1-38502      * | intergenic:17027        <NA>\n                gene_id      symbol                  type\n            <character> <character>           <character>\n        [1]   100287102     DDX11L1        hg19_genes_cds\n        [2]   100287102     DDX11L1        hg19_genes_cds\n        [3]   100287102     DDX11L1        hg19_genes_cds\n        [4]       79501       OR4F5        hg19_genes_cds\n        [5]   100133331        <NA>        hg19_genes_cds\n        ...         ...         ...                   ...\n  [1446456]        <NA>        <NA> hg19_genes_intergenic\n  [1446457]        <NA>        <NA> hg19_genes_intergenic\n  [1446458]        <NA>        <NA> hg19_genes_intergenic\n  [1446459]        <NA>        <NA> hg19_genes_intergenic\n  [1446460]        <NA>        <NA> hg19_genes_intergenic\n  -------\n  seqinfo: 93 sequences (1 circular) from hg19 genome\n```\n:::\n:::\n\n\n\n\n\n## Annotate PAR-CLIP data {.smaller}  \n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nhur_regions <- read_regions(con = \"https://raw.githubusercontent.com/BIMSBbioinfo/RCAS_meta-analysis/master/rbp-binding-sites/SRR248532.clusters.bed\",\n                     genome = 'hg19', format = 'bed')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'XVector'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'Biostrings'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:Hmisc':\n\n    mask, translate\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:base':\n\n    strsplit\n```\n:::\n\n```{.r .cell-code}\n# let's annotate\nhur_annot <- annotate_regions(\n    regions = hur_regions,\n    annotations = annotations,\n    ignore.strand = FALSE,\n    quiet = FALSE) %>%\n  data.frame()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAnnotating...\n```\n:::\n\n```{.r .cell-code}\n# keep only columns we need\nmyInfo <- c(\"seqnames\",\"start\",\"end\",\"width\",\"strand\",\"annot.symbol\",\"annot.type\")\n\nhur_annot <- hur_annot[,myInfo] %>%\n  unique() \n\n# getting rid of the \"hg19_genes_\" string to simplify `annot.type`\nhur_annot$annot.type <- gsub(\"hg19_genes_\",\"\",hur_annot$annot.type)\n\ntable(hur_annot$annot.type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n     3UTRs      5UTRs        cds intergenic    introns \n     20936        621       1081      17084      71755 \n```\n:::\n:::\n\n\n\n\n## Summarize PAR-CLIP data to gene level {.smaller}  \n\nNow we want to get the following info:\n1. The # of HuR binding sites per gene.\n2. The # of HuR binding sites per region per gene.\n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# count the # sites per gene and annotation cat\nhur_gene_clip <- hur_annot %>%\n  filter(annot.type!=\"intergenic\") %>%\n  group_by(annot.symbol,annot.type) %>%\n  dplyr::count() %>%\n  pivot_wider(names_from = annot.type, values_from = n)\n\nhur_gene_clip <- hur_gene_clip %>% mutate_if(is.numeric , replace_na, replace = 0)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`mutate_if()` ignored the following grouping variables:\n• Column `annot.symbol`\n```\n:::\n\n```{.r .cell-code}\n# new column w/total # sites\nhur_gene_clip$total <- rowSums(hur_gene_clip[,-1]) \n\n# remove symbols that are NA\nhur_gene_clip <- hur_gene_clip %>%\n  filter(annot.symbol != \"NA\")\n\n# rename cols\ncolnames(hur_gene_clip)[1] <- \"Symbol\"\ncolnames(hur_gene_clip)[3:4] <- c(\"utr3\",\"utr5\")\n```\n:::\n\n\n\n\n## Binding sites per gene {.smaller} \n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\nhur_gene_clip_long  <- hur_gene_clip %>% \n  pivot_longer(-Symbol) \n\ncolnames(hur_gene_clip_long)  <-  c(\"symbol\",\"region\",\"sites\")\n\nggplot(hur_gene_clip_long %>% filter(region != \"total\"), aes(sites, fill=region)) +\n  geom_histogram() +\n  scale_x_log10() +\n  theme_cowplot()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Transformation introduced infinite values in continuous x-axis\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 23098 rows containing non-finite values (`stat_bin()`).\n```\n:::\n\n::: {.cell-output-display}\n![](slides-29_files/figure-html/explore-gene-1.png){width=672}\n:::\n:::\n\n\n\n## Explore intron vs 3' UTR sites {.smaller} \n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# how many genes have both intron and/or 3' UTR sites\nsite_combo <- hur_gene_clip[,2:5] %>%\n  mutate(\n    type = case_when(\n      introns > 0 & utr3 > 0     ~ \"intron_utr3\",\n      introns > 0 & utr3 ==  0 ~ \"intron\",\n      introns == 0 & utr3 >  0 ~ \"utr3\",\n      TRUE ~ \"other\")\n    ) \n\nggplot(site_combo, aes(type)) +\n  geom_bar(stat = \"count\") +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-29_files/figure-html/intron-utr3-clip-1.png){width=672}\n:::\n:::\n\n\n\n**HuR binds to both introns and 3' UTRs.**  \n\n**Genes more often have intronic and 3' UTR binding sites than either alone.**\n\n## Load HuR knockdown RNA-seq data {.smaller} \n\n1. primary (unspliced precursor) transcripts in `siGFP` treated cells.\n2. mature transcripts in `siGFP` treated cells.\n3. primary (unspliced precursor) transcripts in `siHuR` treated cells.\n4. mature transcripts in `siHuR` treated cells.\n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# load object called HuR.R\n\n# HuR siRNA RNAseq\nload(here(\"data/block-rna/HuR.R\"))\n\n\n# gene information\ngene_info <- read_csv(here(\"data/block-rna/geneInfo.csv.zip\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMultiple files in zip: reading 'geneInfo.csv'\nRows: 63568 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): Gene, Cat, Annotation, chr, Symbol, strand\ndbl (7): row, Exons, Introns, Transcripts, start, end, lengths\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nHuR$Gene <- rownames(HuR) # new column gene ids\n\nHuR <- left_join(HuR, gene_info[c(2,11)], by=\"Gene\") # Symbol\n\n# Filter for expression\nhur_filt_rnaseq <- HuR %>%\n  dplyr::filter(rowMeans(HuR[,1:4]) > 1) %>%\n  dplyr::select(-Gene)\n```\n:::\n\n\n\n## integrate siRNA and clip-seq data {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n#join kd and clip data\nkd_clip <- left_join(hur_filt_rnaseq, hur_gene_clip,  by = \"Symbol\") \n\n# convert all NA to 0\nkd_clip <- kd_clip %>% mutate_if(is.numeric , replace_na, replace = 0)\n\n# calculate log fold changes\nkd_clip <- kd_clip %>%\n  mutate(\n    lfc_mature = log2(Mature_siGFP) - log2(Mature_siHuR),\n    lfc_primary= log2(Primary_siGFP) - log2(Primary_siHuR)\n    )\n```\n:::\n\n\n\n\n\n## What is the relationship between HuR binding sites and change expression? {.smaller}\n\n**Does HuR promote the stability of its mRNA targets?**  \n\n**Does the number of HuR binding influence the degree of stabilization?**  \n\n**Does the region of HuR binding influence stabilization?**  \n\n\n\n## To target or not to target? {.smaller}\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# create new column for target or not target\n\nkd_clip$target <- case_when(\n  kd_clip$total > 0 ~  \"target\",\n  TRUE ~ \"not target\") \n\n\nggplot(kd_clip, aes(lfc_mature, color = target)) +\n  stat_ecdf() +\n  xlim(-2,2) +\n  theme_cowplot() +\n  ylab(\"cumulative fraction of LFC\") +\n  ggtitle(\"HuR Target vs Not Target\") +\n  geom_hline(yintercept=.75, color=\"grey\") +\n    geom_hline(yintercept=.5, color=\"grey\") +\n    geom_hline(yintercept=.25, color=\"grey\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 247 rows containing non-finite values (`stat_ecdf()`).\n```\n:::\n\n::: {.cell-output-display}\n![](slides-29_files/figure-html/target-not-1.png){width=672}\n:::\n:::\n\n\n\n## To target a little or a lot? {.smaller}\n\n**Does the number of HuR binding influence the degree of stabilization?**  \n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# hist(kd_clip$utr3)\n# let's make bins for # of sites per  3' UTR\n\nkd_clip$utr3_bin <- cut2(x = kd_clip$utr3, c(0,1,2,4,8,1000))\n\n# table(kd_clip$utr3_bin)\n\n# let's make bins for UTR\nkd_clip$utr3_bin <- recode_factor(kd_clip$utr3_bin,\n               \"   0\" = \"0\",\n               \"   1\" = \"1\",\n               \"[   2,   4)\" = \"2-3\",\n               \"[   4,   8)\" = \"4-7\",\n               \"[   8,1000]\" = \"8+\"\n               )\n\n\nggplot(data = kd_clip, aes(x = lfc_mature, color = utr3_bin)) +\n  stat_ecdf() +\n  xlim(-2,2) +\n  theme_cowplot() +\n  ylab(\"cumulative fraction- LFCs\") +\n  ggtitle(\"# of HuR binding sites in 3' UTR\") +\n  geom_hline(yintercept=.75, color=\"grey\", linetype = \"dashed\") +\n  geom_hline(yintercept=.5, color=\"grey\", linetype = \"dashed\") +\n  geom_hline(yintercept=.25, color=\"grey\", linetype = \"dashed\") +\n  geom_segment(aes(x = 0, y = 0, xend = 0, yend = .5, colour = \"segment\"), color=\"black\", linetype = \"dashed\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 247 rows containing non-finite values (`stat_ecdf()`).\n```\n:::\n\n::: {.cell-output-display}\n![](slides-29_files/figure-html/target-quant-1.png){width=672}\n:::\n:::\n\n\n\n\n## More binding -> more stabilization? {.smaller}\n\n**TEST: Does the number of HuR binding influence the degree of stabilization?**  \n\n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# keep only finite values for lfc_mature and lfc_primary\nkd_clip_targets <- kd_clip[is.finite(kd_clip$lfc_mature),]\n\n# IMPORTANT relevel indicating what everything will be compared to\nkd_clip_targets$utr3_bin <- relevel(factor(kd_clip_targets$utr3_bin), ref = \"0\")\n\n\n# calculate fit using `lm`\nfit_bins <- lm(data = kd_clip_targets,\n   formula = lfc_mature ~ utr3_bin)\n\n# examine estimates and p-vals\ntidy(fit_bins) %>%\n  gt() \n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"thtbshypvn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#thtbshypvn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#thtbshypvn thead, #thtbshypvn tbody, #thtbshypvn tfoot, #thtbshypvn tr, #thtbshypvn td, #thtbshypvn th {\n  border-style: none;\n}\n\n#thtbshypvn p {\n  margin: 0;\n  padding: 0;\n}\n\n#thtbshypvn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#thtbshypvn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#thtbshypvn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#thtbshypvn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#thtbshypvn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#thtbshypvn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#thtbshypvn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#thtbshypvn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#thtbshypvn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#thtbshypvn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#thtbshypvn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#thtbshypvn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#thtbshypvn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#thtbshypvn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#thtbshypvn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thtbshypvn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#thtbshypvn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#thtbshypvn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#thtbshypvn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thtbshypvn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#thtbshypvn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thtbshypvn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#thtbshypvn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thtbshypvn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#thtbshypvn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#thtbshypvn .gt_left {\n  text-align: left;\n}\n\n#thtbshypvn .gt_center {\n  text-align: center;\n}\n\n#thtbshypvn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#thtbshypvn .gt_font_normal {\n  font-weight: normal;\n}\n\n#thtbshypvn .gt_font_bold {\n  font-weight: bold;\n}\n\n#thtbshypvn .gt_font_italic {\n  font-style: italic;\n}\n\n#thtbshypvn .gt_super {\n  font-size: 65%;\n}\n\n#thtbshypvn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#thtbshypvn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#thtbshypvn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#thtbshypvn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#thtbshypvn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#thtbshypvn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#thtbshypvn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"term\">term</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"estimate\">estimate</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"std.error\">std.error</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"statistic\">statistic</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"p.value\">p.value</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"term\" class=\"gt_row gt_left\">(Intercept)</td>\n<td headers=\"estimate\" class=\"gt_row gt_right\">0.0874010</td>\n<td headers=\"std.error\" class=\"gt_row gt_right\">0.006974632</td>\n<td headers=\"statistic\" class=\"gt_row gt_right\">12.53127</td>\n<td headers=\"p.value\" class=\"gt_row gt_right\">8.011384e-36</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\">utr3_bin1</td>\n<td headers=\"estimate\" class=\"gt_row gt_right\">0.2269404</td>\n<td headers=\"std.error\" class=\"gt_row gt_right\">0.016344495</td>\n<td headers=\"statistic\" class=\"gt_row gt_right\">13.88482</td>\n<td headers=\"p.value\" class=\"gt_row gt_right\">1.572303e-43</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\">utr3_bin2-3</td>\n<td headers=\"estimate\" class=\"gt_row gt_right\">0.4081967</td>\n<td headers=\"std.error\" class=\"gt_row gt_right\">0.016739426</td>\n<td headers=\"statistic\" class=\"gt_row gt_right\">24.38535</td>\n<td headers=\"p.value\" class=\"gt_row gt_right\">1.562423e-128</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\">utr3_bin4-7</td>\n<td headers=\"estimate\" class=\"gt_row gt_right\">0.5659714</td>\n<td headers=\"std.error\" class=\"gt_row gt_right\">0.019403160</td>\n<td headers=\"statistic\" class=\"gt_row gt_right\">29.16903</td>\n<td headers=\"p.value\" class=\"gt_row gt_right\">2.228474e-181</td></tr>\n    <tr><td headers=\"term\" class=\"gt_row gt_left\">utr3_bin8+</td>\n<td headers=\"estimate\" class=\"gt_row gt_right\">0.6346001</td>\n<td headers=\"std.error\" class=\"gt_row gt_right\">0.025873820</td>\n<td headers=\"statistic\" class=\"gt_row gt_right\">24.52673</td>\n<td headers=\"p.value\" class=\"gt_row gt_right\">5.678822e-130</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\n\n## More binding -> more stabilization? {.smaller}\n\n**TEST: Does the number of HuR binding influence the degree of stabilization?** \n\n\n\n::: {.cell output-location='column-fragment'}\n\n```{.r .cell-code}\n# mean lfc of mRNAs with no 3' UTR binding sites\nref_mean <- kd_clip_targets %>%\n  filter(utr3_bin == \"0\") %>%\n  pull(lfc_mature) %>%\n  mean()\n\n\n# examine estimates and p-vals\ntidy(fit_bins) %>%\n  ggplot(data=.,\n         aes(x=term,\n             y=estimate,\n             fill=-log10(p.value)\n             )\n         ) +\n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  geom_hline(yintercept = ref_mean,\n             color = \"red\") +\n  theme_cowplot()\n```\n\n::: {.cell-output-display}\n![](slides-29_files/figure-html/target-quant-viz-1.png){width=672}\n:::\n:::",
    "supporting": [
      "slides-29_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}