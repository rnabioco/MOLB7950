{
  "hash": "c5444ab3ff7a5d1be33479a8d0a13db1",
  "result": {
    "markdown": "---\ntitle: \"DNA Block - Problem Set 18\"\nexecute: \n  eval: false\n---\n\n\n## Problem Set\n\nTotal points: 20. First problem is worth 7 points, second problem is worth 13 points.\n\n## Load libraries\n\nStart by loading libraries you need analysis in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(cowplot)\nlibrary(valr)\n```\n:::\n\n\nLoad the data from the MNase-seq experiment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnase_tbl <- read_bed(\n  here(\"data/block-dna/yeast_mnase_chrII.bed.gz\")\n)\n```\n:::\n\n\nIn class we learned that MNase digestion yields nucleosomal \"footprints\" of \\~150 bp in size. I've added blue vertical lines to emphasize positions of the major peak (intact nucleosomes) as well as smaller \"sub-nucleosomal\" peak.\n\n![](../img/ps-17-mnase-histogram.png)\n\nWe can calculate the counts for the histogram above and more precisely determine the maximum signal using `which.max()` to identify the *index* of the maximum value in a vector (*not* the value itself!):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfrag_hist <-\n  mnase_tbl |>\n  mutate(frag_len = end - start) |>\n  count(frag_len)\n\n# `which.max` takes a vector and gives us the index of the maximum value\nmax_idx <- which.max(frag_hist$n)\n\n# now we can use index to find the abundant fragment size.\n# we'll use `ncp_max` later in question 2.\nncp_max <- frag_hist$frag_len[max_idx]\n```\n:::\n\n\nSo this tells us that that the most abundant fragment size in the library is ??? bp.\n\n## Question 1 -- 7 points\n\nLet's take a closer look at the some of the smaller fragments in the MNase experiment. In particular, let's zoom in on the populations of fragments that are smaller than 1 nucleosome in size, the peak between 85 and 95 bp (the left-most blue vertical line).\n\n1.  Use the above strategy to precisely determine the peak of this smaller size range. How big are those fragments? These are called \"sub-nucleosomal\" fragments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# store the maximum value in `subnuc_max`. we'll use it later in question 2.\n```\n:::\n\n\n> The maximum sub-nucleosomal fragments size is ??? bp.\n\n2.  Do this one more time, and identify the position of maximum signal in the disome peak (i.e., the fragments protected by two nucleosomes).\n\n\n::: {.cell}\n\n:::\n\n\n3.  Recreate the histogram using ggplot2 (using relevant code from class 17) and add the blue vertical lines at the peak positions you calculated, including the position of the disomes above.\n\n\n::: {.cell}\n\n:::\n\n\n## Question 2 -- 13 points\n\nNext we're going to look at *where* these sub-sucleosomes are with respect to intact nucleosomes.\n\nOur strategy will be to compare the density of sub-nucleosomes relative to the mid-points of previously mapped nucleosomes. Specifically, our reference point will be the midpoints of the +1 nucleosomes.\n\nSo you'll make a metaplot, but instead of using transcription start sites as the reference point, we'll use the midpoints of the +1 nucleosome, and instead of MNase-seq signal density, you'll count up the number of individual reads that intersect with windows around those midpoints.\n\n1.  First, load the relevant data. We'll re-use the `yeast_mnase_chrII.bed.gz` data you loaded above, plus you'll need to load two other files:\n\n    -   a \"genome\" file, `sacCer3.chrom.sizes`\n    -   a BED file, `yeast_p1_chrII.bed.gz` which contains the mid-points of the +1 nucleosomes on chromosome 22. Recall that the +1 nucleosome is the nucleosome downstream of the transcription start site.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenome <- read_???(here(\"data/block-dna/sacCer3.chrom.sizes\"))\np1_tbl <- read_???(here(\"data/block-dna/yeast_p1_chrII.bed.gz\"))\n```\n:::\n\n\n2.  Next, we need the mid-points of nucleosomes for comparison. The following function needs fixing. The midpoint is the coordinate halfway between the start and end of a given interval.\n\n    You're going to provide the `mnase_tbl` defined in question 1 to this function, which then:\n\n    -   calculates fragment lengths\n\n    -   filters them based on `min_len` and `max_len`\n\n    -    calculates the midpoints for each interval\n\n        The output is a new tibble with columns `chrom`, `start`, and `end`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncalc_mids <- function(tbl, min_len, max_len) {\n  tbl |>\n    mutate(\n      frag_len = ___ - ___\n    ) |>\n    filter(\n      frag_len >= ___ & frag_len <= ___\n    ) |>\n    mutate(\n      # calculate the half-size interval using `end` and `start,\n      # then add that value to `start`\n      midpoint = ___\n    ) |>\n    select(chrom, midpoint) |>\n    rename(start = midpoint) |>\n    mutate(end = start + 1)\n}\n```\n:::\n\n\n3.  Next, use that function to calculate midpoints, and expand these midpoints by 20 bp in each direction with `bed_slop()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncp_mids_tbl <-\n  # first calculate midpoints for nucleosome fragments within 3 bp length `ncp_max`\n  calc_mids(mnase_tbl, ___ - 3, ___ + 3) |>\n  # expand those windows to get a larter window for intersection\n  bed_slop(genome, both = 20)\n\n# now, do the same for nucleosome fragments of length `subnuc_max`\nsubnuc_mids_tbl <-\n  calc_mids(mnase_tbl, ___ - 3, ___ + 3) |>\n  bed_slop(genome, both = 20)\n```\n:::\n\n\n4.  Next, we need to make the reference points for a metaplot. We'll look 100 bp up- and downstream of the +1 nucleosome positions, and make windows that are 1 bp in size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1_win_tbl <-\n  bed_???(\n    p1_tbl,\n    genome,\n    both = 100\n  ) |>\n  bed_???(win_size = 1)\n```\n:::\n\n\n5.  Almost there! Now you just need to identify the number of short and long nuclesome fragments (based on their midpoints) that intersect with the +1 nucleosomes you defined above.\n\n    Use `bed_intersect()` to identify fragments that overlap, and then just count the number of fragments per `.win_id` (don't forget the suffix). Note you will do this separately for the short and long fragments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nncp_mids_summary_tbl <-\n  bed_intersect(\n    p1_win_tbl,\n    ncp_mids_tbl\n  ) |>\n  dplyr::count(___) |>\n  mutate(type = \"Intact nucleosomes (~149 bp)\")\n\nsubnuc_mids_summary_tbl <-\n  bed_intersect(\n    p1_win_tbl,\n    subnuc_mids_tbl\n  ) |>\n  dplyr::count(___) |>\n  mutate(type = \"Sub-nucleosomes (~90 bp)\")\n```\n:::\n\n\n6.  The following joins the tables you made together, and makes the x-axis more informative, by converting to relative genomic position rather than window ID.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwin_ids <- seq(-100, 100, 1)\n\nall_tbl <- bind_rows(\n  ncp_mids_summary_tbl,\n  subnuc_mids_summary_tbl\n) |>\n  mutate(win_ids = win_ids, .by = \"type\")\n```\n:::\n\n\n7.  Finally, we plot the data with position on the x-axis, and count on the y-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  all_tbl,\n  aes(win_ids, n)\n) +\n  geom_???(color = \"red\") +\n  facet_wrap(\n    ~ type,\n    scales = \"free_y\"\n  ) +\n  theme_minimal_grid() +\n  labs(\n    x = \"Position relative to +1 nucleosome midpoints\",\n    y = \"Number of intersecting fragments\",\n    title = \"Fragment density around +1 nucleosome midpoints\"\n  )\n```\n:::\n\n\n## Output\n\nYour plot should look like this.\n\n![Plot output of step 7](../img/ps-17-nucleosome-histograms.png)\n\n## Interpretation\n\nHow do you interpret these plots?\n\nRationalize the pattern for intact nucleosomes. What pattern did you expect to see?\n\n> Answer.\n\nRationalize the pattern for sub-nucleosomes. How would you describe the positions of sub-nucleosomal fragments, relative to the +1 nucleosome midpoints? What might this mean with respect to gene transcription?\n\n> Answer.\n\nWhat do the differences between signal magnitudes (reflected by the y-axis) mean?\n\n> Answer.\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output. Then paste the URL of this Posit Cloud project into the problem set on Canvas.\n",
    "supporting": [
      "ps-18_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}