{
  "hash": "e6080f247ec2d60acfb038e6151099c4",
  "result": {
    "markdown": "---\ntitle: \"RNA Block - Problem Set 29\"\n---\n\n\n\n\n\n## Problem Set\n\nTotal points: 20. Q1 - 10 pts, Q2 - 10 points each.\n\nExercises: We want to visualize 1) if RNAs that have HuR binding sites introns, 3' UTRs, or both exhibit different degrees of stabilization upon HuR knockdown **AND** 2) which of those categories have a statistically significant different LFC than non-targeted RNAs.\n\nThe model we were tesing is that HuR binds to AU-rich elements (ARE) in 3â€™ UTRs of mRNAs to promote mRNA stability.\n\n![](/img/block-rna/hur_mechanism.png)\n\nThis model makes a few specific prediction:  \n\n1. HuR binds to the 3' UTR *and introns*.\n2. HuR binds to AU-rich sequences (AUUUA) *and U-rich sequences*.  \n3. **HuR binding promotes target RNA stabilization (and binding by the other RBPs to the ARE promotes destabilization).**  \n\nMore specifically, we have been exploring the following questions  about the relationship between HuR binding sites and change expression:  \n\n~~Does HuR promote the stability of its mRNA targets?~~ \n\n~~Does the number of HuR binding influence the degree of stabilization?~~  \n\n**Does the region of HuR binding influence stabilization?** and **Which regions are statistically significant?**  \n\nWe want to visualize 1) if RNAs that have HuR binding sites introns, 3' UTRs, or both exhibit different degrees of stabilization upon HuR knockdown **AND** 2) which of those categories have a statistically significant different LFC than non-targeted RNAs. For simplicity, you will categorize genes as either:\n1. intron (but not 3' UTR, ignore other annotation categories)   \n2. utr3  (but not 3' intron, ignore other annotation categories)   \n3. intron and utr3 (ignore other annotation categories)\n4. other (genes w/binding sites but none in intron either 3' UTR)  \n5. not a target (this is the reference comparison)\n\n\n\n## 1. Annotate HuR binding sites.\n\n## 1a. Build annotation database  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What annotation categories are available?\npossible_annotations <- builtin_annotations()\n\n# Keep only those containing \"hg19\"\nhg19_annots <- grep(\"hg19_genes\", possible_annotations, value = T)\n\n# let's keep 5' utr, cds, intron, 3' utr and intergenic\nmy_hg19_annots <- hg19_annots[c(3,4,7,10,11)]\n\n\n# build the annotation database\nannotations <- build_annotations(genome = 'hg19', annotations = my_hg19_annots)\n```\n:::\n\n\n\n## 1b. Annotate the HuR binding sites\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# read hur binding sites\nhur_regions <- read_regions(con = \"https://raw.githubusercontent.com/BIMSBbioinfo/RCAS_meta-analysis/master/rbp-binding-sites/SRR248532.clusters.bed\",\n                     genome = 'hg19', format = 'bed')\n\n# let's annotate\nhur_annot <- annotate_regions(\n    regions = hur_regions,\n    annotations = annotations,\n    ignore.strand = FALSE,\n    quiet = FALSE) %>%\n  data.frame()\n\n# keep only columns we need\nmyInfo <- c(\"seqnames\",\"start\",\"end\",\"width\",\"strand\",\"annot.symbol\",\"annot.type\")\n\nhur_annot <- hur_annot[,myInfo] %>%\n  unique() \n\n# getting rid of the \"hg19_genes_\" string to simplify `annot.type`\nhur_annot$annot.type <- gsub(\"hg19_genes_\",\"\",hur_annot$annot.type)\n```\n:::\n\n\n## 1c. Calculate a summary table for HuR binding sites per gene per region.\n\nNow we want to assemble the # of HuR binding sites per region per gene.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# count the # sites per gene and annotation cat\nhur_gene_clip <- hur_annot %>%\n  filter() %>%\n  group_by() %>%\n  dplyr::count() %>%\n  pivot_wider()\n\nhur_gene_clip <- hur_gene_clip %>%\n  mutate_if(is.numeric, replace_na, replace = 0)\n\n# new column w/total # sites\nhur_gene_clip$total <- rowSums(hur_gene_clip[,-1]) \n\n# remove symbols that are NA\nhur_gene_clip <- hur_gene_clip %>%\n  filter(annot.symbol != \"NA\")\n\n# rename cols\ncolnames(hur_gene_clip)[1] <- \"Symbol\"\ncolnames(hur_gene_clip)[3:4] <- c(\"utr3\",\"utr5\")\n\n\n# for each gene use case_when to figure out categories of intron and/or 3' UTR binding\nsite_combo <- hur_gene_clip %>%\n  mutate(\n    type = case_when(\n      \n    )\n    ) \n```\n:::\n\n\n## 1c. import kd data and join w/clip data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load object called HuR.R\n\n# HuR siRNA RNAseq\nload(here(\"data/block-rna/HuR.R\"))\n\n\n# gene information\ngene_info <- read_csv(here(\"data/block-rna/geneInfo.csv.zip\"))\n\nHuR$Gene <- rownames(HuR) # new column gene ids\n\nHuR <- left_join(HuR, gene_info[c(2,11)], by=\"Gene\") # Symbol\n\n# Filter for expression\nhur_filt_rnaseq <- HuR %>%\n  dplyr::filter(rowMeans(HuR[,1:4]) > 1) %>%\n  dplyr::select(-Gene)\n\nkd_clip <- left_join(hur_filt_rnaseq, ??,  by = \"Symbol\") \n\n# convert all NA to 0\nkd_clip$type[is.na(kd_clip$type)] <- \"not_target\"\n\n# calculate log fold changes for mature\nkd_clip <- kd_clip %>%\n  mutate(\n    lfc_mature = log2(Mature_siGFP) - log2(Mature_siHuR)\n    )\n\n# relevel so \"not_target\" is ref\nkd_clip$?? <- relevel(x = factor(??),\n                        ref = \"not_target\")\n```\n:::\n\n\n## 1d. Visualize binding region types and LFC\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make cdf plot of LFC colored by binding region categories\n```\n:::\n\n\n\n![](/img/block-rna/hur_region_kd.png)\n\n## 2. Statistical test\n\nIs there a statistically significant different in LFC for the different binding region categories compared tonon-targeted RNAs. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep only finite values for lfc_mature\nkd_clip <- kd_clip[is.finite(kd_clip$lfc_mature),]\n\n# calculate fit using `lm`\nfit_bins <- lm(\n  data = kd_clip,\n  formula = ?? ~ ??)\n\n\n# plot estimates and p-vals\n```\n:::\n\n\n![](/img/block-rna/hur_region_kd_estimates.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}