{
  "hash": "ad091dd81e2d5ffdca8d1c87a6171239",
  "result": {
    "markdown": "---\ntitle: \"RNA Block - Problem Set 25\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3          ✔ readr     2.1.4     \n✔ forcats   1.0.0          ✔ stringr   1.5.0     \n✔ ggplot2   3.4.3          ✔ tibble    3.2.1     \n✔ lubridate 1.9.3          ✔ tidyr     1.3.0     \n✔ purrr     1.0.2.9000     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /Users/nmukherjee/Dropbox/My Mac (Neelanjan’s MacBook Pro)/Documents/GitHub/molb-7950\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggrepel)\nlibrary(pheatmap)\nlibrary(RColorBrewer)\n```\n:::\n\n\n\n## Problem Set\n\nTotal points: 20. Q1 - 10 pts, Q2 - 10 points each.\n\nExercises: Take rMATS SE output, apply filters, and make a volcano plot. Also, make a heatmap of the significant PSI for each sample using all replicates. NOTE: this analysis will be performed for the **mutually exclusive exons**.\n\n# Exercises\n\nWe worked with an rMATS output file from an experiment in which mouse embryonic stem cells had been treated with either an shRNA against RBFOX2 or a control, nontargeting shRNA.  We applied filters to remove any event from consideration in which the number of informative reads for that event (IJC + SJC) was less than 20 in **any** sample.\n\n\n\n# Q1 make volcano plot\n\nRead in the rMATS output for **mutually exclusive exons**. Apply a new read coverage filter such that any event with less than **10** informative junction reads in **any** sample is removed.  Then make a volcano plot where each dot is an event, the x-axis is the difference in PSI between the two conditions (aka `IncLevelDifference`) and the y axis is -log10 of the `FDR`. Color dots that pass a significance threshold (FDR < 0.05) in red. Label the 4 most significant events (i.e. 4 lowest FDR values) with the name of the gene they are in.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Read in table\npsis <- read.table(here(\"data/block-rna/rMATS/MXE.MATS.JC.txt.gz\"), header = T) %>%\n  #Get rid of columns we aren't really going to use.\n  dplyr::select(., c('ID', 'geneSymbol', 'IJC_SAMPLE_1', 'SJC_SAMPLE_1', 'IJC_SAMPLE_2', 'SJC_SAMPLE_2', 'FDR', 'IncLevel1', 'IncLevel2', 'IncLevelDifference'))\n\n# Split the replicate read counts that are separated by commas into different columns\npsis <- psis %>%\n  separate(., col = IJC_SAMPLE_1, into = c('IJC_S1R1', 'IJC_S1R2', 'IJC_S1R3', 'IJC_S1R4'), sep = ',', remove = T, convert = T) %>%\n  separate(., col = SJC_SAMPLE_1, into = c('SJC_S1R1', 'SJC_S1R2', 'SJC_S1R3', 'SJC_S1R4'), sep = ',', remove = T, convert = T) %>%\n  separate(., col = IJC_SAMPLE_2, into = c('IJC_S2R1', 'IJC_S2R2', 'IJC_S2R3', 'IJC_S2R4'), sep = ',', remove = T, convert = T) %>%\n  separate(., col = SJC_SAMPLE_2, into = c('SJC_S2R1', 'SJC_S2R2', 'SJC_S2R3', 'SJC_S2R4'), sep = ',', remove = T, convert = T)\n\n#filter events (reads >= 10)\nthresh <- 10\n\npsis_filt <- psis %>%\n  mutate(., S1R1counts = IJC_S1R1 + SJC_S1R1) %>%\n  mutate(., S1R2counts = IJC_S1R2 + SJC_S1R2) %>%\n  mutate(., S1R3counts = IJC_S1R3 + SJC_S1R3) %>%\n  mutate(., S1R4counts = IJC_S1R4 + SJC_S1R4) %>%\n  mutate(., S2R1counts = IJC_S2R1 + SJC_S2R1) %>%\n  mutate(., S2R2counts = IJC_S2R2 + SJC_S2R2) %>%\n  mutate(., S2R3counts = IJC_S2R3 + SJC_S2R3) %>%\n  mutate(., S2R4counts = IJC_S2R4 + SJC_S2R4) %>%\n  filter(., S1R1counts >= thresh & S1R2counts >= thresh & S1R3counts >= thresh & S1R4counts >= thresh &\n           S2R1counts >= thresh & S2R2counts >= thresh & S2R3counts >= thresh & S2R4counts >= thresh)\n\n# Separate the inclusion levels for each sample and replicte (you will need this later) \n\npsis_filt_psi <- psis_filt %>%\n  separate(., col = IncLevel1, into = c('PSI_S1R1', 'PSI_S1R2', 'PSI_S1R3', 'PSI_S1R4'), sep = ',', remove = T, convert = T) %>%\n  separate(., col = IncLevel2, into = c('PSI_S2R1', 'PSI_S2R2', 'PSI_S2R3', 'PSI_S2R4'), sep = ',', remove = T, convert = T)\n  \n\n# Add another column to table that says whether or not this event is significant (FDR < 0.05)\n\npsis_filt_psi <- psis_filt_psi %>%\n   mutate(., sig = ifelse(FDR <= 0.05, 'sig', 'ns'))\n\n\n# Volcano Plot with sig events in red\nggplot(data = psis_filt_psi,\n       aes(x=IncLevelDifference,\n           y = -log10(FDR),\n           color =sig\n           )\n       ) +\n  scale_color_manual(values = c(\"black\",\"red\")) +\n  geom_point() +\n  theme_cowplot()\n```\n:::\n\n\n![explosion](/img/block-rna/psi_volcano.png)\n\n\n# Exercise 2 \n\nTake your skipped exon data and make a heatmap where the rows are events, columns are samples (each replicate separately, 4 replicates per condition), and the color of the cell is a scaled PSI value.  Only plot significant (FDR < 0.05) events.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter for those that are significant (FDR < 0.05) and only keep columns with inclusion differences\n\nrownames(psis_filt_psi) <- paste(psis_filt_psi$geneSymbol, psis_filt_psi$ID, sep = \"_\")\n\npsi_hm <- psis_filt_psi %>%\n  filter(FDR < 0.05) %>% \n  select(-FDR) %>% \n  select(., c(contains('PSI')))\n\n\n#Plot with pheatmap(), using scale = 'row' to plot scaled PSI values\npheatmap(psi_hm, filename = here(\"img/block-rna/psi_heatmap.png\"),\n         clustering_method = \"ward.D2\",\n         scale = \"row\")\n```\n:::\n\n\n![you don't need to have the gene symbols](/img/block-rna/psi_heatmap.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}