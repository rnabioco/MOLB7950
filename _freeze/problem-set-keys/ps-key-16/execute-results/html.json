{
  "hash": "cff8ac1232bafc5844412c973b00e803",
  "result": {
    "markdown": "---\ntitle: \"DNA Block - Problem Set 16\"\n---\n\n\n## Problem Set\n\nYou have two tasks for this problem set.\n\n1. Read the two papers in the [preparation](prepare/prepare-17.qmd) document before class on Wed.\n\n2. Look over the vignettes for the software in the preparation document. Use valr to complete the tasks below. These problems are due Wed at 5pm.\n\nEach problem below is worth **15 points**.\n\n## Setup\n\nLoad libraries you'll need for analysis below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(valr)\n```\n:::\n\n\n## Question 1 -- 5 points\n\nWe'll work with a few different files for the next questions.\n\n- `hg19.refGene.chr22.bed.gz` is a BED12 file containing gene (mRNA) information for chr22.\n- `hg19.rmsk.chr22.bed.gz` is a BED6 containing repetitive elements in the human genome.\n- `hg19.dnase1.bw` is a bigWig file containing DNaseI signal.\n\nYou can find the path to each with `valr_example()`. Load each one invdividually using the `read_*` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_tbl <- read_bed(valr_example(\"hg19.refGene.chr22.bed.gz\"))\nrmsk_tbl <- read_bed(valr_example(\"hg19.rmsk.chr22.bed.gz\"))\ndnase_tbl <- read_bigwig(valr_example(\"hg19.dnase1.bw\"))\n```\n:::\n\n\nSome valr functions require a \"genome\" file, which is just a tibble of chromosome names and sizes.\n\nThe hg19 genome file is available at `valr_example(\"hg19.chrom.sizes.gz\")`. Use `read_genome()` to load it.\n\nInspect the tibble. How many columns does it have? What is the largest chromosome?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenome <- read_genome(valr_example(\"hg19.chrom.sizes.gz\"))\n\nncol(genome)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\narrange(genome, desc(size)) |> head(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 2\n  chrom      size\n  <chr>     <dbl>\n1 chr1  249250621\n```\n\n\n:::\n:::\n\n\n## Question 2 -- 5 points\n \nWhich repeat class covers the largest amount of chromosome 22?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# N.B.: the following doesn't collapse intervals within repeat classes, but it's a\n# decent approximation.\nrmsk_tbl |>\n  mutate(int_size = end - start) |>\n  group_by(name) |>\n  summarize(total_size = sum(int_size)) |>\n  arrange(desc(total_size))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,053 x 2\n   name      total_size\n   <chr>          <int>\n 1 ALR/Alpha     110767\n 2 AluSx1        103112\n 3 AluY           94814\n 4 AluSx          88923\n 5 MIRb           83177\n 6 L2a            73070\n 7 AluSz          72584\n 8 AluJb          67103\n 9 AluSq2         61591\n10 AluJr          49571\n# i 1,043 more rows\n```\n\n\n:::\n:::\n\n\n## Question 3\n\nWhich promoter has the highest DNase I accessibility?\n\n1. Use the `create_tss()` function to generate transcription start sites from the refGene annotations. How be are these intervals?\n2. Generate some promoter regions with `bed_slop()`, adding 500 bp up- and downstream of the TSS. `bed_slop()` requires the genome file above.\n3. Use `bed_map()` to calculate the total (i.e., summed) DNase I signal in the promoters (the `score` column in the DNase file).\n\nWhich gene has the highest DNase I in the region you defined above?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntss_tbl <- create_tss(gene_tbl)\npromoter_tbl <- bed_slop(tss_tbl, genome, both = 500)\n\nbed_map(\n  promoter_tbl,\n  dnase_tbl,\n  score_sum = sum(score)\n) |>\n  arrange(desc(score_sum)) |>\n  head(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 7\n  chrom    start      end name      score strand score_sum\n  <chr>    <dbl>    <dbl> <chr>     <chr> <chr>      <dbl>\n1 chr22 17082300 17083301 NR_001591 0     +            863\n```\n\n\n:::\n:::\n\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of this Posit Cloud project into the problem set on Canvas.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}