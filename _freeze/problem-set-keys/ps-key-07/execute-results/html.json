{
  "hash": "f5b6a2856ee32332d13ada7fc9f7e30c",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp Problem Set 6\"\nauthor: \"Your name here\"\ndate: last-modified \n---\n\n\n## Problem Set\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not\nallowed to post correct answers in slack.\n\n**The problem set is due 12pm on Sept 1.**\n\n## Grading rubric\n\n- Everything is good: full points\n- Partially correct answer: depends on how many steps are correct\n- Reasonable attempt: half points\n\n## Libraries\n\nLoad the libraries you need for analysis below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.3     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.3     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.2     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jayhesselberth/devel/rnabioco/molb-7950\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\n## Question 1 - **5 points**\n\nRun the following chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\nx <- sample(1000, replace = TRUE)\n```\n:::\n\n\nNow use logical indexing to find the number of values > 450 in `x`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# either are correct\nsum(x > 450)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 566\n```\n\n\n:::\n\n```{.r .cell-code}\nlength(x[x > 450])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 566\n```\n\n\n:::\n:::\n\n\n## Question 2 - **5 points**\n\nCount the number of species in the `penguins` tibble using `forcats::fct_count()` \n\nCount number of island + sex combinations using `dplyr::count()`, and sort the result by count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforcats::fct_count(penguins$island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  f             n\n  <fct>     <int>\n1 Biscoe      168\n2 Dream       124\n3 Torgersen    52\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::count(penguins, island, sex, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 x 3\n  island    sex        n\n  <fct>     <fct>  <int>\n1 Biscoe    male      83\n2 Biscoe    female    80\n3 Dream     male      62\n4 Dream     female    61\n5 Torgersen female    24\n6 Torgersen male      23\n7 Biscoe    <NA>       5\n8 Torgersen <NA>       5\n9 Dream     <NA>       1\n```\n\n\n:::\n:::\n\n\n## Question 3 - **5 points**\n\nUse `stringr::str_c()` to combine upper and lowercase letters from `letters` and `LETTERS` with a slash.\n\nYour answer should look like: `\"A/a\" \"B/b\" \"C/c\"` etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- str_c(LETTERS, \"/\", letters)\n```\n:::\n\n\nUse `stringr::str_split()` or one of its variants to split up the strings you made above and extract the letter after the slash.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_split_i(combined, \"/\", 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_split(combined, \"/\") |>\n  purrr::map(2) |>\n  unlist()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n```\n\n\n:::\n:::\n\n\n## Question 4 - **5 points**\n\nCreate a ggplot using the diamonds data set.\n\n- Generate a `ggridges::geom_density_ridges()` for the prices, with a different `fill` color for each `cut`.\n- Recolor the densities using `ggplot2::scale_fill_brewer()`, choosing a specific palette.\n- make the outline of the densities black, and change their alpha to 0.2.\n- change the theme to `cowplot::theme_minimal_grid()`\n- remove the legend (google: \"remove legend from ggplot2\")\n- add an informative title and subtitle using `ggplot2::labs()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggridges)\nlibrary(cowplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'cowplot'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:lubridate':\n\n    stamp\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(\n  diamonds,\n  aes(\n    x = price,\n    y = cut,\n    fill = cut\n  )\n) +\n  geom_density_ridges(color = \"black\", alpha = 0.2) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_minimal_grid() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPicking joint bandwidth of 458\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ps-key-07_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Submit\n\nBe sure to click the \"Render\" button to render the HTML output.\n\nThen paste the URL of this Posit Cloud project into the problem set on Canvas.\n",
    "supporting": [
      "ps-key-07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}