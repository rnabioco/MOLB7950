{
  "hash": "2d159fdea7ca4233b04761f643255f4a",
  "result": {
    "markdown": "---\ntitle: \"Exercises-05\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/28/2020\"\n---\n\n\n\n\n### R bootcamp review\n\n* tidyr - nothing requested\n\n* dplyr\n  - group_by - examples below\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# import data\ndata_transcript_exp_tidy <- read_csv(\"data/data_transcript_exp_tidy.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 600 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (4): ensembl_transcript_id, type, time, replicate\ndbl (1): count\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# save to have smaller name\ndata <- data_transcript_exp_tidy\n# examples of grouping by differently - type these into the console to see the difference\ngroup_by(data, type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 x 5\n# Groups:   type [1]\n   ensembl_transcript_id      type  time  replicate count\n   <chr>                      <chr> <chr> <chr>     <dbl>\n 1 ENST00000327044.6_51_2298  rna   0h    rep1        243\n 2 ENST00000327044.6_51_2298  rna   0h    rep2        322\n 3 ENST00000327044.6_51_2298  rna   0h    rep3        303\n 4 ENST00000327044.6_51_2298  rna   14h   rep1        177\n 5 ENST00000327044.6_51_2298  rna   14h   rep2        177\n 6 ENST00000327044.6_51_2298  rna   14h   rep3        239\n 7 ENST00000338591.7_360_2034 rna   0h    rep1         19\n 8 ENST00000338591.7_360_2034 rna   0h    rep2         17\n 9 ENST00000338591.7_360_2034 rna   0h    rep3         15\n10 ENST00000338591.7_360_2034 rna   14h   rep1          9\n# i 590 more rows\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, replicate)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 x 5\n# Groups:   replicate [3]\n   ensembl_transcript_id      type  time  replicate count\n   <chr>                      <chr> <chr> <chr>     <dbl>\n 1 ENST00000327044.6_51_2298  rna   0h    rep1        243\n 2 ENST00000327044.6_51_2298  rna   0h    rep2        322\n 3 ENST00000327044.6_51_2298  rna   0h    rep3        303\n 4 ENST00000327044.6_51_2298  rna   14h   rep1        177\n 5 ENST00000327044.6_51_2298  rna   14h   rep2        177\n 6 ENST00000327044.6_51_2298  rna   14h   rep3        239\n 7 ENST00000338591.7_360_2034 rna   0h    rep1         19\n 8 ENST00000338591.7_360_2034 rna   0h    rep2         17\n 9 ENST00000338591.7_360_2034 rna   0h    rep3         15\n10 ENST00000338591.7_360_2034 rna   14h   rep1          9\n# i 590 more rows\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 x 5\n# Groups:   time [2]\n   ensembl_transcript_id      type  time  replicate count\n   <chr>                      <chr> <chr> <chr>     <dbl>\n 1 ENST00000327044.6_51_2298  rna   0h    rep1        243\n 2 ENST00000327044.6_51_2298  rna   0h    rep2        322\n 3 ENST00000327044.6_51_2298  rna   0h    rep3        303\n 4 ENST00000327044.6_51_2298  rna   14h   rep1        177\n 5 ENST00000327044.6_51_2298  rna   14h   rep2        177\n 6 ENST00000327044.6_51_2298  rna   14h   rep3        239\n 7 ENST00000338591.7_360_2034 rna   0h    rep1         19\n 8 ENST00000338591.7_360_2034 rna   0h    rep2         17\n 9 ENST00000338591.7_360_2034 rna   0h    rep3         15\n10 ENST00000338591.7_360_2034 rna   14h   rep1          9\n# i 590 more rows\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, ensembl_transcript_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 600 x 5\n# Groups:   ensembl_transcript_id [100]\n   ensembl_transcript_id      type  time  replicate count\n   <chr>                      <chr> <chr> <chr>     <dbl>\n 1 ENST00000327044.6_51_2298  rna   0h    rep1        243\n 2 ENST00000327044.6_51_2298  rna   0h    rep2        322\n 3 ENST00000327044.6_51_2298  rna   0h    rep3        303\n 4 ENST00000327044.6_51_2298  rna   14h   rep1        177\n 5 ENST00000327044.6_51_2298  rna   14h   rep2        177\n 6 ENST00000327044.6_51_2298  rna   14h   rep3        239\n 7 ENST00000338591.7_360_2034 rna   0h    rep1         19\n 8 ENST00000338591.7_360_2034 rna   0h    rep2         17\n 9 ENST00000338591.7_360_2034 rna   0h    rep3         15\n10 ENST00000338591.7_360_2034 rna   14h   rep1          9\n# i 590 more rows\n```\n:::\n\n```{.r .cell-code}\n# example of how group_by affects the way summarise works\ndata %>% summarise(count = mean(count, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 1\n  count\n  <dbl>\n1  144.\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, time) %>% summarise(count = mean(count, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 2\n  time  count\n  <chr> <dbl>\n1 0h     185.\n2 14h    103.\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, ensembl_transcript_id) %>% summarise(count = mean(count, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 x 2\n   ensembl_transcript_id          count\n   <chr>                          <dbl>\n 1 ENST00000054650.8_159_876       8.39\n 2 ENST00000054666.10_116_416    121.  \n 3 ENST00000054668.5_220_418       3.75\n 4 ENST00000234590.8_121_1423   7993.  \n 5 ENST00000263741.11_1328_1496   29.4 \n 6 ENST00000263741.11_315_1338   141.  \n 7 ENST00000270708.11_75_1455     45.7 \n 8 ENST00000288774.7_29_1067      16.1 \n 9 ENST00000291386.3_370_895     134.  \n10 ENST00000307896.10_39_753       8.39\n# i 90 more rows\n```\n:::\n\n```{.r .cell-code}\ngroup_by(data, ensembl_transcript_id, time) %>% summarise(count = mean(count, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'ensembl_transcript_id'. You can override\nusing the `.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 200 x 3\n# Groups:   ensembl_transcript_id [100]\n   ensembl_transcript_id        time    count\n   <chr>                        <chr>   <dbl>\n 1 ENST00000054650.8_159_876    0h       11.3\n 2 ENST00000054650.8_159_876    14h       5.5\n 3 ENST00000054666.10_116_416   0h      149  \n 4 ENST00000054666.10_116_416   14h      93.7\n 5 ENST00000054668.5_220_418    0h        0  \n 6 ENST00000054668.5_220_418    14h       7.5\n 7 ENST00000234590.8_121_1423   0h    10522. \n 8 ENST00000234590.8_121_1423   14h    5465. \n 9 ENST00000263741.11_1328_1496 0h       32.5\n10 ENST00000263741.11_1328_1496 14h      26.3\n# i 190 more rows\n```\n:::\n:::\n\n  - functions to use within mutate - google is your friend\n  - manipulation of cols & rows - use cheatsheets\n  \n* ggplot\n  \n  - aesthetic mapping: [Ref](https://ggplot2.tidyverse.org/reference/aes.html)\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n# specifying colors of plots\ndiamonds_subset <- diamonds %>% sample_n(size = 1000)\n\n# scatter plot with color by cut - aesthetics specified in the main \"mapping\" \nggplot(data = diamonds_subset, \n       mapping = aes(x = carat, y = price, color = cut)) + \n       geom_point() \n```\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/aesthetic_mapping-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# scatter plot with color by cut - aesthetics specified in the geom \"mapping\" \nggplot(data = diamonds_subset, \n       mapping = aes(x = carat, y = price)) + \n       geom_point(aes(color = cut)) \n```\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/aesthetic_mapping-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# color specified in the main mapping will apply universally to all geoms \nggplot(data = diamonds_subset, \n       mapping = aes(x = carat, y = price, color = cut)) + \n       geom_point() +\n       geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/aesthetic_mapping-3.png){width=672}\n:::\n\n```{.r .cell-code}\n# color specified in the geom mapping only applies to that layer\nggplot(diamonds_subset, mapping = aes(x = carat, y = price)) + \n       geom_point(aes(color = cut)) +\n       geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/aesthetic_mapping-4.png){width=672}\n:::\n:::\n\n\n  - piping data into ggplot - example below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds_subset %>% ggplot(mapping = aes(x = carat, y = price)) + \n       geom_point(aes(color = cut)) +\n       geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/piping_data-1.png){width=672}\n:::\n:::\n\n\n  - more applied examples - plenty to come in the rest of the course\n\n  - specifying colors of plots: [tutorial](http://www.sthda.com/english/wiki/ggplot2-colors-how-to-change-colors-automatically-and-manually)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # coloring by a single color - more information in the tutorial above\nggplot(data = diamonds_subset, \n       mapping = aes(x = carat, y = price)) + \n       geom_point(color = \"red\") +\n       geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](class-05_files/figure-html/single-color-1.png){width=672}\n:::\n:::\n\n  \n* other\n  - log10 - `?log10`\n  - How to use Help pages: help(<function>)\n  - required vs. optional arguments: this is possible to distinguish if you have a well-documented function. If not, trial-an-error is how it goes. \n  - Use of commas with multiple vars: Depends on the function. Look at the exact syntax required for specific functions on the cheatsheet to know what to use: col1, col2, col3, vs col1:col3, etc\n  - Metacharacters \".\" etc.: Refer to cheatsheet on Regex + stringr\n\n",
    "supporting": [
      "class-05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}