{
  "hash": "a00fef67151b28b0a77ff5f6dbaac4ae",
  "result": {
    "markdown": "---\ntitle: \"bootcamp-r-problem-set-2\"\nauthor: \"Insert your name here\"\ndate: \"8/26/2020\"\noutput: html_document\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(knitr)\n```\n:::\n\n\n### Problem Set\n\nEach problem below is worth **5 points**.\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\n\n**The problem set is due 12pm on Aug 27.**\n\n### Grading rubric\n\n- Everything is good: 5 points\n- Partially correct answers: 3-4 points\n- Reasonable attempt: 2 points\n\n#### Question 1 - Show how you will use `arrange`, `filter`, and `select` on a dataframe\n\nStep 1: Import the dataset `data_transcript_exp_tidy.csv` within the `data` folder using the _readr_ package\nStep 2: Sort the dataframe by expression data from highest to lowest (Column: `count`) \nStep 3: Filter the dataframe by `count` > 100\nStep 4: Select all columns _except_ for `type`\n\n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 2 - How do you map the transcript ids to gene ids using a mapping file? \n\nStep 1: Import the dataset `id-mapping.csv` within the `data` folder using the _readr_ package\nStep 2: Map the transcript ids in `data` to gene ids in `id-mapping.csv` \n\nHint: Think `join` functions and check for extra extensions to ids that you may have to `separate` first. \n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 3 - How will you A) create a new column `log10count` that contains log10 transformed `count` values and B) rearrange the columns in the following order: ensembl_transcript_id, ensembl_gene_id, hgnc_symbol, type, time, replicate, count, log10count. (Note that we have dropped `extra`)\n\nHint: Use `mutate` and `select`\n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 4 - How will go from transcript-level counts to gene-level counts, while keeping the `time`, `replicate`, and `hgnc_symbol` information?\n\nHint: Use `group_by` with multiple variables, and `summarise` the \"count\" values using `sum()`\n\n::: {.cell}\n\n:::\n\n\n<br/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}