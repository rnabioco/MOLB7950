{
  "hash": "f780cf16612e626f9b2a9999410ef29b",
  "result": {
    "markdown": "---\ntitle: \"bootcamp-r-problem-set-final\"\nauthor: \"Insert your name here\"\ndate: \"8/27/2020\"\noutput: html_document\n---\n\n\n### Problem Set\n\nEach problem below is worth different points, depending on the number of steps involved and the difficulty of the problem.\n\nUse the data files in the `data/` directory to answer the questions.\n\nFor this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.\n\n**The problem set is due 12pm on Aug 31.**\n\n### Grading rubric\n\n- Everything is good: full points\n- Partially correct answer: depends on how many steps are correct\n- Reasonable attempt: half points\n\n#### Question 1 - Load packages and import data **2 points**\n\n1) Load packages tidyverse, knitr, ggthemes, cowplot, viridis, ggridges.  \n2) Import datasets: `data/data_rna_protein.csv`, `data/rp_genes.csv`, & `data/target_genes.csv`\n\nHere is some information about the datasets for context:\n   a) `data_rna_protein.csv`: This is a combined dataset from an RNAseq and SILAC proteomics experiment, where a transcription factor (TF) was differentially expressed and the fold change in RNA and protein calculated between TF-expressing and non-expressing cells.   \n   b) `rp_genes`: This contains ribosomal genes, which we will use as a group of \"housekeeping\" genes as control.   \n   c) `target_genes`: This contains genes which are direct transcriptional targets of the transcription factor we study.   \n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 2 - Data exploration & wrangling **8 points**\n\nUsing the imported dataset `data_rna_protein`, carry out the following:  \n\n1) Print all column names and glimpse the data  \n2) Select only the following columns: `geneid`, `iDUX4_logFC`, `iDUX4_fdr`, `hl.ratio`, and `pval`\n3) Rename them as follows: rna_FC = iDUX4_logFC, rna_pval = iDUX4_fdr, protein_FC = hl.ratio, protein_pval = pval  \n4) Mutate all the numeric values to only have 4 decimals (Hint: We did not cover this in class. Time to exercise your Google skills! \"how to reduce decimal points in an R dataframe\")  \n5) Drop all rows with `NA` values in them  \n6) Remove duplicate rows  \n7) Arrange the table in the descending order of rna_FC first, and then protein_FC  \n8) Conduct steps 2-7 by piping the output of one step to another (i.e a single workflow & remember to comment). Save the output of this workflow into a new object called `data`  \n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 3 - Data transformation **6 points**\n\nUsing the output from the above question, `data`, do the following:\n\nCreate a new column called `gene_status` (Hint: using `mutate`) by looking up each geneid in `data` in the lists `rp_genes` and `target_genes` and setting the `gene_status` to be \"rp_gene\" if a gene is found in that list, or \"target_gene\" if it is found in that list, and if not, calling it \"other\". Save the output of this workflow into a new object called `data_genestatus`  \n\nThis problem carries 6 points because it is tricky. If you run into issues, think about the following:  \n1) This requires the use of a *nested* `if_else` function in combination with the `%in%` logic we covered in class.   \n2) What kind of data object does `%in%` work on? When you imported `rp_genes` and `target_genes`, what data structure did they have? How can you make them play nice with `%in%`?  \n3) We only covered a single if_else clause in class. Use google to see examples of nesting multiple if_else clauses. And mind your parantheses!   \n\n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 4 - How well do the overall `rna_FC` and `protein_FC` values correlate in this experiment? **5 points**\n\nUsing the output from the above question, `data_genestatus`, do the following:  \n1) Create a scatter plot (via ggplot) of `rna_FC` vs `protein_FC` - observe how the points scatter  \n2) Add a line to the plot that would indicate perfect 1:1 correlation (Note: this is obviously an unrealistic expectation for any experiment).   \n3) Add geom_smooth (method = 'lm', and formula = y~x) -- look up these options so you know what you are doing -- Observe how the x=y line deviates from your geom_smooth line.   \n4) Calculate the spearman correlation coefficient (Hint: This uses a base R math function called `cor` - Use help() or Google to learn more and how to specify method as `spearman`)  \n5) Using all of the information from above, comment on the correlation between `rna_FC` and `protein_FC`.   \n\n\n::: {.cell}\n\n:::\n\n\n<br/> \n\n#### Question 5 - How does the RNA and protein foldchange differ for the genes under the different categories of \"housekeeping\", \"target\" and \"other\"? **6 points**\n\nUsing `data_genestatus`, do the following:  \n1) Drop th columns `rna_pval` and `protein_pval`. Make the table long such that both rna_FC and protein_FC values go in a single column (called `foldchange`), and create a new column called `molecule` that contains the information about whether the `foldchange` is for `rna` or `protein`. Clean up the `molecule` column by separating out the \"_FC\" and dropping it (look up `extra = \"drop\"` option of `separate`). (Bonus: You can use the `stringr` package to remove \"_FC\". You could try that if you want for a bonus point!)  \n- Let's call the dataframe you just created `data_genestatus_long`  \n2) Group the cases in `data_genestatus_long` by `molecule` and `genestatus` & summarise the `foldchange` values using `mean`  \n4) Using ggridges, create a stacked density plot where `x = foldchange` and `y = genestatus`, `fill = genestatus` and facet_wrap the plots by `molecule`  \n5) Using ggplot, create a box-and-whisker plot with `genestatus` on x-axis, `foldchange` on Y-axis, fill by `genestatus` and facet_wrap'ed by `molecule`  \n6) Based on the information you gleaned from #1 and #2, comment on what the results imply. Remember: `rna_FC` is the log2 RNA fold change and `protein_FC` is the log2 protein fold change between cells that express our transcription factor of interest versus not.  \n\n\n\n::: {.cell}\n\n:::\n\n\n<br/>\n\n#### Question 6 - Create a multi-panel, publication-quality figure **3 points**\n\nThis figure will be a composite of the scatter plot you made for Q4 (panel A), the ridge plot you made in Q5 (panel B), and the box-and-whisker plot you made, also in Q5 (panel C).  \n1) Remake all three plots with:    \n    A) a new theme (you can pick or create your favorite theme using one of the ggthemes styles as a basis)   \n    B) Add informative labels, titles, and legends   \nSave these new plots as ggplot objects `panelA`, `panelB`, and `panelC`\n2) Combine these panels into a single-column figure using `plot_grid`   \n3) Save this plot in your `img` folder.   \n\nBonus: Make this figure aesthetically pleasing in terms of aspect ratio, position of legends, relative text size, etc. Each of these requires you to go down a rabbit hole, but you will learn from doing so. No points for doing this - just for fun!   \n\n\n::: {.cell}\n\n:::\n\n\n**** the end **** \n\n<br/>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}