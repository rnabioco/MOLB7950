{
  "hash": "a7530e02afe983758fc1759dd8aa3410",
  "result": {
    "markdown": "---\ntitle: \"class-01\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/24/2020\"\n---\n\n\n\n\n### Contact Info \nSuja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)\n\n### Office Hours\nUse https://calendly.com/molb7950 to schedule a time with a TA.\n\n<br/>\n\n### Learning Objectives for the R Bootcamp\n\n* Follow best coding practices (*class 1*)\n* Know the fundamentals of R programming (*class 1*)\n* Become familiar with \"tidyverse\" suite of packages\n    * tidyr: \"Tidy\" a messy dataset (*class 2*)\n    * dplyr: Transform data to derive new information (*class 3*)\n    * ggplot2: Visualize and communicate results (*class 4*)\n* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n### Today's class outline - *class 1*\n\n* Coding best practices\n* Review R basics\n    * R vs Rstudio (Exercises #1-2)\n    * Functions & Arguments (Exercises #3-4)\n    * Data types (Exercise #5)\n    * Data structures (Exercises #6-7)\n    * R Packages (Exercise #8)\n* Review Rmarkdown (Exercise #9)\n* Rstudio cheatsheets (Exercise #10)\n\n### Coding best practices ###\n\n>   \"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread.\"\n>   --- Hadley Wickham\n\n### File Names\n\n* File names should be meaningful and end in `.R`, `.Rmd`, etc.\n* Avoid using special characters in file names - stick with numbers, letters, `-`, and `_`. \n* *Never* include spaces in file names! \n\n```{show-code}\n    ###### Good  \n    fit_models.R  \n    utility_functions.Rmd\n\n    ###### Bad  \n    fit models.R  \n    tmp.r  \n    stuff.r  \n```\n\n* If files should be run in a particular order, prefix them with numbers. \n* If it seems likely you'll have more than 10 files, left pad with zero. \n* It looks nice (constant width) and sorts nicely. \n\n```{show-code}\n    00_download.R  \n    01_explore.R  \n    ...  \n    09_model.R  \n    10_visualize.R  \n```\n\n* Avoid capitalizing when not necessary. \n* If you want to include dates in your file name, use the ISO 8601 standard: `YYYY-MM-DD`\n* Use delimiters intentionally! (helps you to recover metadata easily from file names)\n* For example, \"_\" to delimit fields; \"-\" to delimit words\n\n```{show-code}  \n2019-02-15_class1_data-wrangling.Rmd\n```\n\n* Avoid hard coding file names and instead use relative paths. \n* `~` represents the current working directory. \n* Use `getwd()` to figure out what your working directory is. \n\n```{show-code}\n###### Good\n\"~/class1/code/test.R\"\n    \n###### Bad\n\"/Users/sjaganna/Desktop/CU-onedrive/08-teaching/molb7910/class1/data.csv\"\n```\n\n### Organisation\n\n* Try to give a file a concise name that evokes its contents\n* One way to organize your files is by grouping them into `data`, `code`, `plots`, etc. \n* For example, in **this class** we often use the following structure:  \n\n```{show-code}\n      exercises\n         - exercises-01.Rmd\n         - data\n         - img\n         - setup\n         ...\n```\n\n### Internal structure of code\n\nUse commented lines of `-` and `=` to break up your code chunk into easily readable \nsegments. Or better yet, make each \"action\" it's own chunk and give it a name. \n\n```{show-code}\n# Load data ---------------------------\n\n# Plot data ---------------------------\n```\n\n### R Basics - Overview ###\n\n* R, Rstudio (Exercise #1)\n* R as a calculator (Exercise #2)\n* Functions and arguments (Exercises #3-4)\n* Data types: numeric, character, logical (& more) (Exercise #5)\n* Data structures: vector, list, matrix, data frame, tibbles (Exercises #6-7)\n* Package system, Rstudio, and Rmarkdown (Exercises #8-9)\n\n### R vs Rstudio - Exercise 1\n\nWhat is R? What is Rstudio?\n\n* R is a programming language used for statistical computing\n* RStudio is an integrated development environment (IDE) for R. It includes a console, terminal, syntax-highlighting editor that supports direct code execution, tools for plotting, history, workspace management, and much more. \n* You can use R without RStudio, but not the other way around. \n\nLet's do the following to explore Rstudio: \n\n* Look at Rstudio panels one at a time\n* Environment, History, Console, Terminal, Files, Plots, Packages, Help, etc. \n\n### R as a calculator - Exercise 2\n\n* R can function like an advanced calculator\n\n- try simple math\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 3 * 5     # Note the order of operations.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 17\n```\n:::\n\n```{.r .cell-code}\n3-7           # value of 3-7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4\n```\n:::\n\n```{.r .cell-code}\n3/2           # Division\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.5\n```\n:::\n\n```{.r .cell-code}\n5^2           # 5 raised to the second power\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n\n```{.r .cell-code}\n# This is a comment line\n```\n:::\n\n\n- assign a numeric value to an object\n\n::: {.cell}\n\n```{.r .cell-code}\nnum <- 5^2    # we just created an \"object\" num\n```\n:::\n\n\n- print the object to check\n\n::: {.cell}\n\n```{.r .cell-code}\nnum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 25\n```\n:::\n:::\n\n\n- do a computation on the object\n\n::: {.cell}\n\n```{.r .cell-code}\nnum+100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 125\n```\n:::\n:::\n\nNote: Objects can be over-written. So be careful if you reuse names. \n\n### Functions and arguments - Exercise 3\n\n* Functions are fundamental building blocks of R\n* Most functions take one or more arguments and transform an input object in a specific way. \n* Tab completion is your friend!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction (x, base = exp(1))  .Primitive(\"log\")\n```\n:::\n\n```{.r .cell-code}\n?log\nlog(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.386294\n```\n:::\n\n```{.r .cell-code}\nlog(4, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\n### Writing a simple function - Exercise 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\naddtwo <- function(x) {\n              num <- x + 2\n              return(num)\n}\n\naddtwo(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x, y) {\n              z <- 3 * x + 4 * y\n              return(z)\n}\n\nf(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18\n```\n:::\n:::\n\n\n### Data types ###\n\n* There are many data types in R. \n* For this class, the most commonly used ones are **numeric**, **character**, and **logical**. \n* All these data types can be used to create vectors natively.\n\n### Data types - Exercise 5\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(4) # numeric data time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(\"suja\") # character data type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(TRUE) # logical data type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(as.character(TRUE)) # coercing one data type to another\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\n### Data structures ###\n\n* R has multiple data structures. \n* Most of the time you will deal with tabular data sets, you will manipulate them, take sub-sections of them. \n* It is essential to know what are the common data structures in R and how they can be used. \n* R deals with named data structures, this means you can give names to data structures and manipulate or operate on them using those names.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/data-structures.png){width=100%}\n:::\n:::\n\nSource: Devopedia\n\n### Tibbles\n* A __tibble__, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. \n* Tibbles are data.frames that are lazy and surly: they do less (i.e. they don't change variable names or types, and don't do partial matching) and complain more (e.g. when a variable does not exist). \n* This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced `print()` method which makes them easier to use with large datasets containing complex objects.\n* `tibble()` does much less than `data.frame()`: \n    - it never changes the type of the inputs \n    - it never changes the names of variables\n    - it never creates `row.names()`\n\nSource: [tibbles chapter](http://r4ds.had.co.nz/tibbles.html) in *R for data science*.\n\n### Vectors - Exercise 6\n\n- Vectors are one of the core R data structures. \n- It is basically a list of elements of the same type (numeric,character or logical). \n- Later you will see that every column of a table will be represented as a vector. \n- R handles vectors easily and intuitively. \n- The operations on vectors will propagate to all the elements of the vectors.\n\nCreate the following vectors\n\n::: {.cell}\n\n```{.r .cell-code}\n    x <- c(1,3,2,10,5) #create a vector named x with 5 components\n                       # `c` is for combine\n                       # you could use '=' but I don't recommend it.\n    y <- 1:5           #create a vector of consecutive integers y\n    y + 2              #scalar addition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4 5 6 7\n```\n:::\n\n```{.r .cell-code}\n    2*y                #scalar multiplication\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  6  8 10\n```\n:::\n\n```{.r .cell-code}\n    y^2                #raise each component to the second power\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  4  9 16 25\n```\n:::\n\n```{.r .cell-code}\n    2^y                #raise 2 to the first through fifth power\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  2  4  8 16 32\n```\n:::\n\n```{.r .cell-code}\n    y                  #y itself has not been unchanged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\n    y <- y*2           #here, y is changed\n```\n:::\n\n\n### Data frames - Exercise 7\n\n- A data frame is more general than a matrix, in that different columns can have different modes (numeric, character, factor, etc.). \n- A data frame can be constructed by data.frame() function. \n- For example, we illustrate how to construct a data frame from genomic intervals or coordinates.\n\nCreate a dataframe `mydata`\n\n::: {.cell}\n\n```{.r .cell-code}\n    chr <- c(\"chr1\", \"chr1\", \"chr2\", \"chr2\")\n    strand <- c(\"-\", \"-\", \"+\", \"+\")\n    start <- c(200,4000,100,400)\n    end <-c(250,410,200,450)\n\n    mydata.df <- data.frame(chr, strand, start, end) # creating dataframe\n    mydata.df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   chr strand start end\n1 chr1      -   200 250\n2 chr1      -  4000 410\n3 chr2      +   100 200\n4 chr2      +   400 450\n```\n:::\n\n```{.r .cell-code}\n    mydata.tbl <- tibble(chr, strand, start, end) # creating a tibble\n    mydata.tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 4\n  chr   strand start   end\n  <chr> <chr>  <dbl> <dbl>\n1 chr1  -        200   250\n2 chr1  -       4000   410\n3 chr2  +        100   200\n4 chr2  +        400   450\n```\n:::\n:::\n\n\n### R packages - Exercise 8\n\n* An R package is a collection of code, data, documentation, and tests that is easily sharable\n* A package often has a collection of custom functions that enable you to carry out a workflow. eg. DESeq for RNA-seq analysis\n* The most popular places to get R packages from are CRAN, Bioconductor, and Github. \n* Once a package is installed, one still has to \"load\" them into the environment using a `library(<package>)` call. \n\nLet's do the following to explore R packages\n* Look at the \"Environment\" panel in Rstudio\n* Explore Global Environment\n* Explore the contents of a package\n\n### Rmarkdown Exercise - Exercise 9\n\n* Rmarkdown is a fully reproducible authoring framework to create, collaborate, and communicate your work. \n* Rmarkdown supports a number of output formats including pdfs, word documents, slide shows, html, etc. \n* An Rmarkdown document is a plain text file with the extension `.Rmd` and contains the following basic components: \n    - An (optional) YAML header surrounded by ---s.\n    - Chunks of R code surrounded by ```.\n    - Text mixed with simple text formatting like # heading and _italics_.\n\nLet's do the following to explore Rmarkdown documents\n* Create a new .Rmd document\n* `knit` the document to see the output\n\n### Homework instructions\n\n* Today's homework is: \n    1) To go over everything we covered today and make sure you understand it. (Use office hours if you have questions) - Expected time spent: 30 min - 1 hour\n    2) Go over Rstudio and Rmarkdown cheatsheets (Finding cheatsheets: Exercise 10) - - Expected time spent: 30 min on each cheatsheet\n\n### Acknowledgements\n\nThe material for this class was heavily borrowed from: \n* Introduction to R by Altuna Akalin:  http://compgenomr.github.io/book/introduction-to-r.html\n* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\n\n### Further Reading & Resources \n\n* R for data science https://r4ds.had.co.nz/index.html\n* Advanced R by Hadley Wickam https://adv-r.hadley.nz/\n* Installing R: https://cran.r-project.org/\n* Installing RStudio: https://rstudio.com/products/rstudio/download/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}