{
  "hash": "a22cf06af026050aab3695999191a41b",
  "result": {
    "markdown": "---\ntitle: \"Exercises-03\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/26/2020\"\noutput: html_document\n---\n\n\n\n\n### Contact Info \nSuja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)\n\n### Office Hours\nUse https://calendly.com/molb7950 to schedule a time with a TA.\n\n<br/>\n\n### Learning Objectives for the R Bootcamp\n\n* Follow best coding practices (*class 1*)\n* Know the fundamentals of R programming (*class 1*)\n* Become familiar with \"tidyverse\" suite of packages\n    * tidyr: \"Tidy\" a messy dataset (*class 2*)\n    * dplyr: Transform data to derive new information (*class 3*)\n    * ggplot2: Visualize and communicate results (*class 4*)\n* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n### Today's class outline - *class 3*\n\n* Introduce _dplyr_ & today's datasets (Exercise 1)\n* Review basic functions of _dplyr_\n    * core dplyr verbs: \n        - `arrange` (Exercise 2)\n        - `filter` (Exercise 3)\n        - `select` (Exercise 4)\n        - `mutate` (Exercise 5)\n        - `summarise` (Exercise 6)\n    * modify scope of verbs using: `group_by` (Exercise 7)\n    * pipe: `%>%` (Exercise 5)\n    * Combining tables with dplyr: join functions, binding columns/rows, etc. (Exercise 8)\n    * ... and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull` (Exercise 9)\n* Homework instructions\n\n------------------------------------------------------------------------------------------------------------\n\n### dplyr\n\n* _dplyr_ is a tidyverse package which provides a set of tools for efficiently manipulating datasets in R. \n* Implemented in C++ and extremely fast even with large datasets. \n* Follows the tidyverse grammar and philosophy; human-readable and intuitive\n* Different _dplyr_ verbs can be strung together using pipes `%>%`\n\n### Today's datasets\n\n* In this class, we will use one of the datasets that come with the `dplyr` package to explore all the functions provided by dplyr.  \n* `dplyr::starwars` data frame contains data about 87 characters from Starwars\n* `dplyr::band_members`, `dplyr::band_instruments`, `dplyr::band_instruments2` describe band members and instruments of the Beatles and Rolling Stones\n\n### Getting familiar with the data - Exercise 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr::starwars\n  head(starwars)\n  starwars  \n  glimpse(starwars)\n  View(starwars)\n\n# dplyr::band_members \n  band_members \n  band_instruments\n  band_instruments2\n```\n:::\n\n\n---\n\n### dplyr package\n\n* `dplyr` is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:\n  - `arrange()` changes the ordering of the rows.\n  - `filter()` picks cases based on their values.\n  - `select()` picks variables based on their names.\n  - `mutate()` adds new variables that are functions of existing variables\n  - `summarise()` reduces multiple values down to a single summary.\n  \nThese all combine naturally with `group_by()` which allows you to perform any operation <e2><80><9c>by group<e2><80><9d>. \n\nPipes `%>%` allows different functions to be used together to create a workflow. `x %>% f(y)` turns into `f(x, y)`\n\nSource: https://dplyr.tidyverse.org/\n\n---\n\n### arrange - Syntax\n\n- `arrange()` to order rows by values of a column or columns (low to high). `desc()` orders high to low. \n\n```{shw-code}\narrange(data = ..., <colname>)\n```\n\n### arrange - Exercise 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(starwars, height) # default is to arrange in ascending order\narrange(starwars, desc(height)) # arrange in descending order\narrange(starwars, height, mass) # arrange by multiple columns\n```\n:::\n\n\n---\n\n### filter - Syntax\n\n- `filter()` chooses rows/cases where conditions are true.\n\n```{show-code}\nfilter(data = ..., <condition>)\n```\n\n### filter - Exercise 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color == \"light\")\nfilter(starwars, height < 150)\nfilter(starwars, mass > mean(mass, na.rm = TRUE))\n\nfilter(starwars, is.na(hair_color))\nView(filter(starwars, is.na(hair_color))) # if you want to look at the filtered data in a table without creating a new table\n```\n:::\n\n\n* Most frequently used comparison operators are: >, <, >=, <=, == (equal), != (not equal), is.na(), !is.na(), and %in% (contained in a list). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color %in% c(\"light\", \"fair\", \"pale\")) # using %in%\n\n# can also store as a named vector and use %in% with the vector\ncolor <- c(\"light\", \"fair\", \"pale\")\nfilter(starwars, skin_color %in% color) # using %in%\n```\n:::\n\n\n* Conditions can be combined using & (and), | (or). \n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color == \"light\" | eye_color == \"brown\") # using or\nfilter(starwars, skin_color == \"light\" & eye_color == \"brown\") # using and\n```\n:::\n\n\n---\n\n### select - Syntax\n\n- `select` extracts one or more columns from a table \n- `select_if()` to extract all columns of a particular type\n\n```{show-code}\nselect(data = ..., <colname>)  \nselect_if(data = ..., <condition>)\n```\n\n### select - Exercise 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(starwars, hair_color)\nselect(starwars, -hair_color) # can also use not `!hair_color`\nselect(starwars, hair_color, skin_color, eye_color)\nselect(starwars, hair_color:eye_color) # select using x:y columns\nselect(starwars, !(hair_color:eye_color)) # reverse selection using the not `!` operator\nselect(starwars, ends_with(\"color\")) # select by specific conditions are met by column names: starts_with, ends_with, contains... \n\nselect_if(starwars, is.numeric) # select_if to return all columns with numeric values\n```\n:::\n\n\n---\n\n### mutate - Syntax\n\n- `mutate()` to compute new columns\n\nMutate has a LOT of variants. \n<br/>\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/mutate.png){width=60%}\n:::\n:::\n\n<br/>\nSource: Rstudio cheatsheets\n<br/>\n```{show-code}\nmutate(data = ..., <newcolname> =  funs(<oldcolname>))\nmutate(data = ..., <colname>, funs(x))\n\n# using pipes! %>%\ndata %>% mutate(<colname>, funs(x)) # this is useful when you need to use multiple functions to act sequentially on a dataframe. Input becomes obvious by leading with it. \n```\n\n### mutate (& pipe %>%)- Exercise 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new column to display height in meters\nstarwars %>% mutate(height_m = height / 100) # using pipe to feed data into the function\n\n# using the pipe to feed data into multiple functions sequentially\nstarwars %>%\n  mutate(height_m = height / 100) %>% # this columns is always appended to the end of the table, by default\n  select(name, height_m, height, everything()) # using select to rearrange columns\n\n# mutate allows you to refer to columns that you<e2><80><99>ve just created\nstarwars %>%\n  mutate(height_m = height / 100,\n         BMI = mass / (height_m^2)) %>%\n  select(name, BMI, everything())\n\n# output needs to be saved into a new dataframe since dplyr does not \"change\" the original dataframe\nstarwars_bmi <- starwars %>%\n                      mutate(height_m = height / 100,\n                             BMI = mass / (height_m^2)) %>%\n                      select(name, BMI, everything())\n\n# using if_else clauses with mutate\nstarwars_height <- starwars %>%\n                      mutate(tall_short = if_else(\n                                            condition = height > 160, \n                                            true = \"tall\", \n                                            false = \"short\")) %>%\n                      select(name, tall_short, everything())\n```\n:::\n\n\nWhy use pipes? So you don't have to create too many intermediate files! However, note that intermediate files _can_ be useful in the context of troubleshooting a pipeline. \n\n\n### rowwise operations (if time permits)\n\n* dplyr (& tidyverse in general) is very easy to perform vectorized operations column-wise, and not so easy with row-wise operations. \n* the function _rowwise()_ offers a solution to this\n* Let's look at an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's input data (same one used in yesterday's problem set)\ndata <- read_csv(file = \"data/data_transcript_exp_subset.csv\")\n\n# calculate mean for each time point using mutate in a rowwise fashion!\ndata_mean <- data %>% rowwise() %>% mutate(mean_0h = mean(c(rna_0h_rep1, rna_0h_rep2, rna_0h_rep3)), \n                                           mean_14h = mean(c(rna_14h_rep1, rna_14h_rep2, rna_14h_rep3)))\n```\n:::\n\nMore information here: https://dplyr.tidyverse.org/articles/rowwise.html\n\n---\n\n<br/>\n\n### Questions? \n\n<br/>\n\n------------------------------------------------------------------------------------------------------------\n\n### summarise - Syntax\n\n- `summarise()` reduces multiple values down to a single summary.\n\n<br/>\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/summarise.png){width=60%}\n:::\n:::\n\n<br/>\n\n```{show-code}\nsummarise(data = ..., <newcolname> =  funs(<oldcolname>))\nsummarise_at(data = ..., vars(<cols), funs())\n\n```\n\n### summarise - Exercise 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% summarise(mean_height = mean(height, na.rm = TRUE))\nstarwars %>% summarise_if(is.numeric, mean, na.rm = TRUE)\nstarwars %>% summarise_at(vars(height:mass), mean, na.rm = TRUE)\n```\n:::\n\n\n* summarise() on its own is not terribly useful. But it becomes powerful when paired with group_by(). \n\n---\n\n### group_by - Syntax\n\n* `group_by` reate a grouped copy of a table. \n* This changes the unit of analysis from the complete dataset to individual groups. \n* Then, when you use the dplyr verbs on a grouped data frame they<e2><80><99>ll be automatically applied <e2><80><9c>by group<e2><80><9d>. \n\n```{show-code}\ngroup_by(data = ..., <colname>)\n```\n\n### group_by + summarize - Exercise 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  group_by(species)\n\nstarwars %>%\n  group_by(species) %>% # group by species\n  summarise(\n    height = mean(height, na.rm = TRUE)\n  )\n\nstarwars %>%\n  group_by(species, gender) %>% # group by multiple variables\n  summarise(\n    height = mean(height, na.rm = TRUE),\n    mass = mean(mass, na.rm = TRUE) # calculate multiple summaries\n  )\n```\n:::\n\n\n---\n\n<br/>\n\n### Questions? \n\n<br/>\n\n------------------------------------------------------------------------------------------------------------\n\n### Combining tables\n\n- Combine variables (i.e. columns)\n    + `bind_cols()`\n    + `left_join()`\n    + `right_join()`\n    + `inner_join()`\n    + `full_join()`\n    \n- Combine cases (i.e. rows)\n    + `bind_rows()`\n    + `intersect()`\n    + `setdiff()`\n    + `union()`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/combining-tables.png){width=100%}\n:::\n:::\n\n<br/>\nSource: Rstudio cheatsheets\n\n---\n\n### Combine variables and cases - pasting tables together - Syntax\n\n- `bind_cols()` to paste tables beside each other\n- `bind_rows()` to paste tables below each other as they are. \n\n```{show-code}\nbind_cols(data1, data2) # should have same number of rows\nbind_rows(data1, data2) # should have same number of columns\n```\n\n### Combine variables - joining tables by a variable - Syntax\n\n- `left_join()` to join matching values from the right dataset to the left dataset\n- `right_join()` to join matching values from the left dataset to the right dataset\n- `inner_join()` to only join matching values present in both datasets\n- `full_join()` to join all values in both datasets\n\n```{show-code}\nleft_join(data1, data2)\nleft_join(data1, data2, by = ...) # if multiple columns match\nleft_join(data1, data2, by = c(\"col1\" = \"col2\")) # if the columns names that match are different\n```\n\n### Combine variables - joining tables by a variable - Exercise 8\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% left_join(band_instruments)\nband_members %>% right_join(band_instruments)\nband_members %>% inner_join(band_instruments)\nband_members %>% full_join(band_instruments) \nband_members %>% full_join(band_instruments2) # this won't work\nband_members %>% full_join(band_instruments2, by = c(\"name\" = \"artist\"))\n```\n:::\n\n\n* Joining tables is something you will do a LOT in genomic analyses.   \n* Things to watch out for are to:\n    - explicitly say which variable to join by\n    - making sure there aren't subtle difference between what you think of as \"common\" variables \n    - eg. Paul vs. Paul M; ENST79286869869 vs ENST79286869869.12\n\n---\n\n### Other dplyr verbs\n\nThere are many other dplyr verbs: `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull`\n\nCheck out the dplyr cheatsheet to learn more! \n\n### rename - Syntax\n\n- `rename()` renames the variables in a table. Keeps all columns. `select()` can also do this, but with some caveats. \n\n```{show-code}\nrename(data = ..., <colname>)\n```\n\n### rename - Exercise 9\n\n::: {.cell}\n\n```{.r .cell-code}\nband_instruments2\n\nrename(band_instruments2, name = artist)\n\nselect(band_instruments2, name = artist) # select drops the rest of the columns\nselect(band_instruments2, name = artist, everything()) # this fixes it, but one extra thing to remember\n```\n:::\n\n\n------------------------------------------------------------------------------------------------------------\n\n### Problem Set and Grading Rubric\n\n* Today's problem set assignment will allow you to practice the tidyr tools we learned in class today. \n* There is a total of 4 exercises, each with 5 points for a total of 20 points. \n* Grading rubric listed at the beginning of the problem set.\n\n### Acknowledgements\n\nThe material for this class was heavily borrowed from: \n* dplyr vignette: https://dplyr.tidyverse.org/index.html\n* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\n\n### Further Reading & Resources \n\n* R for data science https://r4ds.had.co.nz/index.html\n* Advanced R by Hadley Wickam https://adv-r.hadley.nz/\n* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}