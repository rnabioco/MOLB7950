{
  "hash": "7a13c35427e4cc2bc02a503f80f40097",
  "result": {
    "markdown": "---\ntitle: \"Exercises-04\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/27/2020\"\n---\n\n\n\n\n### Contact Info \nSuja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)\n\n### Office Hours\nUse https://calendly.com/molb7950 to schedule a time with a TA.\n\n### Learning Objectives for the R Bootcamp\n\n* Follow best coding practices (*class 1*)\n* Know the fundamentals of R programming (*class 1*)\n* Become familiar with \"tidyverse\" suite of packages\n    * tidyr: \"Tidy\" a messy dataset (*class 2*)\n    * dplyr: Transform data to derive new information (*class 3*)\n    * ggplot2: Visualize and communicate results (*class 4*)\n* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n### Today's class outline - *class 4*\n\n* Introduce _ggplot2_ & today's datasets (Exercise 1)\n* Understand the basics of ggplot2 (Exercise 2, 3)\n* Create more complex plots\n    - Geom functions (Exercise 4-8)\n    - Geom_point properties (Exercise 9)\n    - Position adjustments (Exercise 10)\n    - Coordinate and Scale Functions (Exercise 11)\n    - Zooming into a plot (Exercise 12)\n    - Faceting (Exercise 13)\n    - Themes (Exercise 14)\n    - Labels & Legends (Exercise 15)\n* Additional points\n    - Adding lines to plots (Exercise 16)\n    - Making multi-panel figures (Exercise 17)\n    - Saving a plot (Exercise 18)\n* Homework instructions\n\n## *ggplot2*\n\nggplot2 is based on the \"grammar of graphics\", the idea that you can build every graph from the same components: a data set, a coordinate system, and geoms <e2><80><94> visual marks that represent data points.\n\n### Today's datasets\n\n* In this class, we will use one of the datasets that come with the `ggplot2` package.  \n* `ggplot2::diamonds` data frame contains data about 87 characters from Starwars\n\n### Getting familiar with the data - Exercise 1\n\n::: {.cell}\n\n```{.r .cell-code}\n# help(\"diamonds\")\nhead(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n:::\n\n```{.r .cell-code}\nglimpse(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.~\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver~\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,~\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, ~\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64~\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58~\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34~\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.~\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.~\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.~\n```\n:::\n\n```{.r .cell-code}\n# View(diamonds)\n```\n:::\n\n\n### The basic syntax of `ggplot()`  \n\n`ggplot()`: build plots piece by piece\n\nThe concept of ggplot divides a plot into three different fundamental parts:\n\nplot = _data_ + _coordinate-system_ + _geometry_.  \n\n_data_: a data frame\n\n_coordinate-system_: specify x and y variables\n\n_geometry_: specify type of plots  - histogram, boxplot, line, density, dotplot, bar, etc. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-syntax.png){width=60%}\n:::\n:::\n\n__aesthetics__ can map variables in the data to visual\nproperties of the geom (aesthetics) like size, color, and x\nand y locations to make the plot more information rich. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-aesthetics.png){width=60%}\n:::\n:::\n\n\n### Making a plot step-by-step (Exercise 2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize with data\nggplot(data = diamonds) # specify which dataframe to use - no plot yet\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-5-1.png){width=384}\n:::\n\n```{.r .cell-code}\n#  specify the coordinate system\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price)\n) # data to map onto x and y axes\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-5-2.png){width=384}\n:::\n\n```{.r .cell-code}\n# specify geometry\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price)\n) +\n  geom_point() # `geom` is 'geom_point()'\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-5-3.png){width=384}\n:::\n\n```{.r .cell-code}\n######### Note: the position of `+` is important ##########\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# map aesthetics to other variables\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut, size = carat)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-6-1.png){width=480}\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut, size = carat)\n) +\n  geom_point(alpha = 0.2) # adjusting transparency of points\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-6-2.png){width=480}\n:::\n:::\n\n\n### Looking under the hood of ggplot (Exercise 3)\n\n::: {.cell}\n\n```{.r .cell-code}\n# initialize with data\np1 <- ggplot(data = diamonds) # specify which dataframe to use - no plot yet\n\n#  specify the coordinate system\np2 <- ggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price)\n) # data to map onto x and y axes\n\n# specify geometry\np3 <- ggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price)\n) +\n  geom_point() # `geom` is 'geom_boxplot()'\n\n# map aesthetics to other variables\np4 <- ggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut, size = carat)\n) +\n  geom_point() # `geom` is 'geom_boxplot()'\n\np5 <- ggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut, size = carat)\n) +\n  geom_point(alpha = 0.2) # `geom` is 'geom_boxplot()'\n\ntypeof(p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\nnames(p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data\"        \"layers\"      \"scales\"      \"mapping\"     \"theme\"      \n[6] \"coordinates\" \"facet\"       \"plot_env\"    \"labels\"     \n```\n:::\n\n```{.r .cell-code}\nhead(p1$data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n```\n:::\n\n```{.r .cell-code}\nsummary(p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n```\n:::\n\n```{.r .cell-code}\nsummary(p2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nmapping:  x = ~carat, y = ~price\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n```\n:::\n\n```{.r .cell-code}\nsummary(p3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nmapping:  x = ~carat, y = ~price\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n-----------------------------------\ngeom_point: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n:::\n\n```{.r .cell-code}\nsummary(p4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nmapping:  x = ~carat, y = ~price, colour = ~cut, size = ~carat\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n-----------------------------------\ngeom_point: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n:::\n\n```{.r .cell-code}\nsummary(p5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata: carat, cut, color, clarity, depth, table, price, x, y, z\n  [53940x10]\nmapping:  x = ~carat, y = ~price, colour = ~cut, size = ~carat\nfaceting: <ggproto object: Class FacetNull, Facet, gg>\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  <ggproto object: Class FacetNull, Facet, gg>\n-----------------------------------\ngeom_point: na.rm = FALSE\nstat_identity: na.rm = FALSE\nposition_identity \n```\n:::\n:::\n\n\n### ggplot is overkill for simple plots, but powerfully simple in making complex plots\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat)\n) +\n  geom_histogram() # histogram\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-8-1.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## why can't I just do this?\nhist(diamonds$carat)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-9-1.png){width=480}\n:::\n:::\n\n\nYou can. But the advantage of ggplot is that it is equally \"simple\" to make basic and complex plots. The underlying grammar lets you exquisitly customize the appearance of your plot and make publishable figures. \n\n## *Create more complex plots*\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-layers.png){width=50%}\n:::\n:::\n\n\n### Geom function\n\n* Use a geom function to represent data points, use the geom<e2><80><99>s aesthetic properties to represent variables.\n* Each function returns a layer.\n* There are a LOT of geom functions in ggplot that are specific to plots with 1, 2, or 3 variables (i.e. if you _really_ need to plot 3 variables - better to use aesthetics instead)\n\n### Geom functions for one variable - Exercise 4\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-1variable.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# bar plot\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar() # bar\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-12-1.png){width=480}\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, fill = clarity)\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-12-2.png){width=480}\n:::\n\n```{.r .cell-code}\n# density plot\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat)\n) +\n  geom_density() # density\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-12-3.png){width=480}\n:::\n\n```{.r .cell-code}\n# color the density plot\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat)\n) +\n  geom_density(fill = \"tomato1\")\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-12-4.png){width=480}\n:::\n\n```{.r .cell-code}\n# plot subsets by mapping `fill` to `cut`\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, fill = cut)\n) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-12-5.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# use ggridges to plot subsets in a staggered fashion!\nggplot(\n  data = diamonds,\n  mapping = aes(carat, y = cut, fill = cut)\n) +\n  geom_density_ridges() # function from the ggridges package, NOT ggplot2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPicking joint bandwidth of 0.0647\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Geom functions for two variables\n\nWith two variables, depending on the nature of the data, you can have different kinds of geoms: \n  - discrete x, continuous y\n  - continuous x, continuous y\n  - continuous bivariate\n  - & others (check out the cheatsheet!)\n  \n### discrete x, continuous y - Exercise 5\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-geom-dx-cy.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# column plot\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = price)\n) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-15-1.png){width=480}\n:::\n\n```{.r .cell-code}\noptions(scipen = 10000) # disables scientific notation - only have to type once for the whole Rmd\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = price)\n) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-15-2.png){width=480}\n:::\n\n```{.r .cell-code}\n# box plot\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = price)\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-15-3.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# box plot with fill color by cut\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = price, fill = cut)\n) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# violin plot with fill color by cut\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = price, fill = cut)\n) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n:::\n\n\n### continuous x, continuous y - Exercise 6\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-geom-cx-cy.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset diamonds to see points better\ndiamonds_subset <- diamonds %>% sample_n(size = 1000)\n\n# scatter plot\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-18-1.png){width=384}\n:::\n\n```{.r .cell-code}\n# geom_smooth\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-18-2.png){width=384}\n:::\n\n```{.r .cell-code}\n# combining geoms - 1\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-18-3.png){width=384}\n:::\n\n```{.r .cell-code}\n# combining geoms - 2\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point() +\n  geom_rug()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-18-4.png){width=384}\n:::\n:::\n\n\n### continuous bivariate - Exercise 7\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-geom-cont-bivar.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatter plot\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price)\n) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-20-1.png){width=288}\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price)\n) +\n  geom_hex()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-20-2.png){width=288}\n:::\n:::\n\n\n### Geom functions for three variables - Exercise 8\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-geom-3variables.png){width=100%}\n:::\n:::\n\n\nOne example with geom_tile()\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = carat, fill = price)\n) +\n  geom_tile(colour = \"white\") +\n  scale_fill_gradientn(colors = c(\"red\", \"white\", \"blue\"))\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### shape, size, fill, color, and transparency - Exercise 9\n\nR has 25 built in shapes that are identified by numbers. There are some seeming duplicates: for example, 0, 15, and 22 are all squares. The difference comes from the interaction of the colour and fill aesthetics. The hollow shapes (0<e2><80><93>14) have a border determined by colour; the solid shapes (15<e2><80><93>18) are filled with colour; the filled shapes (21<e2><80><93>24) have a border of colour and are filled with fill.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-shapes.png){width=80%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price)\n) +\n  geom_point(aes(fill = cut, size = depth),\n    alpha = 0.8,\n    shape = 24,\n    color = \"white\"\n  )\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-24-1.png){width=384}\n:::\n:::\n\n\nNote that aesthetics can also be defined within geoms\n\n### Position adjustments - Exercise 10\n\nPosition adjustments determine how to arrange geoms that would otherwise occupy the same space. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-position.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, fill = clarity)\n) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-26-1.png){width=480}\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, fill = clarity)\n) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-26-2.png){width=480}\n:::\n:::\n\n\nJitter can be used to avoid over-plotting along with geom_point. \n\n### Coordinate and Scale Functions - Exercise 11\n\nWe won't go into these functions too much today, but here is a brief overview: \n\n* The coordinate system determines how the x and y aesthetics combine to position elements in the plot. The default coordinate system is Cartesian ( coord_cartesian() ), which can be tweaked with coord_map() , coord_fixed() , coord_flip() , and coord_trans() , or completely replaced with coord_polar()\n* Scales control the details of how data values are translated to visual properties. There are 20+ scale functions. We will look at one; the ggplot2 cheatsheet is your friend for the rest. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# coord transform\nggplot(diamonds_subset, aes(carat, price)) +\n  geom_point() +\n  coord_trans(x = \"log10\")\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-27-1.png){width=288}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# coord_flip\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar() # bar\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-28-1.png){width=480}\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut)\n) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-28-2.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# scales\nggplot(diamonds_subset, aes(carat, price)) +\n  geom_point() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-29-1.png){width=288}\n:::\n:::\n\n\nBrief aside: ggplot can also handle on-the-fly data transformations like below. \n\n::: {.cell}\n\n```{.r .cell-code}\n# log transformed carat and USD converted to CAD\nggplot(diamonds_subset, aes(log10(carat), price * 1.32)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-30-1.png){width=288}\n:::\n:::\n\n\n### Zooming into a plot - Exercise 12\n\nOne might often want to change the limits of x or y axes to zoom in. There are multiple ways to do this. \n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(diamonds_subset, aes(carat, price)) +\n  geom_point(alpha = 0.5) +\n  coord_cartesian(xlim = c(0, 2), ylim = c(0, 5000))\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-31-1.png){width=288}\n:::\n\n```{.r .cell-code}\nggplot(diamonds_subset, aes(carat, price)) +\n  geom_point(alpha = 0.5) +\n  xlim(0, 2) +\n  ylim(0, 5000)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 269 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-31-2.png){width=288}\n:::\n:::\n\n\n### Faceting to plot subsets of data into separate panels - Exercise 13\n\nFacets divide a plot into subplots based on the values of one or more discrete variables. \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-facet.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# density plot for data subsets\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, fill = cut)\n) +\n  geom_density(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# density plot with facets\nggplot(\n  data = diamonds,\n  mapping = aes(x = log(price), fill = cut)\n) +\n  geom_density(color = \"black\") +\n  facet_wrap(~cut, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# scatter plot with facets\nggplot(\n  data = diamonds,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = .05) +\n  facet_wrap(~cut, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-34-2.png){width=672}\n:::\n:::\n\n\n### Themes - Exercise 14\n\nThemes can significantly affect the appearance of your plot. Thanksfully, there are a lot to choose from. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-themes.png){width=60%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# default theme\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8)\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-36-1.png){width=384}\n:::\n\n```{.r .cell-code}\n# theme black & white\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-36-2.png){width=384}\n:::\n\n```{.r .cell-code}\n# theme few\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_few()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-36-3.png){width=384}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# theme wsj\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_wsj()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-37-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# theme economist\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-37-2.png){width=576}\n:::\n:::\n\n\nYou can also customize pre-existing themes\n\n::: {.cell}\n\n```{.r .cell-code}\nmytheme <- theme_minimal(base_size = 15) +\n  theme(\n    aspect.ratio = 1,\n    panel.background =\n      element_rect(\n        colour = \"black\",\n        size = 1\n      )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\ni Please use the `linewidth` argument instead.\n```\n:::\n\n```{.r .cell-code}\nggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  mytheme # notice the lack of parantheses, because this is an object, not a function\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-38-1.png){width=288}\n:::\n:::\n\n\n\n### Labels & Legends - Exercise 15\n    \n\n::: {.cell}\n::: {.cell-output-display}\n![](img/ggplot-labels-legends.png){width=50%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = diamonds,\n  mapping = aes(x = cut, y = log(price), fill = cut)\n) +\n  geom_boxplot() +\n  labs(\n    y = \"Price (log scale)\", x = \"Cut\", color = \"Cut\",\n    title = \"Distribution of diamond prices by cut\",\n    subtitle = \"Data come from a random sample of 1000 diamonds\",\n    caption = \"Source: diamonds dataset from ggplot2\"\n  ) +\n  annotate(geom = \"text\", x = 1, y = 5, label = \"Random text\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-40-1.png){width=480}\n:::\n:::\n\n\n## *Additional points*\n\n### How to add a line to a plot? (Exercise 16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(\n  data = diamonds_subset,\n  mapping = aes(x = carat, y = price, color = cut)\n) +\n  geom_point(alpha = 0.8) +\n  theme_few()\n\np + geom_line()\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-41-1.png){width=384}\n:::\n\n```{.r .cell-code}\np + geom_hline(aes(yintercept = 5000))\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-41-2.png){width=384}\n:::\n\n```{.r .cell-code}\np + geom_vline(aes(xintercept = 2))\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-41-3.png){width=384}\n:::\n\n```{.r .cell-code}\np + geom_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-41-4.png){width=384}\n:::\n\n```{.r .cell-code}\np + geom_abline(aes(intercept = 0.5, slope = 5000))\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-41-5.png){width=384}\n:::\n:::\n\n\n### How to combine multiple plots into a figure? (Exercise 17)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot1 <- p\nplot2 <- p + geom_hline(aes(yintercept = 5000))\nplot3 <- p + geom_vline(aes(xintercept = 2))\nplot4 <- p + geom_abline(aes(intercept = 0.5, slope = 5000))\n\nall_plots <- plot_grid(plot1, plot2, plot3, plot4, labels = c(\"A\", \"B\", \"C\", \"D\"), nrow = 2)\nall_plots\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-42-1.png){width=576}\n:::\n\n```{.r .cell-code}\n# we have 4 legends, which is too many - can they be removed?\n# Yes, but it is not exactly straightforward\nlegend <- get_legend(plot1 + theme(legend.position = \"bottom\"))\nplot1 <- p + theme(legend.position = \"none\")\nplot2 <- p + geom_hline(aes(yintercept = 5000)) + theme(legend.position = \"none\")\nplot3 <- p + geom_vline(aes(xintercept = 2)) + theme(legend.position = \"none\")\nplot4 <- p + geom_abline(aes(intercept = 0.5, slope = 5000)) + theme(legend.position = \"none\")\n\nall_plots <- plot_grid(plot1, plot2, plot3, plot4, labels = c(\"A\", \"B\", \"C\", \"D\"), nrow = 2)\nplot_final <- plot_grid(all_plots, legend, ncol = 1, rel_heights = c(1, .1))\nplot_final\n```\n\n::: {.cell-output-display}\n![](class-04_files/figure-html/unnamed-chunk-42-2.png){width=576}\n:::\n:::\n\nMore information on using plot_grid (from package `cowplot`) is [here](https://wilkelab.org/cowplot/articles/plot_grid.html)\n\n### Saving plots (Exercise 18)\n\n::: {.cell}\n\n```{.r .cell-code}\nggsave(\"img/plot_final.png\", width = 5, height = 5)\n# Saves last plot as 5<e2><80><99> x 5<e2><80><99> file named \"plot_final.png\" in working directory. Matches file type to file extension\n```\n:::\n\n\n### The Final Problem Set and Grading Rubric\n\n* The final problem set assignment will be posted by 4pm today (i.e. _not_ at noon) \n* It is due Monday, August 31, by noon\n* You can work on the assignment in class tomorrow - which will be used for review and answering questions\n* Grading rubric will be listed at the beginning of the problem set.\n\n### Acknowledgements\n\nThe material for this class was heavily borrowed from: \n* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\n* TheRBootcamp: https://therbootcamp.github.io/BaselRBootcamp_2018April/_sessions/D3S2_PlottingI/PlottingI_practical_answers.html\n\n### Further Reading & Resources \n\n* R for data science https://r4ds.had.co.nz/index.html\n* Advanced R by Hadley Wickam https://adv-r.hadley.nz/\n* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/\n* ggplot2 reference: https://ggplot2.tidyverse.org/reference/\n* ggthemes: https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/\n\n",
    "supporting": [
      "class-04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}