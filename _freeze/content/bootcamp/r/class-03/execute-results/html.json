{
  "hash": "250063f5878e15848f2198c264fb45d9",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - class 3\"\nauthor: \"Sujatha Jagannathan\"\n---\n\n\n## Learning Objectives for the R Bootcamp\n\n.pull-left\\[ \\* .large\\[Follow best coding practices\\] \\* .large\\[Know the fundamentals of R programming\\] \\* .large\\[Become familiar with \"tidyverse\" suite of packages\\] \\* tidyr: \"Tidy\" a messy dataset \\* dplyr: Transform data to derive new information \\<-- *Class 3* \\* ggplot2: Visualize and communicate results \\* .large\\[Practice reproducible analysis\\]\\]\n\n.pull-right\\[![](img/tidy1.png)\\] .pull-right\\[Source: R for Data Science by Hadley Wickham\\] ---\n\n## Rigor & Reproducibility\n\n.large\\[For the purposes of this R bootcamp, the best R&R tool we have at our disposal is using Rmarkdown documents. \\]\n\n------------------------------------------------------------------------\n\n## Today's class outline\n\n.large\\[ \\* Introduce *dplyr* \\* Review basic functions of *dplyr* \\* core dplyr verbs: `select`, `filter`, `arrange`, `mutate`, and `summarise` \\* modify scope of verbs using: `group_by` \\* pipe: `%>%` \\* Combining tables with dplyr: join functions, binding columns/rows, etc. \\* ... and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull` \\* Homework instructions\\] ---\n\n## Today's dataset\n\n.large\\[\n\n``` {show-code}\n* In this class, we will use the datasets that come with the `nycflights13` package to explore all the functions provided by tidyr. \n* `nycflights13::flights` data frame contains data about all 336,776 flights that departed from New York City in 2013 from the US Bureau of Transportation Statistics\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## Getting familiar with the data - .red\\[Exercise #1\\]\n\n.large\\[\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  flights  \n  head(flights)\n  glimpse(flights)\n  View(flights) # this opens up the table in an excel like fashion\n```\n:::\n\n\n\\]\n\n------------------------------------------------------------------------\n\n## dplyr package\n\n.large\\[\n\n-   `dplyr` is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:\n\n    `arrange()` changes the ordering of the rows. `filter()` picks cases based on their values. `select()` picks variables based on their names. `mutate()` adds new variables that are functions of existing variables `summarise()` reduces multiple values down to a single summary.\n\nThese all combine naturally with `group_by()` which allows you to perform any operation \"by group\".\n\nSource: https://dplyr.tidyverse.org/ \\]\n\n------------------------------------------------------------------------\n\n## `arrange`, `filter`, and `select`\n\n.large\\[ - When do you use it? - `arrange` to order rows by values of one or more columns. - `filter` to extract rows that meet a logical criteria. - `select` to count the number of rows in which a value occurs within a column\\]\n\n------------------------------------------------------------------------\n\n## `arrange`\n\n.large\\[ - `arrange()` to order rows by values of a column or columns (low to high). `desc()` orders high to low.\n\n-   Syntax\n\n``` {shw-code}\narrange(data = ..., <colname>)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `arrange` - .red\\[Exercise #2\\]\n\n.large\\[\n\n``` {show-code}\narrange(flights, year, month, day)\narrange(flights, desc(dep_delay))\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `filter`\n\n.large\\[ - `filter()` chooses rows/cases where conditions are true.\n\n-   Syntax\n\n```         \nfilter(data = ..., <condition>)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `filter` - .red\\[Exercise #3\\]\n\n.large\\[\n\n``` {show-code}\nfilter(flights, month == 1)\nfilter(flights, month == 1, day == 1)\nfilter(flights, month == 11 | month == 12)\nfilter(flights, !(month == 11 | month == 12))\nnov_dec <- filter(flights, month %in% c(11, 12))\n```\n\nNote: Most frequently used comparison operators are: \\>, \\>=, \\<, \\<=, != (not equal), and == (equal). \\]\n\n------------------------------------------------------------------------\n\n## `select`\n\n.large\\[ - `select` extracts one or more columns from a table - `select_if()` to extract all columns of a particular type\n\n-   Syntax:\n\n``` {show-code}\nselect(data = ..., <colname>)  \nselect_if(data = ..., <condition>)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `select` - .red\\[Exercise #4\\]\n\n.large\\[\n\n``` {show-code}\nselect(flights, year, month, day)\nselect(flights, year:day)\nselect(flights, -(year:day))\nselect(flights, ends_with(\"time\"))\nselect(flights, time_hour, air_time, everything())\n\nselect_if(flights, is.character)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `mutate`\n\n.large\\[ - `mutate()` to compute new columns\n\n-   Syntax\n\n``` {show-code}\nmutate(data = ..., <newcolname> =  funs(<oldcolname>))\nmutate(data = ..., <colname>, funs(x))\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `mutate` - .red\\[Exercise #5\\]\n\n.large\\[\n\n``` {show-code}\nmutate(flights_sml, speed = distance / air_time * 60)\n\nmutate(flights_sml,\n  gain = dep_delay - arr_delay,\n  hours = air_time / 60,\n  gain_per_hour = gain / hours\n)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `summarise`\n\n.large\\[ - `summarise()` reduces multiple values down to a single summary.\n\n-   Syntax\n\n``` {show-code}\nsummarise(data = ..., <colname>)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `summarise` - .red\\[Exercise #6\\]\n\n.large\\[\n\n``` {show-code}\nsummarise(flights, delay = mean(dep_delay, na.rm = TRUE))\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `group_by`\n\n.large\\[ \\* summarise() is not terribly useful unless we pair it with group_by(). \\* `group_by` reate a grouped copy of a table. \\* This changes the unit of analysis from the complete dataset to individual groups. \\* Then, when you use the dplyr verbs on a grouped data frame they'll be automatically applied \"by group\".\n\n-   Syntax\n\n``` {show-code}\ngroup_by(data = ..., <colname>)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## `group_by` and `summarize` - .red\\[Exercise #7\\]\n\n.large\\[\n\n``` {show-code}\nby_day <- group_by(flights, year, month, day)\nsummarise(by_day, delay = mean(dep_delay, na.rm = TRUE))\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## The Pipe `%>%` - .red\\[Exercise #8\\]\n\n.large\\[ \\* The pipe combines multiple operations in a sequential order to create a pipeline of transformations\n\n``` {show-code}\ndelays <- flights %>% \n  group_by(dest) %>% \n  summarise(\n    count = n(),\n    dist = mean(distance, na.rm = TRUE),\n    delay = mean(arr_delay, na.rm = TRUE)\n  ) %>% \n  filter(count > 20, dest != \"HNL\")\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## Join functions\n\n-   Combine variables (i.e. columns)\n    -   `bind_cols()`\n    -   `left_join()`\n    -   `right_join()`\n    -   `inner_join()`\n    -   `full_join()`\n-   Combine cases (i.e. rows)\n    -   `bind_rows()`\n    -   `intersect()`\n    -   `setdiff()`\n    -   `union()`\n\n------------------------------------------------------------------------\n\n## Combine variables and cases - pasting tables together\n\n-   `bind_cols()` to paste tables beside each other\n\n-   `bind_rows()` to paste tables below each other as they are.\n\n-   Syntax:\n\n```         \nbind_cols(data1, data2)\nbind_rows(data1, data2)\n```\n\n------------------------------------------------------------------------\n\n## Combine variables - joining tables by a variable\n\n-   `left_join()` to join matching values from the right dataset to the left dataset\n\n-   Syntax:\n\n```         \nleft_join(data1, data2)\nleft_join(data1, data2, by = ...)\nleft_join(data1, data2, by = c(\"col1\" = \"col2\"))\n```\n\n-   Examples:\\\n\n```         \n```\n\n------------------------------------------------------------------------\n\n## Other dplyr verbs\n\n## `rename`\n\n-   `rename()` renames the variables in a table. Keeps all columns. `select()` can also do this, but with some caveats.\n\n-   Syntax\n\n```         \nrename(data = ..., <colname>)\n```\n\n-   Examples:\n\n```         \nrename(data_transcript_level, data_type = type)\nselect(data_transcript_level, data_type = type)\nselect(data_transcript_level, data_type = type, everything())\n```\n\n## `count`\n\n-   `count()` counts number of rows in each group defined by the specified variable.\n\n-   Syntax\n\n```         \ncount(data = ..., <colname>)\n```\n\n-   Examples:\n\n```         \ncount(data_transcript_level, hgnc_symbol)\ncount(data_transcript_level, replicate)\n```\n\n## Problem Set and Grading Rubric\n\n.large\\[ \\* Today's problem set assignment will allow you to practice the tidyr tools we learned in class today. \\* There is a total of 5 exercises, each with 2 points for a total of 10 points. \\* Link to [grading rubric](https://molb7950.netlify.app/policies/).\\]\n\n------------------------------------------------------------------------\n\n## Acknowledgements\n\n.large\\[ The material for this class was heavily borrowed from: \\* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\\]\n\n------------------------------------------------------------------------\n\n## Further Reading & Resources\n\n.large\\[ \\* R for data science https://r4ds.had.co.nz/index.html \\* Advanced R by Hadley Wickam https://adv-r.hadley.nz/ \\* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/\\]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}