{
  "hash": "8890bf687e0adecb49cd02b278e19055",
  "result": {
    "markdown": "---\ntitle: \"Exercises-03\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/26/2020\"\n---\n\n\n\n\n\n### Contact Info \nSuja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)\n\n### Office Hours\nUse https://calendly.com/molb7950 to schedule a time with a TA.\n\n### Learning Objectives for the R Bootcamp\n\n* Follow best coding practices (*class 1*)\n* Know the fundamentals of R programming (*class 1*)\n* Become familiar with \"tidyverse\" suite of packages\n    * tidyr: \"Tidy\" a messy dataset (*class 2*)\n    * dplyr: Transform data to derive new information (*class 3*)\n    * ggplot2: Visualize and communicate results (*class 4*)\n* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n### Today's class outline - *class 3*\n\n* Introduce _dplyr_ & today's datasets (Exercise 1)\n* Review basic functions of _dplyr_\n    * core dplyr verbs: \n        - `arrange` (Exercise 2)\n        - `filter` (Exercise 3)\n        - `select` (Exercise 4)\n        - `mutate` (Exercise 5)\n        - `summarise` (Exercise 6)\n    * modify scope of verbs using: `group_by` (Exercise 7)\n    * pipe: `%>%` (Exercise 5)\n    * Combining tables with dplyr: join functions, binding columns/rows, etc. (Exercise 8)\n    * ... and many others! `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull` (Exercise 9)\n* Homework instructions\n\n## dplyr\n\n* _dplyr_ is a tidyverse package which provides a set of tools for efficiently manipulating datasets in R. \n* Implemented in C++ and extremely fast even with large datasets. \n* Follows the tidyverse grammar and philosophy; human-readable and intuitive\n* Different _dplyr_ verbs can be strung together using pipes `%>%`\n\n### Today's datasets\n\n* In this class, we will use one of the datasets that come with the `dplyr` package to explore all the functions provided by dplyr.  \n* `dplyr::starwars` data frame contains data about 87 characters from Starwars\n* `dplyr::band_members`, `dplyr::band_instruments`, `dplyr::band_instruments2` describe band members and instruments of the Beatles and Rolling Stones\n\n### Getting familiar with the data - Exercise 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dplyr::starwars\n  head(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 Luke Sky~    172    77 blond      fair       blue            19   male  mascu~\n2 C-3PO        167    75 <NA>       gold       yellow         112   none  mascu~\n3 R2-D2         96    32 <NA>       white, bl~ red             33   none  mascu~\n4 Darth Va~    202   136 none       white      yellow          41.9 male  mascu~\n5 Leia Org~    150    49 brown      light      brown           19   fema~ femin~\n6 Owen Lars    178   120 brown, gr~ light      blue            52   male  mascu~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\n  starwars  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu~\n 3 R2-D2        96    32 <NA>       white, bl~ red             33   none  mascu~\n 4 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n 5 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 6 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 7 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu~\n 9 Biggs D~    183    84 black      light      brown           24   male  mascu~\n10 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n# i 77 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\n  glimpse(starwars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 87\nColumns: 14\n$ name       <chr> \"Luke Skywalker\", \"C-3PO\", \"R2-D2\", \"Darth Vader\", \"Leia Or~\n$ height     <int> 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, 2~\n$ mass       <dbl> 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77.~\n$ hair_color <chr> \"blond\", NA, NA, \"none\", \"brown\", \"brown, grey\", \"brown\", N~\n$ skin_color <chr> \"fair\", \"gold\", \"white, blue\", \"white\", \"light\", \"light\", \"~\n$ eye_color  <chr> \"blue\", \"yellow\", \"red\", \"yellow\", \"brown\", \"blue\", \"blue\",~\n$ birth_year <dbl> 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0, ~\n$ sex        <chr> \"male\", \"none\", \"none\", \"male\", \"female\", \"male\", \"female\",~\n$ gender     <chr> \"masculine\", \"masculine\", \"masculine\", \"masculine\", \"femini~\n$ homeworld  <chr> \"Tatooine\", \"Tatooine\", \"Naboo\", \"Tatooine\", \"Alderaan\", \"T~\n$ species    <chr> \"Human\", \"Droid\", \"Droid\", \"Human\", \"Human\", \"Human\", \"Huma~\n$ films      <list> <\"The Empire Strikes Back\", \"Revenge of the Sith\", \"Return~\n$ vehicles   <list> <\"Snowspeeder\", \"Imperial Speeder Bike\">, <>, <>, <>, \"Imp~\n$ starships  <list> <\"X-wing\", \"Imperial shuttle\">, <>, <>, \"TIE Advanced x1\",~\n```\n:::\n\n```{.r .cell-code}\n  #View(starwars)\n\n# dplyr::band_members \n  band_members \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  band   \n  <chr> <chr>  \n1 Mick  Stones \n2 John  Beatles\n3 Paul  Beatles\n```\n:::\n\n```{.r .cell-code}\n  band_instruments\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n\n```{.r .cell-code}\n  band_instruments2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  artist plays \n  <chr>  <chr> \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n```\n:::\n:::\n\n\n### dplyr package\n\n* `dplyr` is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:\n  - `arrange()` changes the ordering of the rows.\n  - `filter()` picks cases based on their values.\n  - `select()` picks variables based on their names.\n  - `mutate()` adds new variables that are functions of existing variables\n  - `summarise()` reduces multiple values down to a single summary.\n  \nThese all combine naturally with `group_by()` which allows you to perform any operation <e2><80><9c>by group<e2><80><9d>. \n\nPipes `%>%` allows different functions to be used together to create a workflow. `x %>% f(y)` turns into `f(x, y)`\n\nSource: https://dplyr.tidyverse.org/\n\n### arrange - Syntax\n\n- `arrange()` to order rows by values of a column or columns (low to high). `desc()` orders high to low. \n\n```{shw-code}\narrange(data = ..., <colname>)\n```\n\n### arrange - Exercise 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(starwars, height) # default is to arrange in ascending order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Yoda         66    17 white      green      brown            896 male  mascu~\n 2 Ratts T~     79    15 none       grey, blue unknown           NA male  mascu~\n 3 Wicket ~     88    20 brown      brown      brown              8 male  mascu~\n 4 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu~\n 5 R2-D2        96    32 <NA>       white, bl~ red               33 none  mascu~\n 6 R4-P17       96    NA none       silver, r~ red, blue         NA none  femin~\n 7 R5-D4        97    32 <NA>       white, red red               NA none  mascu~\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu~\n 9 Gasgano     122    NA none       white, bl~ black             NA male  mascu~\n10 Watto       137    NA black      blue, grey yellow            NA male  mascu~\n# i 77 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\narrange(starwars, desc(height)) # arrange in descending order\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Yarael ~    264    NA none       white      yellow          NA   male  mascu~\n 2 Tarfful     234   136 brown      brown      blue            NA   male  mascu~\n 3 Lama Su     229    88 none       grey       black           NA   male  mascu~\n 4 Chewbac~    228   112 brown      unknown    blue           200   male  mascu~\n 5 Roos Ta~    224    82 none       grey       orange          NA   male  mascu~\n 6 Grievous    216   159 none       brown, wh~ green, y~       NA   male  mascu~\n 7 Taun We     213    NA none       grey       black           NA   fema~ femin~\n 8 Rugor N~    206    NA none       green      orange          NA   male  mascu~\n 9 Tion Me~    206    80 none       grey       black           NA   male  mascu~\n10 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n# i 77 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\narrange(starwars, height, mass) # arrange by multiple columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Yoda         66    17 white      green      brown            896 male  mascu~\n 2 Ratts T~     79    15 none       grey, blue unknown           NA male  mascu~\n 3 Wicket ~     88    20 brown      brown      brown              8 male  mascu~\n 4 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu~\n 5 R2-D2        96    32 <NA>       white, bl~ red               33 none  mascu~\n 6 R4-P17       96    NA none       silver, r~ red, blue         NA none  femin~\n 7 R5-D4        97    32 <NA>       white, red red               NA none  mascu~\n 8 Sebulba     112    40 none       grey, red  orange            NA male  mascu~\n 9 Gasgano     122    NA none       white, bl~ black             NA male  mascu~\n10 Watto       137    NA black      blue, grey yellow            NA male  mascu~\n# i 77 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n:::\n\n\n### filter - Syntax\n\n- `filter()` chooses rows/cases where conditions are true.\n\n```{show-code}\nfilter(data = ..., <condition>)\n```\n\n### filter - Exercise 3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color == \"light\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 \"Leia O~    150    49 brown      light      brown             19 fema~ femin~\n 2 \"Owen L~    178   120 brown, gr~ light      blue              52 male  mascu~\n 3 \"Beru W~    165    75 brown      light      blue              47 fema~ femin~\n 4 \"Biggs ~    183    84 black      light      brown             24 male  mascu~\n 5 \"Lobot\"     175    79 none       light      blue              37 male  mascu~\n 6 \"Cord\\u~    157    NA brown      light      brown             NA fema~ femin~\n 7 \"Dorm\\u~    165    NA brown      light      brown             NA fema~ femin~\n 8 \"Raymus~    188    79 brown      light      brown             NA male  mascu~\n 9 \"Rey\"        NA    NA brown      light      hazel             NA fema~ femin~\n10 \"Poe Da~     NA    NA brown      light      brown             NA male  mascu~\n11 \"Padm\\u~    165    45 brown      light      brown             46 fema~ femin~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nfilter(starwars, height < 150)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 R2-D2        96    32 <NA>       white, bl~ red               33 none  mascu~\n 2 R5-D4        97    32 <NA>       white, red red               NA none  mascu~\n 3 Yoda         66    17 white      green      brown            896 male  mascu~\n 4 Wicket ~     88    20 brown      brown      brown              8 male  mascu~\n 5 Watto       137    NA black      blue, grey yellow            NA male  mascu~\n 6 Sebulba     112    40 none       grey, red  orange            NA male  mascu~\n 7 Dud Bolt     94    45 none       blue, grey yellow            NA male  mascu~\n 8 Gasgano     122    NA none       white, bl~ black             NA male  mascu~\n 9 Ratts T~     79    15 none       grey, blue unknown           NA male  mascu~\n10 R4-P17       96    NA none       silver, r~ red, blue         NA none  femin~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nfilter(starwars, mass > mean(mass, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n 2 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 3 Chewbac~    228   112 brown      unknown    blue           200   male  mascu~\n 4 Jabba D~    175  1358 <NA>       green-tan~ orange         600   herm~ mascu~\n 5 Jek Ton~    180   110 brown      fair       blue            NA   male  mascu~\n 6 IG-88       200   140 none       metal      red             15   none  mascu~\n 7 Bossk       190   113 none       green      red             53   male  mascu~\n 8 Dexter ~    198   102 none       brown      yellow          NA   male  mascu~\n 9 Grievous    216   159 none       brown, wh~ green, y~       NA   male  mascu~\n10 Tarfful     234   136 brown      brown      blue            NA   male  mascu~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nfilter(starwars, is.na(hair_color))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 C-3PO        167    75 <NA>       gold       yellow           112 none  mascu~\n2 R2-D2         96    32 <NA>       white, bl~ red               33 none  mascu~\n3 R5-D4         97    32 <NA>       white, red red               NA none  mascu~\n4 Greedo       173    74 <NA>       green      black             44 male  mascu~\n5 Jabba De~    175  1358 <NA>       green-tan~ orange           600 herm~ mascu~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\n#View(filter(starwars, is.na(hair_color))) # if you want to look at the filtered data in a table without creating a new table\n```\n:::\n\n\n* Most frequently used comparison operators are: >, <, >=, <=, == (equal), != (not equal), is.na(), !is.na(), and %in% (contained in a list). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color %in% c(\"light\", \"fair\", \"pale\")) # using %in%\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 3 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 4 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 5 Biggs D~    183    84 black      light      brown           24   male  mascu~\n 6 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n 7 Anakin ~    188    84 blond      fair       blue            41.9 male  mascu~\n 8 Wilhuff~    180    NA auburn, g~ fair       blue            64   male  mascu~\n 9 Han Solo    180    80 brown      fair       brown           29   male  mascu~\n10 Wedge A~    170    77 brown      fair       hazel           21   male  mascu~\n# i 23 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\n# can also store as a named vector and use %in% with the vector\ncolor <- c(\"light\", \"fair\", \"pale\")\nfilter(starwars, skin_color %in% color) # using %in%\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 3 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 4 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 5 Biggs D~    183    84 black      light      brown           24   male  mascu~\n 6 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n 7 Anakin ~    188    84 blond      fair       blue            41.9 male  mascu~\n 8 Wilhuff~    180    NA auburn, g~ fair       blue            64   male  mascu~\n 9 Han Solo    180    80 brown      fair       brown           29   male  mascu~\n10 Wedge A~    170    77 brown      fair       hazel           21   male  mascu~\n# i 23 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n:::\n\n\n* Conditions can be combined using & (and), | (or). \n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(starwars, skin_color == \"light\" | eye_color == \"brown\") # using or\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 x 14\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Leia Or~    150  49   brown      light      brown           19   fema~ femin~\n 2 Owen La~    178 120   brown, gr~ light      blue            52   male  mascu~\n 3 Beru Wh~    165  75   brown      light      blue            47   fema~ femin~\n 4 Biggs D~    183  84   black      light      brown           24   male  mascu~\n 5 Han Solo    180  80   brown      fair       brown           29   male  mascu~\n 6 Yoda         66  17   white      green      brown          896   male  mascu~\n 7 Boba Fe~    183  78.2 black      fair       brown           31.5 male  mascu~\n 8 Lando C~    177  79   black      dark       brown           31   male  mascu~\n 9 Lobot       175  79   none       light      blue            37   male  mascu~\n10 Arvel C~     NA  NA   brown      fair       brown           NA   male  mascu~\n# i 15 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nfilter(starwars, skin_color == \"light\" & eye_color == \"brown\") # using and\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 x 14\n  name      height  mass hair_color skin_color eye_color birth_year sex   gender\n  <chr>      <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n1 \"Leia Or~    150    49 brown      light      brown             19 fema~ femin~\n2 \"Biggs D~    183    84 black      light      brown             24 male  mascu~\n3 \"Cord\\u0~    157    NA brown      light      brown             NA fema~ femin~\n4 \"Dorm\\u0~    165    NA brown      light      brown             NA fema~ femin~\n5 \"Raymus ~    188    79 brown      light      brown             NA male  mascu~\n6 \"Poe Dam~     NA    NA brown      light      brown             NA male  mascu~\n7 \"Padm\\u0~    165    45 brown      light      brown             46 fema~ femin~\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n:::\n\n\n### select - Syntax\n\n- `select` extracts one or more columns from a table \n- `select_if()` to extract all columns of a particular type\n\n```{show-code}\nselect(data = ..., <colname>)  \nselect_if(data = ..., <condition>)\n```\n\n### select - Exercise 4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(starwars, hair_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 1\n   hair_color   \n   <chr>        \n 1 blond        \n 2 <NA>         \n 3 <NA>         \n 4 none         \n 5 brown        \n 6 brown, grey  \n 7 brown        \n 8 <NA>         \n 9 black        \n10 auburn, white\n# i 77 more rows\n```\n:::\n\n```{.r .cell-code}\nselect(starwars, -hair_color) # can also use not `!hair_color`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 13\n   name      height  mass skin_color eye_color birth_year sex   gender homeworld\n   <chr>      <int> <dbl> <chr>      <chr>          <dbl> <chr> <chr>  <chr>    \n 1 Luke Sky~    172    77 fair       blue            19   male  mascu~ Tatooine \n 2 C-3PO        167    75 gold       yellow         112   none  mascu~ Tatooine \n 3 R2-D2         96    32 white, bl~ red             33   none  mascu~ Naboo    \n 4 Darth Va~    202   136 white      yellow          41.9 male  mascu~ Tatooine \n 5 Leia Org~    150    49 light      brown           19   fema~ femin~ Alderaan \n 6 Owen Lars    178   120 light      blue            52   male  mascu~ Tatooine \n 7 Beru Whi~    165    75 light      blue            47   fema~ femin~ Tatooine \n 8 R5-D4         97    32 white, red red             NA   none  mascu~ Tatooine \n 9 Biggs Da~    183    84 light      brown           24   male  mascu~ Tatooine \n10 Obi-Wan ~    182    77 fair       blue-gray       57   male  mascu~ Stewjon  \n# i 77 more rows\n# i 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>\n```\n:::\n\n```{.r .cell-code}\nselect(starwars, hair_color, skin_color, eye_color)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 3\n   hair_color    skin_color  eye_color\n   <chr>         <chr>       <chr>    \n 1 blond         fair        blue     \n 2 <NA>          gold        yellow   \n 3 <NA>          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 <NA>          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# i 77 more rows\n```\n:::\n\n```{.r .cell-code}\nselect(starwars, hair_color:eye_color) # select using x:y columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 3\n   hair_color    skin_color  eye_color\n   <chr>         <chr>       <chr>    \n 1 blond         fair        blue     \n 2 <NA>          gold        yellow   \n 3 <NA>          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 <NA>          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# i 77 more rows\n```\n:::\n\n```{.r .cell-code}\nselect(starwars, !(hair_color:eye_color)) # reverse selection using the not `!` operator\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 11\n   name    height  mass birth_year sex   gender homeworld species films vehicles\n   <chr>    <int> <dbl>      <dbl> <chr> <chr>  <chr>     <chr>   <lis> <list>  \n 1 Luke S~    172    77       19   male  mascu~ Tatooine  Human   <chr> <chr>   \n 2 C-3PO      167    75      112   none  mascu~ Tatooine  Droid   <chr> <chr>   \n 3 R2-D2       96    32       33   none  mascu~ Naboo     Droid   <chr> <chr>   \n 4 Darth ~    202   136       41.9 male  mascu~ Tatooine  Human   <chr> <chr>   \n 5 Leia O~    150    49       19   fema~ femin~ Alderaan  Human   <chr> <chr>   \n 6 Owen L~    178   120       52   male  mascu~ Tatooine  Human   <chr> <chr>   \n 7 Beru W~    165    75       47   fema~ femin~ Tatooine  Human   <chr> <chr>   \n 8 R5-D4       97    32       NA   none  mascu~ Tatooine  Droid   <chr> <chr>   \n 9 Biggs ~    183    84       24   male  mascu~ Tatooine  Human   <chr> <chr>   \n10 Obi-Wa~    182    77       57   male  mascu~ Stewjon   Human   <chr> <chr>   \n# i 77 more rows\n# i 1 more variable: starships <list>\n```\n:::\n\n```{.r .cell-code}\nselect(starwars, ends_with(\"color\")) # select by specific conditions are met by column names: starts_with, ends_with, contains... \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 3\n   hair_color    skin_color  eye_color\n   <chr>         <chr>       <chr>    \n 1 blond         fair        blue     \n 2 <NA>          gold        yellow   \n 3 <NA>          white, blue red      \n 4 none          white       yellow   \n 5 brown         light       brown    \n 6 brown, grey   light       blue     \n 7 brown         light       blue     \n 8 <NA>          white, red  red      \n 9 black         light       brown    \n10 auburn, white fair        blue-gray\n# i 77 more rows\n```\n:::\n\n```{.r .cell-code}\nselect_if(starwars, is.numeric) # select_if to return all columns with numeric values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 3\n   height  mass birth_year\n    <int> <dbl>      <dbl>\n 1    172    77       19  \n 2    167    75      112  \n 3     96    32       33  \n 4    202   136       41.9\n 5    150    49       19  \n 6    178   120       52  \n 7    165    75       47  \n 8     97    32       NA  \n 9    183    84       24  \n10    182    77       57  \n# i 77 more rows\n```\n:::\n:::\n\n\n### mutate - Syntax\n\n- `mutate()` to compute new columns\n\nMutate has a LOT of variants. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/mutate.png){width=60%}\n:::\n:::\n\n\nSource: Rstudio cheatsheets\n\n```{show-code}\nmutate(data = ..., <newcolname> =  funs(<oldcolname>))\nmutate(data = ..., <colname>, funs(x))\n\n# using pipes! %>%\ndata %>% mutate(<colname>, funs(x)) # this is useful when you need to use multiple functions to act sequentially on a dataframe. Input becomes obvious by leading with it. \n```\n\n### mutate (& pipe %>%)- Exercise 5\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a new column to display height in meters\nstarwars %>% mutate(height_m = height / 100) # using pipe to feed data into the function\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 15\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu~\n 3 R2-D2        96    32 <NA>       white, bl~ red             33   none  mascu~\n 4 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n 5 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 6 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 7 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu~\n 9 Biggs D~    183    84 black      light      brown           24   male  mascu~\n10 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n# i 77 more rows\n# i 6 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>, height_m <dbl>\n```\n:::\n\n```{.r .cell-code}\n# using the pipe to feed data into multiple functions sequentially\nstarwars %>%\n  mutate(height_m = height / 100) %>% # this columns is always appended to the end of the table, by default\n  select(name, height_m, height, everything()) # using select to rearrange columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 15\n   name   height_m height  mass hair_color skin_color eye_color birth_year sex  \n   <chr>     <dbl>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>\n 1 Luke ~     1.72    172    77 blond      fair       blue            19   male \n 2 C-3PO      1.67    167    75 <NA>       gold       yellow         112   none \n 3 R2-D2      0.96     96    32 <NA>       white, bl~ red             33   none \n 4 Darth~     2.02    202   136 none       white      yellow          41.9 male \n 5 Leia ~     1.5     150    49 brown      light      brown           19   fema~\n 6 Owen ~     1.78    178   120 brown, gr~ light      blue            52   male \n 7 Beru ~     1.65    165    75 brown      light      blue            47   fema~\n 8 R5-D4      0.97     97    32 <NA>       white, red red             NA   none \n 9 Biggs~     1.83    183    84 black      light      brown           24   male \n10 Obi-W~     1.82    182    77 auburn, w~ fair       blue-gray       57   male \n# i 77 more rows\n# i 6 more variables: gender <chr>, homeworld <chr>, species <chr>,\n#   films <list>, vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\n# mutate allows you to refer to columns that you<e2><80><99>ve just created\nstarwars %>%\n  mutate(height_m = height / 100,\n         BMI = mass / (height_m^2)) %>%\n  select(name, BMI, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 16\n   name        BMI height  mass hair_color skin_color eye_color birth_year sex  \n   <chr>     <dbl>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>\n 1 Luke Sky~  26.0    172    77 blond      fair       blue            19   male \n 2 C-3PO      26.9    167    75 <NA>       gold       yellow         112   none \n 3 R2-D2      34.7     96    32 <NA>       white, bl~ red             33   none \n 4 Darth Va~  33.3    202   136 none       white      yellow          41.9 male \n 5 Leia Org~  21.8    150    49 brown      light      brown           19   fema~\n 6 Owen Lars  37.9    178   120 brown, gr~ light      blue            52   male \n 7 Beru Whi~  27.5    165    75 brown      light      blue            47   fema~\n 8 R5-D4      34.0     97    32 <NA>       white, red red             NA   none \n 9 Biggs Da~  25.1    183    84 black      light      brown           24   male \n10 Obi-Wan ~  23.2    182    77 auburn, w~ fair       blue-gray       57   male \n# i 77 more rows\n# i 7 more variables: gender <chr>, homeworld <chr>, species <chr>,\n#   films <list>, vehicles <list>, starships <list>, height_m <dbl>\n```\n:::\n\n```{.r .cell-code}\n# output needs to be saved into a new dataframe since dplyr does not \"change\" the original dataframe\nstarwars_bmi <- starwars %>%\n                      mutate(height_m = height / 100,\n                             BMI = mass / (height_m^2)) %>%\n                      select(name, BMI, everything())\n\n# using if_else clauses with mutate\nstarwars_height <- starwars %>%\n                      mutate(tall_short = if_else(\n                                            condition = height > 160, \n                                            true = \"tall\", \n                                            false = \"short\")) %>%\n                      select(name, tall_short, everything())\n```\n:::\n\n\nWhy use pipes? So you don't have to create too many intermediate files! However, note that intermediate files _can_ be useful in the context of troubleshooting a pipeline. \n\n### rowwise operations (if time permits)\n\n* dplyr (& tidyverse in general) is very easy to perform vectorized operations column-wise, and not so easy with row-wise operations. \n* the function _rowwise()_ offers a solution to this\n* Let's look at an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# let's input data (same one used in yesterday's problem set)\ndata <- read_csv(file = \"data/data_transcript_exp_subset.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 100 Columns: 7\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): ensembl_transcript_id\ndbl (6): rna_0h_rep1, rna_0h_rep2, rna_0h_rep3, rna_14h_rep1, rna_14h_rep2, ...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# calculate mean for each time point using mutate in a rowwise fashion!\ndata_mean <- data %>% rowwise() %>% mutate(mean_0h = mean(c(rna_0h_rep1, rna_0h_rep2, rna_0h_rep3)), \n                                           mean_14h = mean(c(rna_14h_rep1, rna_14h_rep2, rna_14h_rep3)))\n```\n:::\n\nMore information here: https://dplyr.tidyverse.org/articles/rowwise.html\n\n### summarise - Syntax\n\n- `summarise()` reduces multiple values down to a single summary.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/summarise.png){width=60%}\n:::\n:::\n\n\n\n```{show-code}\nsummarise(data = ..., <newcolname> =  funs(<oldcolname>))\nsummarise_at(data = ..., vars(<cols), funs())\n\n```\n\n### summarise - Exercise 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>% summarise(mean_height = mean(height, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 1\n  mean_height\n        <dbl>\n1        174.\n```\n:::\n\n```{.r .cell-code}\nstarwars %>% summarise_if(is.numeric, mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 3\n  height  mass birth_year\n   <dbl> <dbl>      <dbl>\n1   174.  97.3       87.6\n```\n:::\n\n```{.r .cell-code}\nstarwars %>% summarise_at(vars(height:mass), mean, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  height  mass\n   <dbl> <dbl>\n1   174.  97.3\n```\n:::\n:::\n\n\n* summarise() on its own is not terribly useful. But it becomes powerful when paired with group_by(). \n\n### group_by - Syntax\n\n* `group_by` reate a grouped copy of a table. \n* This changes the unit of analysis from the complete dataset to individual groups. \n* Then, when you use the dplyr verbs on a grouped data frame they<e2><80><99>ll be automatically applied <e2><80><9c>by group<e2><80><9d>. \n\n```{show-code}\ngroup_by(data = ..., <colname>)\n```\n\n### group_by + summarize - Exercise 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarwars %>%\n  group_by(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 87 x 14\n# Groups:   species [38]\n   name     height  mass hair_color skin_color eye_color birth_year sex   gender\n   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> \n 1 Luke Sk~    172    77 blond      fair       blue            19   male  mascu~\n 2 C-3PO       167    75 <NA>       gold       yellow         112   none  mascu~\n 3 R2-D2        96    32 <NA>       white, bl~ red             33   none  mascu~\n 4 Darth V~    202   136 none       white      yellow          41.9 male  mascu~\n 5 Leia Or~    150    49 brown      light      brown           19   fema~ femin~\n 6 Owen La~    178   120 brown, gr~ light      blue            52   male  mascu~\n 7 Beru Wh~    165    75 brown      light      blue            47   fema~ femin~\n 8 R5-D4        97    32 <NA>       white, red red             NA   none  mascu~\n 9 Biggs D~    183    84 black      light      brown           24   male  mascu~\n10 Obi-Wan~    182    77 auburn, w~ fair       blue-gray       57   male  mascu~\n# i 77 more rows\n# i 5 more variables: homeworld <chr>, species <chr>, films <list>,\n#   vehicles <list>, starships <list>\n```\n:::\n\n```{.r .cell-code}\nstarwars %>%\n  group_by(species) %>% # group by species\n  summarise(\n    height = mean(height, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 38 x 2\n   species   height\n   <chr>      <dbl>\n 1 Aleena       79 \n 2 Besalisk    198 \n 3 Cerean      198 \n 4 Chagrian    196 \n 5 Clawdite    168 \n 6 Droid       131.\n 7 Dug         112 \n 8 Ewok         88 \n 9 Geonosian   183 \n10 Gungan      209.\n# i 28 more rows\n```\n:::\n\n```{.r .cell-code}\nstarwars %>%\n  group_by(species, gender) %>% # group by multiple variables\n  summarise(\n    height = mean(height, na.rm = TRUE),\n    mass = mean(mass, na.rm = TRUE) # calculate multiple summaries\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 42 x 4\n# Groups:   species [38]\n   species   gender    height  mass\n   <chr>     <chr>      <dbl> <dbl>\n 1 Aleena    masculine     79  15  \n 2 Besalisk  masculine    198 102  \n 3 Cerean    masculine    198  82  \n 4 Chagrian  masculine    196 NaN  \n 5 Clawdite  feminine     168  55  \n 6 Droid     feminine      96 NaN  \n 7 Droid     masculine    140  69.8\n 8 Dug       masculine    112  40  \n 9 Ewok      masculine     88  20  \n10 Geonosian masculine    183  80  \n# i 32 more rows\n```\n:::\n:::\n\n\n## Combining tables\n\n- Combine variables (i.e. columns)\n    + `bind_cols()`\n    + `left_join()`\n    + `right_join()`\n    + `inner_join()`\n    + `full_join()`\n    \n- Combine cases (i.e. rows)\n    + `bind_rows()`\n    + `intersect()`\n    + `setdiff()`\n    + `union()`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/combining-tables.png){width=100%}\n:::\n:::\n\nSource: Rstudio cheatsheets\n\n### Combine variables and cases - pasting tables together - Syntax\n\n- `bind_cols()` to paste tables beside each other\n- `bind_rows()` to paste tables below each other as they are. \n\n```{show-code}\nbind_cols(data1, data2) # should have same number of rows\nbind_rows(data1, data2) # should have same number of columns\n```\n\n### Combine variables - joining tables by a variable - Syntax\n\n- `left_join()` to join matching values from the right dataset to the left dataset\n- `right_join()` to join matching values from the left dataset to the right dataset\n- `inner_join()` to only join matching values present in both datasets\n- `full_join()` to join all values in both datasets\n\n```{show-code}\nleft_join(data1, data2)\nleft_join(data1, data2, by = ...) # if multiple columns match\nleft_join(data1, data2, by = c(\"col1\" = \"col2\")) # if the columns names that match are different\n```\n\n### Combine variables - joining tables by a variable - Exercise 8\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% left_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nband_members %>% right_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n3 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\nband_members %>% inner_join(band_instruments)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 John  Beatles guitar\n2 Paul  Beatles bass  \n```\n:::\n\n```{.r .cell-code}\nband_members %>% full_join(band_instruments) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n\n```{.r .cell-code}\n# band_members %>% full_join(band_instruments2) \n# the above code won't work because there are no matching column names\nband_members %>% full_join(band_instruments2, by = c(\"name\" = \"artist\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  name  band    plays \n  <chr> <chr>   <chr> \n1 Mick  Stones  <NA>  \n2 John  Beatles guitar\n3 Paul  Beatles bass  \n4 Keith <NA>    guitar\n```\n:::\n:::\n\n\n* Joining tables is something you will do a LOT in genomic analyses.   \n* Things to watch out for are to:\n    - explicitly say which variable to join by\n    - making sure there aren't subtle difference between what you think of as \"common\" variables \n    - eg. Paul vs. Paul M; ENST79286869869 vs ENST79286869869.12\n\n---\n\n### Other dplyr verbs\n\nThere are many other dplyr verbs: `rename`, `count`, `add_row`, `add_column`, `distinct`, `sample_n`, `sample_frac`, `slice`, `pull`\n\nCheck out the dplyr cheatsheet to learn more! \n\n### rename - Syntax\n\n- `rename()` renames the variables in a table. Keeps all columns. `select()` can also do this, but with some caveats. \n\n```{show-code}\nrename(data = ..., <colname>)\n```\n\n### rename - Exercise 9\n\n::: {.cell}\n\n```{.r .cell-code}\nband_instruments2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  artist plays \n  <chr>  <chr> \n1 John   guitar\n2 Paul   bass  \n3 Keith  guitar\n```\n:::\n\n```{.r .cell-code}\nrename(band_instruments2, name = artist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n\n```{.r .cell-code}\nselect(band_instruments2, name = artist) # select drops the rest of the columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 1\n  name \n  <chr>\n1 John \n2 Paul \n3 Keith\n```\n:::\n\n```{.r .cell-code}\nselect(band_instruments2, name = artist, everything()) # this fixes it, but one extra thing to remember\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  name  plays \n  <chr> <chr> \n1 John  guitar\n2 Paul  bass  \n3 Keith guitar\n```\n:::\n:::\n\n\n### Problem Set and Grading Rubric\n\n* Today's problem set assignment will allow you to practice the tidyr tools we learned in class today. \n* There is a total of 4 exercises, each with 5 points for a total of 20 points. \n* Grading rubric listed at the beginning of the problem set.\n\n### Acknowledgements\n\nThe material for this class was heavily borrowed from: \n* dplyr vignette: https://dplyr.tidyverse.org/index.html\n* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\n\n### Further Reading & Resources \n\n* R for data science https://r4ds.had.co.nz/index.html\n* Advanced R by Hadley Wickam https://adv-r.hadley.nz/\n* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}