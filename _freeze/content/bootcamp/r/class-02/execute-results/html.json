{
  "hash": "3680a05c998f24f9a1033d9b44addbaf",
  "result": {
    "markdown": "---\ntitle: \"Exercises-02\"\nauthor: \"Sujatha Jagannathan\"\ndate: \"8/25/2020\"\n---\n\n\n\n\n### Contact Info \nSuja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)\n\n### Office Hours\nUse https://calendly.com/molb7950 to schedule a time with a TA.\n\n<br/>\n\n### Learning Objectives for the R Bootcamp\n\n* Follow best coding practices (*class 1*)\n* Know the fundamentals of R programming (*class 1*)\n* Become familiar with \"tidyverse\" suite of packages\n    * tidyr: \"Tidy\" a messy dataset (*class 2*)\n    * dplyr: Transform data to derive new information (*class 3*)\n    * ggplot2: Visualize and communicate results (*class 4*)\n* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)\n\n### Today's class outline - *class 2*\n\n* Become familiar with \"tidyverse\" suite of packages\n* Introduce _readr_ (Exercise 1)\n* Introduce _tidyr_ (Exercise 2)\n* Tools for data exploration (Exercises 3-5)\n* Review basic functions of _tidyr_\n    * pivot_wider (Exercise 6)\n    * pivot_longer (Exercise 7)\n    * separate (Exercise 8 & 9)\n    * unite (Exercise 10)\n    * handling missing values\n* (if time permits) Regular expressions (regex)\n* Homework instructions\n\n## Tidyverse\n\n* Tidyverse is an opinionated collection of R packages designed for data science. \n* All packages share an underlying design philosophy, grammar, and data structures.\n* 25 packages, total (as of today) - we will focus mainly on tidyr, dplyr, and ggplot2\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/tidy1.png){width=60%}\n:::\n:::\n\n<br/>\nSource: R for Data Science by Hadley Wickham\n\n### Data import - readr - Exercise 1\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/readr.png){width=70%}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/readr-args.png){width=80%}\n:::\n:::\n\nSource: Rstudio cheatsheets\n\n- Let's try importing a small dataset - Exercise # 1\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()  # good to know which folder you are on since the path to file is relative \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/Users/jayhesselberth/devel/rnabioco/molb-7950/content/bootcamp/r\"\n```\n:::\n\n```{.r .cell-code}\n         # same as `pwd` in bash\nmydata.tbl <- read_csv(file = \"data/mydata.csv\") # read in the file\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 4 Columns: 5\n-- Column specification\n-------------------------------------------------------- Delimiter: \",\" chr\n(2): chr, strand dbl (3): ...1, start, end\ni Use `spec()` to retrieve the full column specification for this data. i\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n* `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nmydata.tbl # look at the contents of the data object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 5\n   ...1 chr   strand start   end\n  <dbl> <chr> <chr>  <dbl> <dbl>\n1     1 chr1  -        200   250\n2     2 chr1  -       4000   410\n3     3 chr2  +        100   200\n4     4 chr2  +        400   450\n```\n:::\n\n```{.r .cell-code}\nd1 <- mydata.tbl # rename file\nd1 # look at contents of new object\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 5\n   ...1 chr   strand start   end\n  <dbl> <chr> <chr>  <dbl> <dbl>\n1     1 chr1  -        200   250\n2     2 chr1  -       4000   410\n3     3 chr2  +        100   200\n4     4 chr2  +        400   450\n```\n:::\n\n```{.r .cell-code}\nrm(mydata.tbl) # removing a dataset\n```\n:::\n\n\n__Note__: All of these functions can also be used in an interactive manner via `Environment` > `Import Dataset` > `From Text (readr)` \n\n### What is tidy data?\n\n>   \"Tidy datasets are all alike but every messy dataset is messy in its own way.\"\n>   \n>   --- Hadley Wickham\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/tidydata.png){width=100%}\n:::\n:::\n\nSource: Rstudio cheatsheets\n\n### Datasets for today's class - Exercise 2\n\n* In this class, we will use the datasets that come with the tidyr package to explore all the functions provided by tidyr. \n* Explore the contents of _tidyr_ package (Exercise #2)\n* `table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. \n\n### Getting familiar with the data - Exercise 3\n\nR provides many functions to examine features of a data object\n\n  - `View()` - To open the table up in an excel-like interface - not recommended for large tables\n  - `class()` - what kind of object is it (high-level)?\n  - `typeof()` - what is the object<e2><80><99>s data type (low-level)?\n  - `is_tibble()` - use is.? to confirm data type\n  - `str()` - what is the structure of the object?\n  - `attributes()` - does it have any metadata?\n\n* Let's explore table1\n\n::: {.cell}\n\n```{.r .cell-code}\n  #View(table1) # to look at the table in Viewer\n  table1 # to print the table to console\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n\n```{.r .cell-code}\n  class(table1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\n  typeof(table1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n\n```{.r .cell-code}\n  is_tibble(table1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n  str(table1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [6 x 4] (S3: tbl_df/tbl/data.frame)\n $ country   : chr [1:6] \"Afghanistan\" \"Afghanistan\" \"Brazil\" \"Brazil\" ...\n $ year      : num [1:6] 1999 2000 1999 2000 1999 ...\n $ cases     : num [1:6] 745 2666 37737 80488 212258 ...\n $ population: num [1:6] 2.00e+07 2.06e+07 1.72e+08 1.75e+08 1.27e+09 ...\n```\n:::\n\n```{.r .cell-code}\n  attributes(table1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5 6\n\n$names\n[1] \"country\"    \"year\"       \"cases\"      \"population\"\n```\n:::\n:::\n\nNote: a `tibble` can be coerced into a data.frame using `as.data.frame(tbl)`\n\n### Getting familiar with the data - Exercise 4\n\nSome of the useful Data Frame Functions are as follows:  \n  - `head()` - shows first 6 rows  \n  - `tail()` - shows last 6 rows  \n  - `dim()` - returns the dimensions of data frame (i.e. number of rows and number of columns)  \n  - `nrow()` - number of rows  \n  - `ncol()` - number of columns  \n  - `names()` or `colnames()` - both show the names attribute for a data frame  \n  - `sapply(dataframe, class)` - shows the class of each column in the data frame*  \n  - `glimpse()`\n\n*Iteration is not covered in this bootcamp. But there is a great primer on the package that does this, _purr_, on Rstudio Primers. https://rstudio.cloud/learn/primers/5\n\nMore functions to explore data - table2 this time. \n\n::: {.cell}\n\n```{.r .cell-code}\n  head(table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year type           count\n  <chr>       <dbl> <chr>          <dbl>\n1 Afghanistan  1999 cases            745\n2 Afghanistan  1999 population  19987071\n3 Afghanistan  2000 cases           2666\n4 Afghanistan  2000 population  20595360\n5 Brazil       1999 cases          37737\n6 Brazil       1999 population 172006362\n```\n:::\n\n```{.r .cell-code}\n  tail(table2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country  year type            count\n  <chr>   <dbl> <chr>           <dbl>\n1 Brazil   2000 cases           80488\n2 Brazil   2000 population  174504898\n3 China    1999 cases          212258\n4 China    1999 population 1272915272\n5 China    2000 cases          213766\n6 China    2000 population 1280428583\n```\n:::\n\n```{.r .cell-code}\n  tail(table2, n = 8)  # specify number of lines to print\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 x 4\n  country  year type            count\n  <chr>   <dbl> <chr>           <dbl>\n1 Brazil   1999 cases           37737\n2 Brazil   1999 population  172006362\n3 Brazil   2000 cases           80488\n4 Brazil   2000 population  174504898\n5 China    1999 cases          212258\n6 China    1999 population 1272915272\n7 China    2000 cases          213766\n8 China    2000 population 1280428583\n```\n:::\n\n```{.r .cell-code}\n  dim(table2) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12  4\n```\n:::\n\n```{.r .cell-code}\n  nrow(table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12\n```\n:::\n\n```{.r .cell-code}\n  ncol(table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n  names(table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"country\" \"year\"    \"type\"    \"count\"  \n```\n:::\n\n```{.r .cell-code}\n  sapply(table2, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    country        year        type       count \n\"character\"   \"numeric\" \"character\"   \"numeric\" \n```\n:::\n\n```{.r .cell-code}\n  class(table2) #observe the difference from the above command\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\n  glimpse(table2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 12\nColumns: 4\n$ country <chr> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"B~\n$ year    <dbl> 1999, 1999, 2000, 2000, 1999, 1999, 2000, 2000, 1999, 1999, 20~\n$ type    <chr> \"cases\", \"population\", \"cases\", \"population\", \"cases\", \"popula~\n$ count   <dbl> 745, 19987071, 2666, 20595360, 37737, 172006362, 80488, 174504~\n```\n:::\n:::\n\n\n### Getting familiar with the data - _summary_, _hist_, & _table_ - Exercise 5\n\n_summary_: A generic function used to produce result summaries of the results of various model fitting functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(table1) # summary of the whole table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   country               year          cases          population       \n Length:6           Min.   :1999   Min.   :   745   Min.   :1.999e+07  \n Class :character   1st Qu.:1999   1st Qu.: 11434   1st Qu.:5.845e+07  \n Mode  :character   Median :2000   Median : 59112   Median :1.733e+08  \n                    Mean   :2000   Mean   : 91277   Mean   :4.901e+08  \n                    3rd Qu.:2000   3rd Qu.:179316   3rd Qu.:9.983e+08  \n                    Max.   :2000   Max.   :213766   Max.   :1.280e+09  \n```\n:::\n\n```{.r .cell-code}\nsummary(table1$cases) # summary of just one column of the table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    745   11434   59112   91277  179316  213766 \n```\n:::\n:::\n\n\n_hist_: Takes in a vector of values and plots a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(table1$cases) # summary of just one column of the table\n```\n\n::: {.cell-output-display}\n![](class-02_files/figure-html/unnamed-chunk-10-1.png){width=384}\n:::\n:::\n\n\n_table_: Uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(table2$year) # tally of one column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1999 2000 \n   6    6 \n```\n:::\n\n```{.r .cell-code}\ntable(table2$year, table2$type) # two columns at a time\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      \n       cases population\n  1999     3          3\n  2000     3          3\n```\n:::\n:::\n\n\n## Tidying data\n\nThe four verbs to keep in mind for reshaping data with `tidyr` are:  \n  - `pivot_wider`  \n  - `pivot_longer`  \n  - `separate`  \n  - `unite` \n\nThere are other verbs as well - as always, look at the `tidyr` cheatsheet!\n\n### pivot_wider - syntax\n\npivot_wider() \"widens\" data, increasing the number of columns and decreasing the number of rows. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/pivot_wider.png){width=50%}\n:::\n:::\n\n\n```{show-code}\npivot_wider(\n  data,\n  names_from = name,\n  values_from = value,\n  ...\n)\n```\n\n### pivot_wider - Exercise 6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\ntable1 # this is a tidy dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n\n```{.r .cell-code}\ntable2 # this one is NOT tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n:::\n\n```{.r .cell-code}\npivot_wider(table2,\n            names_from = type,\n            values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n\n```{.r .cell-code}\n# if you want to save the tidy table, you have to assign the output to a new object\ntable2_tidy <- pivot_wider(\n                      table2,\n                      names_from = type,\n                      values_from = count)\n\ntable2_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n### pivot_longer - Syntax\n\npivot_longer() \"lengthens\" data, increasing the number of rows and decreasing the number of columns. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/pivot_longer.png){width=50%}\n:::\n:::\n\n\n``` r\npivot_longer(\n  data,\n  cols,\n  names_to = \"name\",\n  values_to = \"value\",\n  ...\n)\n```\n\n### pivot_longer - Exercise 7\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n:::\n\n```{.r .cell-code}\npivot_longer(table4a, 2:3, names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n\n```{.r .cell-code}\npivot_longer(table4a, -country, names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n\n```{.r .cell-code}\ntable4_tidy <- pivot_longer(table4a, -country, names_to = \"year\", values_to = \"cases\")\ntable4_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n:::\n:::\n\n\n### separate - Syntax\n\nGiven either a regular expression or a vector of character positions, separate() turns a single character column into multiple columns.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/separate.png){width=60%}\n:::\n:::\n\n\n```{show-code}\nseparate(\n  data,\n  col,\n  into,\n  sep = \"[^[:alnum:]]+\", #any sequence of non-alphanumeric values\n  remove = TRUE, # default is to remove the original column\n  convert = FALSE, # default is to not convert\n  extra = \"warn\",\n  fill = \"warn\",\n  ...\n)\n\n```\n\n### separate - Exercise 8\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n\n```{.r .cell-code}\ntable3_tidy_1 <- separate(table3, \n                          rate, \n                          into = c(\"cases\", \"population\"), \n                          sep = \"/\")\ntable3_tidy_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n  country      year cases  population\n  <chr>       <dbl> <chr>  <chr>     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n:::\n:::\n\n\n### separate_rows - Syntax\n\nGiven either a regular expression or a vector of character positions, separate() turns a single character column into multiple rows. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/separate_rows.png){width=50%}\n:::\n:::\n\n\n```{show-code}\nseparate_rows(\n  data, \n  ..., \n  sep = \"[^[:alnum:].]+\", \n  convert = FALSE)\n```\n\n### separate_rows - Exercise 9\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n:::\n\n```{.r .cell-code}\ntable3_tidy_2 <- separate_rows(table3, rate, sep = \"/\")\ntable3_tidy_2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 x 3\n   country      year rate      \n   <chr>       <dbl> <chr>     \n 1 Afghanistan  1999 745       \n 2 Afghanistan  1999 19987071  \n 3 Afghanistan  2000 2666      \n 4 Afghanistan  2000 20595360  \n 5 Brazil       1999 37737     \n 6 Brazil       1999 172006362 \n 7 Brazil       2000 80488     \n 8 Brazil       2000 174504898 \n 9 China        1999 212258    \n10 China        1999 1272915272\n11 China        2000 213766    \n12 China        2000 1280428583\n```\n:::\n:::\n\n\nThis is not a great example because in creating two rows, the case and population numbers are now mixed up and we have lost information. So always think about and be intentional to avoid information loss.  \n\n### unite - Syntax\n\nunite() combines multiple columns into a single column.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/unite.png){width=50%}\n:::\n:::\n\n\n```{show-code}\nunite(data, \n      col, \n      ..., #select columns to unite\n      sep = \"[^[:alnum:]]+\", #any sequence of non-alphanumeric values\n      remove = TRUE, #default is set to TRUE\n      na.rm = FALSE) #default is set to FALSE\n```\n\n### unite - Exercise 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable6 <- read_csv(file = \"data/table6.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\nRows: 3 Columns: 5\n-- Column specification\n-------------------------------------------------------- Delimiter: \",\" chr\n(1): country dbl (4): ...1, century, year, cases\ni Use `spec()` to retrieve the full column specification for this data. i\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n* `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\ntable6_tidy <- unite(table6, \"new\", century, year, sep = \"\")\ntable6_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 4\n   ...1 country    new    cases\n  <dbl> <chr>      <chr>  <dbl>\n1     1 Afganistan 1999     745\n2     2 Brazil     1999   37737\n3     3 China      1999  212258\n```\n:::\n:::\n\n\n### Handling missing values\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/missing-values.png){width=100%}\n:::\n:::\n\nSource: Rstudio cheatsheets\n\n## Regular expressions\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/regex.png){width=80%}\n:::\n:::\n\n<br/>\nSource: Rstudio cheatsheets\n\nUseful website: [Regexr](https://regexr.com/)\n\nNote: _stringr_ is an entire package focused on working with character strings. I highly recommend checking it out! \n\n### Problem Set and Grading Rubric\n\n* Today's problem set assignment will allow you to practice the tidyr tools we learned in class today. \n* There is a total of 5 exercises, each with 4 points for a total of 20 points. \n* Link to [grading rubric](https://molb7950.netlify.app/policies/).\n\n### Acknowledgements\n\nThe material for this class was heavily borrowed from: \n* Data Science with R by Garrett Grolemund: https://garrettgman.github.io/tidying/\n* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html\n\n### Further Reading & Resources \n\n* R for data science https://r4ds.had.co.nz/index.html\n* Advanced R by Hadley Wickam https://adv-r.hadley.nz/\n* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/\n",
    "supporting": [
      "class-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}