{
  "hash": "6e883f88b9c84d9fe59d3f0c309372ae",
  "result": {
    "markdown": "---\ntitle: \"R Bootcamp - class 2\"\nauthor: \"Sujatha Jagannathan\"\n---\n\n\n\n## Learning Objectives for the R Bootcamp\n\n-   Follow best coding practices\n-   Know the fundamentals of R programming\n-   Become familiar with \"tidyverse\" suite of packages\n-   \\*\\* tidyr: \"Tidy\" a messy dataset \\*\\*\n-   dplyr: Transform data to derive new information\n-   ggplot2: Visualize and communicate results\n-   Practice reproducible analysis\n\n.pull-right\\[![](img/tidy1.png)\\] .pull-right\\[Source: R for Data\nScience by Hadley Wickham\\] ---\n\n## Rigor & Reproducibility\n\n.large\\[For the purposes of this R bootcamp, the best R&R tool we have\nat our disposal is using Rmarkdown documents. \\]\n\n------------------------------------------------------------------------\n\n## Today's class outline\n\n.large\\[ \\* Introduce *tidyr* \\* Review basic functions of *tidyr* \\*\npivot_wider \\* pivot_longer \\* separate \\* unite \\* handling missing\nvalues \\* (if time permits) Regular expressions (regex) \\* Homework\ninstructions\\] ---\n\n## What is tidy data?\n\n.large\\[ \\> \"Tidy datasets are all alike but every messy dataset is\nmessy in its own way.\" \\>\\\n\\> --- Hadley Wickham\\]\n\n<br/> <br/>\n\n.center\\[![](img/tidydata.png)\\]\n\n<br/> .pull-left\\[Source: Rstudio cheatsheets\\] ---\n\n## Data import - readr\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/readr.png){width=90%}\n:::\n:::\n\n\n\n<br/> <br/> .pull-left\\[Source: Rstudio cheatsheets\\]\n\n------------------------------------------------------------------------\n\n## (*A brief aside*) Data import - readr\n\n![](img/readr-args.png) <br/> <br/> <br/>\n\n.pull-left\\[Source: Rstudio cheatsheets\\]\n\n------------------------------------------------------------------------\n\n## Data sets - .red\\[Exercise #1\\]\n\n.large\\[ \\* In this class, we will use the datasets that come with the\ntidyr package to explore all the functions provided by tidyr. \\*\n`table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all\ndisplay the number of TB cases documented by the World Health\nOrganization in Afghanistan, Brazil, and China between 1999 and 2000. \\*\nThe data is a subset of the data contained in the World Health\nOrganization Global Tuberculosis Report. \\* The data contains values\nassociated with four variables (country, year, cases, and population),\nbut each table organizes the values in a different layout.\\] ---\n\n## Getting familiar with the data\n\n.large\\[ R provides many functions to examine features of a data object\n\n-   `class()` - what kind of object is it (high-level)?\n-   `str()` - what is the structure of the object?\n-   `typeof()` - what is the object's data type (low-level)?\n-   `length()` - how long is it? What about two dimensional objects?\n-   `attributes()` - does it have any metadata?\n-   `is_tibble()` - use is.? to confirm data type \\] ---\n\n## Getting familiar with the data - .red\\[Exercise #2\\]\n\n.large\\[ R provides many functions to examine features of a data object\n\n``` {show-code}\n  class()\n  str()\n  typeof() \n  length()\n  attributes()\n  is_tibble()\n```\n\nNote: a `tibble` can be coerced into a data.frame using\n`as.data.frame(tbl)` \\]\n\n------------------------------------------------------------------------\n\n## Getting familiar with the data\n\n.large\\[ Some of the useful Data Frame Functions are as follows:\\\n- `head()` - shows first 6 rows\\\n- `tail()` - shows last 6 rows\\\n- `dim()` - returns the dimensions of data frame (i.e. number of rows\nand number of columns)\\\n- `nrow()` - number of rows\\\n- `ncol()` - number of columns\\\n- `names()` or `colnames()` - both show the names attribute for a data\nframe\\\n- `sapply(dataframe, class)` - shows the class of each column in the\ndata frame\\\n- `glimpse()`\\]\n\n------------------------------------------------------------------------\n\n## Getting familiar with the data - .red\\[Exercise #3\\]\n\n.large\\[\n\n``` {show-code}\n  head()\n  tail()  \n  dim() \n  nrow()\n  ncol()\n  names()\n  sapply(dataframe, class)\n  glimpse()\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## Summary - .red\\[Exercise #4\\]\n\n.large\\[ A generic function used to produce result summaries of the\nresults of various model fitting functions.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\\]\n\n------------------------------------------------------------------------\n\n## Table - .red\\[Exercise #5\\]\n\n.large\\[ Uses the cross-classifying factors to build a contingency table\nof the counts at each combination of factor levels.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\\]\n\n## Tidying data\n\nThe four verbs to keep in mind for reshaping data with `tidyr` are:\n\n-   `pivot_wider`\n-   `pivot_longer`\n-   `separate`\n-   `unite`\n\n## pivot_wider - syntax\n\npivot_wider() \"widens\" data, increasing the number of columns and\ndecreasing the number of rows.\n\n``` r\npivot_wider(\n  data,\n  names_from = name,\n  values_from = value,\n  ...\n)\n```\n\n## pivot_wider - \\[Exercise #6\\]\n\n``` r\npivot_wider(\n  table2, \n  names_from = key, \n  values_from = value\n)\n```\n\n## pivot_longer - Syntax\n\n.large\\[ pivot_longer() \"lengthens\" data, increasing the number of rows\nand decreasing the number of columns.\n\n``` {show-code}\npivot_longer(\n  data,\n  cols,\n  names_to = \"name\",\n  values_to = \"value\",\n  ...\n)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## pivot_longer - .red\\[Exercise #7\\]\n\n.large\\[\n\n``` {show-code}\npivot_longer(table4, 2:3, \"year\", \"cases\")\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## unite - Syntax\n\n.large\\[ unite() combines multiple columns into a single column.\n\n``` {show-code}\nunite(data, \n      col, \n      ..., #select columns to unite\n      sep = \"_\", \n      remove = TRUE, #default is set to TRUE\n      na.rm = FALSE) #default is set to FALSE\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## unite - .red\\[Exercise #8\\]\n\n.large\\[\n\n``` {show-code}\nunite(table6, \"new\", century, year, sep = \"\")\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## separate - Syntax\n\n.large\\[ Given either a regular expression or a vector of character\npositions, separate() turns a single character column into multiple\ncolumns.\n\n``` {show-code}\nseparate(\n  data,\n  col,\n  into,\n  sep = \"[^[:alnum:]]+\", #any sequence of non-alphanumeric values\n  remove = TRUE,\n  convert = FALSE,\n  extra = \"warn\",\n  fill = \"warn\",\n  ...\n)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## separate - .red\\[Exercise #9\\]\n\n.large\\[\n\n``` {show-code}\nseparate(table3, \n         rate, \n         into = c(\"cases\", \"population\"), \n         sep = \"/\")\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## separate_rows - Syntax\n\n.large\\[ Given either a regular expression or a vector of character\npositions, separate() turns a single character column into multiple\nrows.\n\n``` {show-code}\nseparate_rows(\n  data, \n  ..., \n  sep = \"[^[:alnum:].]+\", \n  convert = FALSE)\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## separate_rows - .red\\[Exercise #10\\]\n\n.large\\[\n\n``` {show-code}\nseparate_rows(\n  table3, \n  rate, \n  sep = \"/\")\n```\n\n\\]\n\n------------------------------------------------------------------------\n\n## Handling missing values\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/missing-values.png){width=150%}\n:::\n:::\n\n\n\n<br/> <br/> <br/> .pull-left\\[Source: Rstudio cheatsheets\\]\n\n------------------------------------------------------------------------\n\n## Regular expressions\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/regex.png){width=80%}\n:::\n:::\n\n\n\nUseful website: [Regexr](https://regexr.com/) <br/> <br/> Note:\n*stringr* is an entire package focused on working with character\nstrings. I highly recommend checking it out!\n\n## .pull-left\\[Source: Rstudio cheatsheets\\]\n\n## Problem Set and Grading Rubric\n\n.large\\[ \\* Today's problem set assignment will allow you to practice\nthe tidyr tools we learned in class today. \\* There is a total of 5\nexercises, each with 2 points for a total of 10 points. \\* Link to\n[grading rubric](https://molb7950.netlify.app/policies/).\\]\n\n------------------------------------------------------------------------\n\n## Acknowledgements\n\n.large\\[ The material for this class was heavily borrowed from: \\* Data\nScience with R by Garrett Grolemund:\nhttps://garrettgman.github.io/tidying/ \\* R for data science by Hadley\nWickham: https://r4ds.had.co.nz/index.html\\]\n\n------------------------------------------------------------------------\n\n## Further Reading & Resources\n\n.large\\[ \\* R for data science https://r4ds.had.co.nz/index.html \\*\nAdvanced R by Hadley Wickam https://adv-r.hadley.nz/ \\* Data Science\nwith R by Garrett Grolemund https://garrettgman.github.io/tidying/\\]\n",
    "supporting": [
      "class-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}