{
  "hash": "8ec464e327f9fea779d1c10b64097add",
  "result": {
    "markdown": "---\ntitle: \"Stats Class 01\"\nauthor: \"Srinivas Ramachandran\"\ndate: \"9/13/2022\"\n---\n\n\n\n\n## Class Objectives\n\n1.  Understand probability distributions\n2.  Learn to apply probabilistic thinking to biological data\n\n## An Episode in the Life of a Data Scientist\\*\\^\n\n\\*All characters are made up\n\n\\^All data is simulated\n\nMatt: \"Here is some microscopy data. What insight can you find in it?\n(Yes it is not RNA and I want you to use R not python. No, my account\nhas not been hacked.)\"\n\nYou: \"What is in the data file?\"\n\nMatt: \"I measured the radius of gyration (I made up this quantity for\ncells) and the largest length for a bunch of cells from different cell\ntypes.\"\n\nYou get a brand new dataset. You are seeing it for the first time.\n\nFirst - unboxing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read dataset\ndata <- read.csv(file='data/cell_dimensions.tsv',sep='\\t',stringsAsFactors = T)\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Cell_Rg Cell_Len   Cell_Type\n1 2.441927 4.143111 Fibroblasts\n2 2.832714 6.648487 Fibroblasts\n3 3.085169 7.822642 Fibroblasts\n4 3.243857 7.997854 Fibroblasts\n5 3.359737 7.448261 Fibroblasts\n6 3.434748 7.800078 Fibroblasts\n```\n:::\n:::\n\n\nOk, so Matt gave you a clean file. There are 3 columns -\n\nCell_Rg - possibly radius of gyration?\n\nCell_len - possibly largest length?\n\nCell_Type - self explanatory\n\n## How many data points are there?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 400\n```\n:::\n:::\n\n\nHow do you get a feel for 400 datapoints? You cannot see trends or get\n\"insights\" directly looking at the raw data at this scale. So you need\nto \"summarise the data\" to get \"Estimates of Location\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Cell_Rg          Cell_Len            Cell_Type  \n Min.   : 2.263   Min.   : 0.000   Fibroblasts:100  \n 1st Qu.: 4.503   1st Qu.: 5.407   Muscle     :100  \n Median : 5.477   Median : 7.290   Neuron     :100  \n Mean   : 6.173   Mean   : 6.695   mESC       :100  \n 3rd Qu.: 6.751   3rd Qu.: 8.900                    \n Max.   :15.928   Max.   :12.626                    \n```\n:::\n:::\n\n\nLet us go through these summary statistics one-by-one.\n\nMinimum and Maximum - self explanatory\n\nMedian - midpoint when you sort that column. Let us verify.\n\nThere are 400 data points. Mid point will be between 200 and 201.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na=sort(data$Cell_Rg)[200]\nb=sort(data$Cell_Rg)[201]\nprint(c(a,b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.475759 5.478244\n```\n:::\n\n```{.r .cell-code}\n(a+b)/2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.477002\n```\n:::\n:::\n\n\nA more general definition of median is that it is 0.5 quantile (or 50th\npercentile).\n\nSo then first quartile (\"1st Qu.\") would be 0.25 quantile or 25th\npercentile, third quartile (\"3rd Qu.\") would be 0.75 quantile or 75th\npercentile. For 400 observations, where will the first and third\nquartile would be around? We can use quantile function to find out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(seq(1,400),0.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   25% \n100.75 \n```\n:::\n\n```{.r .cell-code}\nquantile(seq(1,400),0.75)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   75% \n300.25 \n```\n:::\n:::\n\n\nR will interpolate to get the quantile values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(data$Cell_Rg,0.25)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     25% \n4.502879 \n```\n:::\n\n```{.r .cell-code}\nquantile(data$Cell_Rg,0.75)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     75% \n6.750579 \n```\n:::\n:::\n\n\nMean is the average: sum of all observations divided by the number of\nobservations\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(data$Cell_Rg)/nrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.172667\n```\n:::\n:::\n\n\nBut this is the mean of all observations. Let us find the mean for each\ncell type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nSorted by mean Rg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% group_by(Cell_Type) %>% \n         summarise(mean_Rg = mean(Cell_Rg), mean_len = mean(Cell_Len)) %>% \n         arrange(mean_Rg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  Cell_Type   mean_Rg mean_len\n  <fct>         <dbl>    <dbl>\n1 Neuron         4.85     7.84\n2 Fibroblasts    5.05     6.97\n3 Muscle         7.08    10.1 \n4 mESC           7.72     1.84\n```\n:::\n:::\n\n\nSorted by mean Cell_Len:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% group_by(Cell_Type) %>% \n         summarise(mean_Rg = mean(Cell_Rg), mean_len = mean(Cell_Len)) %>% \n         arrange(mean_len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  Cell_Type   mean_Rg mean_len\n  <fct>         <dbl>    <dbl>\n1 mESC           7.72     1.84\n2 Fibroblasts    5.05     6.97\n3 Neuron         4.85     7.84\n4 Muscle         7.08    10.1 \n```\n:::\n:::\n\n\nSo mESC has the largest Rg and neuron has the smallest.\n\nmESC has the smallest length and neuron/muscle have really long lengths.\n\n(according to the mean...)\n\nMean could be skewed due to outliers. Median is a better measure in\npresence of outliers. If we repeat the above analysis with medians:\n\nSorted by median Rg:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% group_by(Cell_Type) %>% \n         summarise(median_Rg = median(Cell_Rg), median_len = median(Cell_Len)) %>% \n         arrange(median_Rg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  Cell_Type   median_Rg median_len\n  <fct>           <dbl>      <dbl>\n1 Neuron           4.86       7.88\n2 Fibroblasts      5.04       6.91\n3 mESC             5.22       1   \n4 Muscle           7.10      10.1 \n```\n:::\n:::\n\n\nSorted by median Cell_Len:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% group_by(Cell_Type) %>% \n         summarise(median_Rg = median(Cell_Rg), median_len = median(Cell_Len)) %>% \n         arrange(median_len)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 x 3\n  Cell_Type   median_Rg median_len\n  <fct>           <dbl>      <dbl>\n1 mESC             5.22       1   \n2 Fibroblasts      5.04       6.91\n3 Neuron           4.86       7.88\n4 Muscle           7.10      10.1 \n```\n:::\n:::\n\n\nHmm, mESC seems to have changed the most. Having extreme values skew the\nmean is more representative of real data you will come across.\n\nThis big difference between mean and median is suspicious for mESC. So\nwe need to see how the Rg of mESC is distributed. Histogram bins the\ndata to give us a discretized distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#get mESC Rg:\nmesc_rg <- data[data$Cell_Type==\"mESC\",]$Cell_Rg\n#plot histogram\nhist(mesc_rg,breaks=50,freq=FALSE,xlim=c(0,20))\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nCan we \"smooth\" the histogram?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mesc_rg,breaks=50,freq=FALSE,xlim=c(0,20))\nlines(density(mesc_rg),xlim=c(0,20),lwd=3,col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nSo obviously, there is an outlier population that is skewing the mean,\nbut the median is not as affected by the outliers.\n\nThis distribution is also telling us that the trend in mean or median\ndoesn't account for the \"spread\" of the data. To compare how spread out\nthe data is across the four cell types, we can use boxplots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(data) + \ngeom_boxplot(aes(x=Cell_Type,y=Cell_Rg),notch = T) +\ntheme_bw()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNotch went outside hinges\ni Do you want `notch = FALSE`?\n```\n:::\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nSo the variability and two sided distribution is hidden by boxplots,\nviolin plots help with that\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data) + \ngeom_violin(aes(x=Cell_Type,y=Cell_Rg)) +  \ngeom_boxplot(aes(x=Cell_Type,y=Cell_Rg),width=0.05) + \ntheme_bw()\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nWith these exploratory analyses, we can hypothesize that muscle has\nhigher Rg than fibroblasts and neurons. mESC has a complex distribution\nthat needs further experiments, so we won't analyze that cell type\nfurther.\n\n## How significant are differences between muscle cells and fibroblasts?\n\nWe want to ultimately answer the question: Does a given cell type have a\ndifferent size than others?\n\nUsing statistical concepts, we can answer this question in many ways:\n\n1.  We can make an assumption of the underlying probability\n    distribution - this gives us powerful tools to ask how different the\n    size of two cell types are.\n2.  We could use resampling (class 2)\n3.  We could use non-parametric statistical tests (class 2)\n\nLet us explore underlying distribution of Rg of muscle cells\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Get muscle Rg as a vector:\nmuscle_rg <- data[data$Cell_Type==\"Muscle\",]$Cell_Rg\n#generate histogram\nmuscle_rg_hist <- hist(muscle_rg,breaks=30,freq=F,xlim=c(0,12))\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nA probability density function (pdf) is associated with continuous\nrandom variable.\n\n1.  A pdf is greater than or equal to zero at all values of x\n2.  A pdf **integrates** to 1\n\nA normal distribution is an example of a pdf that occurs commonly in the\nworld around us.\n\nWe can use the normal distribution as an example to understand how to\nuse pdfs.\n\nLet us assume that the muscle cell Rg is normally distributed with an\naverage of 7 micron and a standard deviation of 1 micron. The ideal\ndistribution would look like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Use seq to create a range of numbers\ncell_size_list <- seq(0,12,0.2)\n#Use dnorm to calculate probability at each point of the vector above\ndist_cell_size_muscle <- dnorm(cell_size_list,mean=7,sd=1)\nplot(cell_size_list,dist_cell_size_muscle,type='l')\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nLet us say you fit a normal distribution to your muscle cell Rg data,\nthis is how it might look:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(muscle_rg_hist$mids,muscle_rg_hist$density,xlim=c(0,12),ylim=c(0,0.5))\nlines(cell_size_list,dist_cell_size_muscle,col='red',xlim=c(0,12),ylim=c(0,0.5))\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### Goodness of fit\n\nHow do we see how good a fit this is? We will not go through rigorous\nmeasures of goodness of fit in this class, but we will do a quick visual\ncheck on how good a fit is using Q-Q plot.\n\nQ-Q plot compares the quantiles of two distributions. In our case, we\nhave the observed distribution and the theoretical distribution.\n\nTo generate quantiles of our theoretical distribution, we will use\nqnorm:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoretical_muscle <- qnorm(ppoints(100),mean=7,sd=1)\n```\n:::\n\n\nHere is how the theoretical and observed numbers are distributed. We are\ngoing to plot the \"quintile\" on y axis and the Rg on x axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y=ppoints(100),x=theoretical_muscle,xlim=c(4,10), type='l')\nlines(y=ppoints(100),x=sort(muscle_rg),xlim=c(4,10), type='l',lwd=2,col=\"red\")\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nA Q-Q plot compares each point on black and red lines at each quintile:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqqplot(muscle_rg,theoretical_muscle)\nabline(a = 0, b = 1, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nIf the points fall close to the diagonal, the two distributions are\nsimilar.\n\nPoints either falling below or above the line at the edges indicate that\nthe tails of the distribution don't agree.\n\n#### Important note:\n\nThe two distributions being compared should be scaled to be similar.\nHere I generated the values of the normal distribution at the same\nposition as that of the observed distribution.\n\n#### We will next repeat this analysis for fibroblasts:\n\nSimilarly for fibbroblasts, a normal distribution could explain the\nunderlying distribution of Rg.\n\nFirst the histogram of observed values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Get fibroblast Rg as a vector:\nfib_rg <- data[data$Cell_Type==\"Fibroblasts\",]$Cell_Rg\n#generate histogram\nfib_rg_hist <- hist(fib_rg,breaks=30,freq=F,xlim=c(0,12))\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nThen the theoretical distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_cell_size_fib <- dnorm(cell_size_list,mean=5,sd=1)\n#plots:\nplot(fib_rg_hist$mids,fib_rg_hist$density,xlim=c(0,12),ylim=c(0,0.5))\nlines(cell_size_list,dist_cell_size_fib,col='red',xlim=c(0,12),ylim=c(0,0.5))\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nAnd finally the Q-Q plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoretical_fib <- qnorm(ppoints(100),mean=5,sd=1)\nqqplot(fib_rg,theoretical_fib)\nabline(a = 0, b = 1, col = \"blue\")\n```\n\n::: {.cell-output-display}\n![](class-01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThis Q-Q plot looks good as well.\n\n##### Next class, we will start by asking how we can use these theoretical distributions to figure out if Rg of muscle and fibroblasts are different.\n",
    "supporting": [
      "class-01_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}