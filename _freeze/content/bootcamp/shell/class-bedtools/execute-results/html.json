{
  "hash": "f949c533dfdb43272b32087277ffbfb3",
  "result": {
    "markdown": "---\ntitle: \"Bootcamp Class XXX: <br/> BEDtools\"\nauthor: \"Jay Hesselberth\"\n---\n\n\n\n\n---\n\n## Learning Objectives\n\n* Define the BED, VCF, and BAM formats\n* Learn about genomic data types and where to get data\n* Start to use `bedtools` to analyze genomic data\n* Introduce the BEDTools suite of tools.\n* Understand why using BEDTools is needed.\n* Practice common operations on BED files with BEDTools.\n\n---\n\n## Rigor & Reproducibility\n\nInclude a dedicated slide for R&R issues to be considered in the lecture.\n\nKeep this slide in a conspicuous location and don't change the title so that\nwe can collate if needed.\n\n---\n\n## Problem Set and Grading Rubric\n\nInclude a dedicate slide describing problem set assignment with a link\nto the [grading rubric](https://molb7950.netlify.app/policies/).\n\nMention whether this problem set will be graded by peers or instructors/TAs.\n\n---\n\n## Further Reading \n\n* BEDtools See the original BEDTools paper for more information: <http://bioinformatics.oxfordjournals.org/content/26/6/841.full>\n* valr\n\n---\n\n## BEDTools Overview\n\nLearning BEDTools is good return on investment.\n\nFor example, to extract out **all genes that overlap a CpG island**:\n\n```bash\nbedtools intersect -u -a genes.hg19.bed.gz -b cpg.bed.gz > genes-in-islands.bed\n```\n\n`intersect`is a bedtools tool. It follows a common pattern in bedtools that the\nquery file is specified after the `-a` flag and the *subject* file after the\n`-b` flag.\n\n---\n\n## BEDTools Utility\n\nFinding all overlaps between a pair of BED files naively in python would\nlook like:\n\n```python\nfor a in parse_bed('a.bed'):\n    for b in parse_bed('b.bed'):\n        if overlaps(a, b):\n            # do stuff\n```\n\nIf `a.bed` has 10K entries and `b.bed` has 100K entries, these loops check for overlaps **1 billion times**. That will be slow.\n\nBEDTools uses an indexing scheme that reduces the number of tests dramatically.\n\n---\n\n##  BEDtools advantages\n\n* Fast: faster than intersect code you will write\n* Terse: syntax is terse, but readable\n* Formats: handles BED, VCF and GFF formats (gzip\\'ed or not)\n* Special Cases: handles stranded-ness, 1-base overlaps, abutted intervals, etc. (likely to be bugs if you do code in manually)\n\n---\n\n## BEDTools Commands\n\nTo see all available BEDTools commands, type\n\n```bash\nbedtools\n```\n\nThe most commonly used BEDtools are:\n\n- `intersect`\n- `genomecov`\n- `closest`\n- `map`\n\n---\n\n## BEDTools Documentation\n\nThe BEDTools documentation is quite good and ever improving.\n\nSee the documentation for\n`intersect <bedtools:intersect>`{.interpreted-text role=\"ref\"} with:\n\n```bash\n$ bedtools intersect\n```\n\nThe online HTML help is also good and includes pictures:\n\n<https://bedtools.readthedocs.org/en/latest/content/tools/intersect.html>\n\n---\n\n## BEDTools intersect\n\nHave a browser window open to `BEDTools intersect documentation`. It will likely be the BEDTools function that you use themost. It has a lot of options.\n\n![image](http://bedtools.readthedocs.org/en/latest/_images/intersect-glyph.png)\n\n`-v` means (like grep) include all intervals from `-a` that do not overlap intervals in `-b`\n\n---\n\n## Example Files\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t10\t20\ta1\t1\t+\nchr1\t100\t200\ta2\t2\t-\n\nchr1\t20\t30\tb1\t1\t+\nchr1\t90\t101\tb2\t2\t-\nchr1\t100\t110\tb3\t3\t+\nchr1\t200\t210\tb4\t4\t+\n```\n:::\n:::\n\n\n\n\nWhat will happen if you intersect those files? For example, the *a.bed*\nregion `chr1:100-200` overlaps:\n\n    chr1:90-101 \n    chr1:100-110\n\nfrom *b.bed*\n\n---\n\n## intersect\n\nintersect with default arguments means **extract chunks of `a` that\noverlap regions in `b`**\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t100\t101\ta2\t2\t-\nchr1\t100\t110\ta2\t2\t-\n```\n:::\n:::\n\n\n\n\nHere is the original interval from `a.bed`:\n\n    chr1    100 200 a2  2   -\n\nAnd the overlapping intervals from `b.bed`:\n\n    chr1    90  101 b2  2   -\n    chr1    100 110 b3  3   +\n\n---\n\n### intersect -wa\n\nOften, we want the **entire interval from `a` if it overlaps any interval\nin -b**\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t100\t200\ta2\t2\t-\nchr1\t100\t200\ta2\t2\t-\n```\n:::\n:::\n\n\n\n\nWe can get that uniquely with `-u`.\n\n---\n\n### intersect -wo\n\nWe can see which intervals in `b` are associated with `a`:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t100\t200\ta2\t2\t-\tchr1\t90\t101\tb2\t2\t-\t1\nchr1\t100\t200\ta2\t2\t-\tchr1\t100\t110\tb3\t3\t+\t10\n```\n:::\n:::\n\n\n\n\n---\n\n### intersect exercise\n\nWhat happens if you reverse the arguments? E.g. instead of:\n\n    -a a.bed -b b.bed\n\nuse:\n\n    -b a.bed -a b.bed\n\nTry that with no extra flags, with `-u`, `-wa`, `-wo`.\n\nHow does it compare to the original?\n\n---\n\n## intersect -c\n\nWe can count overlaps for each interval in `a` with those in `b` with:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t10\t20\ta1\t1\t+\t0\nchr1\t100\t200\ta2\t2\t-\t2\n```\n:::\n:::\n\n\n\n\nThis is our original `a.bed` with an **additional column number of overlaps** with `b.bed`\n\n---\n\n### intersect -v\n\nExtract intervals in `a.bed` that do not overlap any interval in `b.bed`:\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t10\t20\ta1\t1\t+\n```\n:::\n:::\n\n\n\n\nExtract intervals in `b.bed` that do not overlap any interval in `a.bed`\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t20\t30\tb1\t1\t+\nchr1\t200\t210\tb4\t4\t+\n```\n:::\n:::\n\n\n\n\n---\n\n### Intersect Examples \n\n* fragments of `a` that overlap `b`: `intersect -a a.bed -b b.bed`\n* complete regions of `a` that overlap `b`: `intersect -a a.bed -b b.bed -u`\n* intervals of [b] as well as \\`a\\`: `intersect -a a.bed -b b.bed -wo`\n* number of times each `a` overlaps `b`: `intersect -a a.bed -b b.bed -c`\n* intervals of `a` that do not overlap `b`: `intersect -a a.bed -b b.bed -v`\n\n---\n\n## Exercises\n\nUse `data/cpg.bed.gz` and `data/genes.hg19.bed.gz` for the following exercises:\n\n1.  Extract the CpG islands that touch any gene [**24611**]\n2.  Extract CpG islands that do not touch any gene [**7012**]\n3.  Extract (uniquely) all of each CpG Island that touches any gene [**21679**]\n4.  Extract CpG\\'s that are completely contained within a gene (look at the help for a flag to indicate that you want the fraction of overlap to be 1 (for 100 %). [**10714**]\n5.  Report genes that overlap any CpG island. [**16908**]\n6.  Report genes that overlap more than 1 CpG Island (use `-c` and `awk`). [**3703**].\n\nAs you are figuring these out, make sure to pipe the output to `ess` or `head`.\n\n---\n\n## Other Reading\n\n*   Check out the online [documentation](https://bedtools.readthedocs.org/en/latest/content/tools/intersect.html).\n*   A [tutorial](http://quinlanlab.org/tutorials/cshl2013/bedtools.html) by the author of BEDTools\n\n## Intersect Bam\n\nWe have seen that `intersect` takes `-a` and `-b` arguments. It can also intersect against an alignment BAM file by using `-abam` in place of `-a`.\n\ne.g:\n\n```bash\nbedtools intersect \\\n  -abam data/experiment.bam \\\n  -b data/target-regions.bed \n```\n\n### Intersect Strand\n\nFrom the [help](https://bedtools.readthedocs.org/en/latest/content/tools/intersect.html), one can see that intersect can consider strand. For example if both files have a strand field then\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nchr1\t100\t101\ta2\t2\t-\n```\n:::\n:::\n\n\n\n\nWill only consider as overlapping those intervals in `a.bed` that have the same strand as `b.bed`>\n\n## Closest\n\nWith `intersect` we can only get overlapping intervals. `bedtools closest` reports the nearest interval even if it's not overlapping.\n\nExample: report the nearest CpG to each gene as long as it is within 5 KB.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nError: Sorted input specified, but the file data/genes.hg19.bed.gz has the following out of order record\nchr1\t17081128\t17090975\tMST1L\t15\t-\nchr1\t14406\t29370\tWASH7P\t7\t-\tchr1\t28735\t29810\tCpG:_116\t0\nchr1\t34610\t36081\tFAM138F\t3\t-\tchr1\t28735\t29810\tCpG:_116\t4801\nchr1\t134772\t140566\tLOC729737\t3\t-\tchr1\t135124\t135563\tCpG:_30\t0\nchr1\t322036\t326938\tLOC100133331\t3\t+\tchr1\t327790\t328229\tCpG:_29\t853\nchr1\t327545\t328439\tLOC388312\t1\t+\tchr1\t327790\t328229\tCpG:_29\t0\nchr1\t700244\t714068\tLOC100288069\t7\t-\tchr1\t713984\t714547\tCpG:_60\t0\nchr1\t761585\t762902\tLINC00115\t1\t-\tchr1\t762416\t763445\tCpG:_115\t0\nchr1\t762970\t794826\tLOC643837\t6\t+\tchr1\t762416\t763445\tCpG:_115\t0\nchr1\t762970\t794826\tLOC643837\t6\t+\tchr1\t788863\t789211\tCpG:_28\t0\nchr1\t803450\t812182\tFAM41C\t3\t-\tchr1\t805198\t805628\tCpG:_50\t0\n```\n:::\n:::\n\n\n\n\n### Genomecov\n\nGet coverage of intervals in BED by BAM\n\n![image](https://bedtools.readthedocs.org/en/latest/_images/genomecov-glyph.png)\n\nUsually want the last option [-bg -split]\n\n",
    "supporting": [
      "class-bedtools_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}