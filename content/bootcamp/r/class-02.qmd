---
title: "Exercises-02"
author: "Sujatha Jagannathan"
date: "8/25/2020"
---

```{r include=FALSE}
library(tidyverse)
library(knitr)
```

### Contact Info 
Suja Jagannathan [sujatha.jagannathan@cuanschutz.edu](mailto:sujatha.jagannathan@cuanschutz.edu)

### Office Hours
Use https://calendly.com/molb7950 to schedule a time with a TA.

<br/>

### Learning Objectives for the R Bootcamp

* Follow best coding practices (*class 1*)
* Know the fundamentals of R programming (*class 1*)
* Become familiar with "tidyverse" suite of packages
    * tidyr: "Tidy" a messy dataset (*class 2*)
    * dplyr: Transform data to derive new information (*class 3*)
    * ggplot2: Visualize and communicate results (*class 4*)
* Practice reproducible analysis using Rmarkdown (Rigor & Reproducibility) (*classes 1-5*)

### Today's class outline - *class 2*

* Become familiar with "tidyverse" suite of packages
* Introduce _readr_ (Exercise 1)
* Introduce _tidyr_ (Exercise 2)
* Tools for data exploration (Exercises 3-5)
* Review basic functions of _tidyr_
    * pivot_wider (Exercise 6)
    * pivot_longer (Exercise 7)
    * separate (Exercise 8 & 9)
    * unite (Exercise 10)
    * handling missing values
* (if time permits) Regular expressions (regex)
* Homework instructions

## Tidyverse

* Tidyverse is an opinionated collection of R packages designed for data science. 
* All packages share an underlying design philosophy, grammar, and data structures.
* 25 packages, total (as of today) - we will focus mainly on tidyr, dplyr, and ggplot2

```{r, echo = FALSE, out.width= '60%'}
knitr::include_graphics("img/tidy1.png")
```
<br/>
Source: R for Data Science by Hadley Wickham

### Data import - readr - Exercise 1

```{r, echo = FALSE, out.width= '70%'}
knitr::include_graphics("img/readr.png")
```

```{r, echo = FALSE, out.width= '80%'}
knitr::include_graphics("img/readr-args.png")
```
Source: Rstudio cheatsheets

- Let's try importing a small dataset - Exercise # 1
```{r}
getwd() # good to know which folder you are on since the path to file is relative
# same as `pwd` in bash
mydata.tbl <- read_csv(file = "data/mydata.csv") # read in the file
mydata.tbl # look at the contents of the data object
d1 <- mydata.tbl # rename file
d1 # look at contents of new object
rm(mydata.tbl) # removing a dataset
```

__Note__: All of these functions can also be used in an interactive manner via `Environment` > `Import Dataset` > `From Text (readr)` 

### What is tidy data?

>   "Tidy datasets are all alike but every messy dataset is messy in its own way."
>   
>   --- Hadley Wickham

```{r, echo = FALSE, out.width= '100%'}
knitr::include_graphics("img/tidydata.png")
```
Source: Rstudio cheatsheets

### Datasets for today's class - Exercise 2

* In this class, we will use the datasets that come with the tidyr package to explore all the functions provided by tidyr. 
* Explore the contents of _tidyr_ package (Exercise #2)
* `table1`, `table2`, `table3`, `table4a`, `table4b`, and `table5` all display the number of TB cases documented by the World Health Organization in Afghanistan, Brazil, and China between 1999 and 2000. 

### Getting familiar with the data - Exercise 3

R provides many functions to examine features of a data object

  - `View()` - To open the table up in an excel-like interface - not recommended for large tables
  - `class()` - what kind of object is it (high-level)?
  - `typeof()` - what is the objectâ€™s data type (low-level)?
  - `is_tibble()` - use is.? to confirm data type
  - `str()` - what is the structure of the object?
  - `attributes()` - does it have any metadata?

* Let's explore table1
```{r}
# View(table1) # to look at the table in Viewer
table1 # to print the table to console
class(table1)
typeof(table1)
is_tibble(table1)
str(table1)
attributes(table1)
```
Note: a `tibble` can be coerced into a data.frame using `as.data.frame(tbl)`

### Getting familiar with the data - Exercise 4

Some of the useful Data Frame Functions are as follows:  
  - `head()` - shows first 6 rows  
  - `tail()` - shows last 6 rows  
  - `dim()` - returns the dimensions of data frame (i.e. number of rows and number of columns)  
  - `nrow()` - number of rows  
  - `ncol()` - number of columns  
  - `names()` or `colnames()` - both show the names attribute for a data frame  
  - `sapply(dataframe, class)` - shows the class of each column in the data frame*  
  - `glimpse()`

*Iteration is not covered in this bootcamp. But there is a great primer on the package that does this, _purr_, on Rstudio Primers. https://rstudio.cloud/learn/primers/5

More functions to explore data - table2 this time. 
```{r}
head(table2)
tail(table2)
tail(table2, n = 8) # specify number of lines to print
dim(table2)
nrow(table2)
ncol(table2)
names(table2)
sapply(table2, class)
class(table2) # observe the difference from the above command
glimpse(table2)
```

### Getting familiar with the data - _summary_, _hist_, & _table_ - Exercise 5

_summary_: A generic function used to produce result summaries of the results of various model fitting functions.

```{r}
summary(table1) # summary of the whole table
summary(table1$cases) # summary of just one column of the table
```

_hist_: Takes in a vector of values and plots a histogram.

```{r fig.height= 4, fig.width= 4}
hist(table1$cases) # summary of just one column of the table
```

_table_: Uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.

```{r}
table(table2$year) # tally of one column
table(table2$year, table2$type) # two columns at a time
```

## Tidying data

The four verbs to keep in mind for reshaping data with `tidyr` are:  
  - `pivot_wider`  
  - `pivot_longer`  
  - `separate`  
  - `unite` 

There are other verbs as well - as always, look at the `tidyr` cheatsheet!

### pivot_wider - syntax

pivot_wider() "widens" data, increasing the number of columns and decreasing the number of rows. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics("img/pivot_wider.png")
```

```{show-code}
pivot_wider(
  data,
  names_from = name,
  values_from = value,
  ...
)
```

### pivot_wider - Exercise 6

```{r}
library(tidyr)
table1 # this is a tidy dataset
table2 # this one is NOT tidy

pivot_wider(table2,
  names_from = type,
  values_from = count
)

# if you want to save the tidy table, you have to assign the output to a new object
table2_tidy <- pivot_wider(
  table2,
  names_from = type,
  values_from = count
)

table2_tidy
```

### pivot_longer - Syntax

pivot_longer() "lengthens" data, increasing the number of rows and decreasing the number of columns. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics("img/pivot_longer.png")
```

``` r
pivot_longer(
  data,
  cols,
  names_to = "name",
  values_to = "value",
  ...
)
```

### pivot_longer - Exercise 7

```{r}
table4a
pivot_longer(table4a, 2:3, names_to = "year", values_to = "cases")
pivot_longer(table4a, -country, names_to = "year", values_to = "cases")
table4_tidy <- pivot_longer(table4a, -country, names_to = "year", values_to = "cases")
table4_tidy
```

### separate - Syntax

Given either a regular expression or a vector of character positions, separate() turns a single character column into multiple columns.

```{r, echo = FALSE, out.width= '60%'}
knitr::include_graphics("img/separate.png")
```

```{show-code}
separate(
  data,
  col,
  into,
  sep = "[^[:alnum:]]+", #any sequence of non-alphanumeric values
  remove = TRUE, # default is to remove the original column
  convert = FALSE, # default is to not convert
  extra = "warn",
  fill = "warn",
  ...
)

```

### separate - Exercise 8

```{r}
table3
table3_tidy_1 <- separate(table3,
  rate,
  into = c("cases", "population"),
  sep = "/"
)
table3_tidy_1
```

### separate_rows - Syntax

Given either a regular expression or a vector of character positions, separate() turns a single character column into multiple rows. 

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics("img/separate_rows.png")
```

```{show-code}
separate_rows(
  data, 
  ..., 
  sep = "[^[:alnum:].]+", 
  convert = FALSE)
```

### separate_rows - Exercise 9

```{r}
table3
table3_tidy_2 <- separate_rows(table3, rate, sep = "/")
table3_tidy_2
```

This is not a great example because in creating two rows, the case and population numbers are now mixed up and we have lost information. So always think about and be intentional to avoid information loss.  

### unite - Syntax

unite() combines multiple columns into a single column.

```{r, echo = FALSE, out.width= '50%'}
knitr::include_graphics("img/unite.png")
```

```{show-code}
unite(data, 
      col, 
      ..., #select columns to unite
      sep = "[^[:alnum:]]+", #any sequence of non-alphanumeric values
      remove = TRUE, #default is set to TRUE
      na.rm = FALSE) #default is set to FALSE
```

### unite - Exercise 10

```{r}
table6 <- read_csv(file = "data/table6.csv")
table6_tidy <- unite(table6, "new", century, year, sep = "")
table6_tidy
```

### Handling missing values

```{r, echo = FALSE, out.width= '100%'}
knitr::include_graphics("img/missing-values.png")
```
Source: Rstudio cheatsheets

## Regular expressions

```{r, echo = FALSE, out.width= '80%'}
knitr::include_graphics("img/regex.png")
```
<br/>
Source: Rstudio cheatsheets

Useful website: [Regexr](https://regexr.com/)

Note: _stringr_ is an entire package focused on working with character strings. I highly recommend checking it out! 

### Problem Set and Grading Rubric

* Today's problem set assignment will allow you to practice the tidyr tools we learned in class today. 
* There is a total of 5 exercises, each with 4 points for a total of 20 points. 
* Link to [grading rubric](https://molb7950.netlify.app/policies/).

### Acknowledgements

The material for this class was heavily borrowed from: 
* Data Science with R by Garrett Grolemund: https://garrettgman.github.io/tidying/
* R for data science by Hadley Wickham: https://r4ds.had.co.nz/index.html

### Further Reading & Resources 

* R for data science https://r4ds.had.co.nz/index.html
* Advanced R by Hadley Wickam https://adv-r.hadley.nz/
* Data Science with R by Garrett Grolemund https://garrettgman.github.io/tidying/
