---
title: "R Bootcamp Problem Set 3"
author: "Insert your name here"
---

## Setup

Start by loading libraries you need analysis in the code chunk below.
When in doubt, start by loading the tidyverse package.

```{r, setup}
library(tidyverse)
library(here)
```

## Problem Set

Each problem below is worth **5 points**.

Use the data files in the `data/` directory to answer the questions.

For this problem set, you are allowed to help each other, but you are not allowed to post correct answers in slack.

**The problem set is due 12pm on Aug 31.**

### Grading rubric

- Everything is good: 5 points
- Partially correct answers: 3-4 points
- Reasonable attempt: 2 points

## Question 1

Load the `palmerpenguins` package. Inspect the `penguins` tibble with `summary`. 

Use `drop_na()` to remove rows with `NA` values in the `penguins` tibble. How many rows were removed from the tibble?


```{r}
library(palmerpenguins)

summary(penguins)

penguins_nona <- drop_na(penguins)
nrow(penguins) - nrow(penguins_nona)
```

Then, use `replace_na()` to replace `NA` values in `bill_length_mm` and `bill_depth_mm` with a value of 0.

```{r}
replace_na(penguins, list(bill_length_mm = 0, bill_depth_mm = 0))
```

## Question 2

Use `arrange`, `filter`, and `select` on a data frame. Do the following, in order:

1. Import the data set `data/data_transcript_exp_tidy.csv`. 
2. Sort the tibble by expression data (`count`) from highest to lowest level.
3. Filter the tibble by `count` > 100
4. Select all columns *except* for `type`

```{r, q1}
exp_tbl <- read_csv(here("data/data_transcript_exp_tidy.csv.gz"))
exp_tbl |>
  arrange(count) |>
  filter(count > 100) |>
  select(-type)

```

## Question 3

How will you:

A) create a new column `log10count` that contains log10 transformed `count` values and
B) rearrange the columns in the following order: ensembl_transcript_id, type, time, replicate, count, log10count.

(Note that we have dropped `extra`)

Hint: Use `mutate` and `select`

```{r, q3}
exp_tbl |>
  mutate(log10count = log10(count)) |>
  select(ensembl_transcript_id, type, time, replicate, count, log10count)
```

## Question 4

Calculate a per-transcript sum, while keeping the `time` information?

Hint: Use `group_by` with multiple variables, and `summarise` the "count" values using `sum()`

```{r, q4}
exp_tbl |>
  group_by(ensembl_transcript_id, time) |>
  summarize(count_sum = sum(count))
```